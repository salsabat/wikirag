{"docstore/metadata": {"8c8ef739-bcd3-4cad-8494-1bf91c6601b3": {"doc_hash": "06132d4460eda84dff1ddcd39f5494d3fa1bad7c1a21da49e0f55f0acdaae115"}, "1814e81f-9d13-43fc-af31-f2ae27af422c": {"doc_hash": "423f2eb29bd71bb911d6ea84df5668cfee1caf448e5ad74635a19a3a8c17cf78"}, "dba8ad71-1979-457f-8689-ff7dc9d2b345": {"doc_hash": "064cd9bb1dbafc5c738a9181a376e6e079904c56955f44f291edb9ee5aa9e9b2"}, "e523414d-2c6a-44cd-a377-bd5f9e65889e": {"doc_hash": "7ea41d7f3638c98124cc50a0ed3ad9ef236db462dc5436473237b16d4d4104d9"}, "4a450406-d4ab-4c59-afa1-572c12cbf7f1": {"doc_hash": "bb5a6a798ea4c0b197bee5aad572c64289a602237e9154c97beab1cb2b7e3390"}, "740f7246-5510-4f72-ae99-deb0de5eb6a6": {"doc_hash": "0c73bcf228a2261840871cbbd96b653bfb112e8d454475445526a71027a09861"}, "b17969f6-1bfc-4628-8e34-bd6ced6bd890": {"doc_hash": "e3d669c097fa527fe58cebac2fa3aef6433231c9ebb4515b346dcba24463804f"}, "1cc46db8-e37a-4bcc-a9ee-9337a455ee14": {"doc_hash": "cdf22d110254a5e471a578c4d1213fee951f6c53a2e8f992f4b4b5b0750afdb0"}, "717220ee-9300-46f8-bcae-054196fde762": {"doc_hash": "674eb56e61e28db3a784dd23eeb453650dfcb58bd1b4e3741f518231c089df16"}, "f4b11cca-1fab-4c2e-b69d-2eced8bee678": {"doc_hash": "6e43b0b2e18ebfa8b9614f8f6b0cf1f25fc1b7374374fb651559d884f8202036"}, "89762987-2cc0-4698-9236-4da8f4837395": {"doc_hash": "bfbcde953a8aaf8fd2bdb7e340bc687c73315b38f8a828a79b00fa7b83ef4784"}, "a93eea08-e93f-4f53-91f3-854e1e351f91": {"doc_hash": "d8e865c508e18e2c05e99c8e2fd316ad5c429fc72bb7e632456dbf6f9f3d0850"}, "2124450a-bae9-44d8-8f95-286e98fd4c9a": {"doc_hash": "f8e28700bde96222a37601122a90163be1aad5ae31ff858a0285725dd56bb5c3"}, "2a78fbb5-bd04-4b9c-995a-4631842b06be": {"doc_hash": "de994296b964f697759185c8e82cca1e044bb27141a1b6d38f6713674b038fc5"}, "c7a2e0e1-7d0b-4fd6-8433-ca219cf26399": {"doc_hash": "503e047697aeaed5e1bbd019196f229d2b1f2c1cb74610686aab56099ba848a0"}, "3306a846-7489-4569-9981-e51cc70c1c67": {"doc_hash": "748b737d56d1330e1c01bc533d13e3aeb02630b367a97f423581e99d1261ae81"}, "fd027ff0-c338-453a-8d1f-1d7abc054f0a": {"doc_hash": "b30f459e79a672487124ba7c13277cbef9d3dbca8396936b5462ff9e62ea3dd5"}, "6ea1defb-ef98-4293-aae5-55e98fb8a821": {"doc_hash": "94f2ef539f1e095be6eb036f80dfad6f538585967249cccec7c7c73afa200fdd"}, "57f96dae-6255-48a6-951c-114fb8502003": {"doc_hash": "dc621feac30a2cda9516a5644d6ca036063d78825ff047170d357770ebc7f34b"}, "371cfb89-a0eb-4d3f-9ec1-432e47970e44": {"doc_hash": "1addfee69c746a55f4e602939e8508d7f6af1080c7d91e3fa87c38c39581c261"}, "5deb23ed-42a3-4596-b3db-53e2507ba468": {"doc_hash": "a545dda11471ca0f70a918f6c9f22f528e639be483332952a66c16ab9f87ed84"}, "515cd4d2-1a82-4adf-adec-6fbde7b97c91": {"doc_hash": "35d30c2557ec9984d8e4da0c641a980c290c1fe82a98bc91dad7613fa432c698"}, "0e95ed92-630a-4a37-a537-96f0770aa1c8": {"doc_hash": "d344192a334af9b87774ccb5d6418de733f96422330a332a8738ad00f59f761c"}, "48570ac2-28e7-46d6-bb94-621c1404ba9e": {"doc_hash": "37bdb9f1d8fca96b1ce761b61c7a461b6bf425131b8b6bd58c11913ffa078d16"}, "7fbd543c-eb29-42c8-b20f-e47b04f24818": {"doc_hash": "f9a849881c8de14ba17c1cf43fbe156c896163979796b243a218aaa8061381ea"}, "b98f6cd6-73e2-4a92-9eef-7628dc6db29f": {"doc_hash": "d032eaf7739b62c3d8146c207d157781823eec4ee5416272dab282c5dab76c72"}, "efc59103-b568-4d8b-b9ac-e1c672c99c50": {"doc_hash": "ec1c533652981a49669d172de0e50b0d5742bb51530b94ff6bc6316e529f4812"}, "a7389587-1026-44fc-9df5-07766d354257": {"doc_hash": "b539952f4c6477cdba6b523a7e771f56f87f06cdc2145e9b9e4ccf194906d9dd"}, "a6df1775-f7b3-4155-9727-85ef5a94fe6e": {"doc_hash": "b2a1e187d9b4fd2c2204136e0dc53be4582ea9ce6c88dafcd0af7e7013d31c7f"}, "8da64739-fb32-4a71-81fb-87b44f924646": {"doc_hash": "c58f651354fc22e32da7c96a2c7830187f659d3e5a2d50781ebb976bbf2af2cb"}, "1ee48f39-469b-4622-aaf2-4e24b9b0fbf7": {"doc_hash": "d3fbb56b89bd0c2b6a36b44dccdcb4088974863bdc43ab08dab88ac6635d0aef"}, "46298fdd-9e96-4be0-84db-adc501e9dd94": {"doc_hash": "b1a56b1b57826493566ea9f884372f09b0064e984f6f444daa7f23c32fd4938d"}, "1c6a9ef1-a6b6-473a-8951-9ae03b1c4b32": {"doc_hash": "944dd796d050d11752cb05ad94a3d957d6906cb14f3816a489a614613e883cbc"}, "63154e71-a06f-4ea6-9ce1-69f9b846286b": {"doc_hash": "3058f375ccdc36ad4bb3348d3c5830cb12f71265bdb74c61050a43b2a94cddb4"}, "9239f300-edb3-4abf-9e6e-0cf5c3c18997": {"doc_hash": "432363c45726fa198ef852ef679799961f731a535f5282fdc26aeb26d078850d"}, "0e1d7974-7c21-4c29-8b07-a74a0345358c": {"doc_hash": "e824572a2b40f6990121fa36de9854fba5456bb667a5535f92e4d4386e08a420"}, "3713c18b-4c38-40fc-96fb-0fbff8b093f3": {"doc_hash": "da7fa3b1082f8ce868e60358ffa742a27e7bd089b50961d714bf36e4af7f52c4"}, "8e431196-224e-418a-b1ab-ed0e7e3916aa": {"doc_hash": "2571bb856df9fd2f00951fdef91d5af62e866937055180a4cbf81b319f57d504"}, "4dad9663-23e3-496c-b8ab-ff8deeefbbf9": {"doc_hash": "d798806235c2a95b1db21d1306ab39c5f47fa9006167895fefa15f9b900536b0"}, "629aa3c5-1e55-4950-9703-f8bd516f6ffd": {"doc_hash": "bd38ce08a7f04342d339daf4c5779504ef3d56f64c6cc5bbb400b9181d859e2b"}, "7cc1fa22-065f-43ca-a779-108038d1822e": {"doc_hash": "0f18eb568198b323766bc9ead178601a36e2fb00719f64860489237adb32117d"}, "430b7061-8878-4660-b749-19c257a0753d": {"doc_hash": "2cdc49a75c2ec76d295fd2f50a66ce4689dd9bc76c4cd9339535c35247213937"}, "2a5f7834-517f-462a-9487-930654d0129e": {"doc_hash": "4a9845cb50ece78b591e9c0cbbd2879c98c0e2e1e4bddc8c87a2d7e2e90cba1a"}, "bea453b6-19cc-4716-9aa0-7972c7a5f75a": {"doc_hash": "86e008fc641fc86ed463fb59ff24b9c977d6c2f803074efa0bddaca9e79392e0"}, "168b0ab2-9774-4bfa-9860-a3c9fd70da7f": {"doc_hash": "055e02ac0473eb43ba0fcc789dab634aed1c60dff310893b8f59031471145e64", "ref_doc_id": "8c8ef739-bcd3-4cad-8494-1bf91c6601b3"}, "fbba4f4d-5e34-437b-816e-48d799bc9aff": {"doc_hash": "cee464449bb33d89bf3e170dec398d6f35ffa8a7ce4a9d1d39af87877b0aa4e5", "ref_doc_id": "8c8ef739-bcd3-4cad-8494-1bf91c6601b3"}, "7b22eb32-bb85-4c1e-bd47-be6231156338": {"doc_hash": "48b8e6c1b5ba288359447585e6c2e2735a82c54682ef92b65cfa2a58e0ab8d66", "ref_doc_id": "8c8ef739-bcd3-4cad-8494-1bf91c6601b3"}, "d6b2bf27-ffba-47ef-bb6a-92bdd11dd119": {"doc_hash": "78cadd608623d475b1ce63deb2df7604efa0fa2775159bddedb8fbc4d4a3859e", "ref_doc_id": "1814e81f-9d13-43fc-af31-f2ae27af422c"}, "f7c93f17-b67c-4c28-a438-d133788e8906": {"doc_hash": "371e26adf07c453d4c5714b8db3b0d055d86039b71965d56eefc065ee0e4b6fb", "ref_doc_id": "1814e81f-9d13-43fc-af31-f2ae27af422c"}, "9bf1cb93-31c4-461e-bc49-879f5e21c629": {"doc_hash": "17a66b552fd639db7be5bd4b0f236778e55f700490159236ba197221085bf46f", "ref_doc_id": "1814e81f-9d13-43fc-af31-f2ae27af422c"}, "1be76a00-ae46-40f1-95ca-26c9b35b8441": {"doc_hash": "8c4665869973bfc88925fb7e1005dbc5760cc39b0cac46edb6745b2d62df5f45", "ref_doc_id": "dba8ad71-1979-457f-8689-ff7dc9d2b345"}, "8922d98b-0a7e-46ab-967c-1ffe8f3995d0": {"doc_hash": "89b8fc9e43a4bf91a633531dd274f27b422bf23e0d9f2d21015f15c84e499462", "ref_doc_id": "dba8ad71-1979-457f-8689-ff7dc9d2b345"}, "6ecb0a0b-2906-494d-8469-fee96bf13076": {"doc_hash": "f8c70a10de1ffa82d6c5af5706271dd2f6dcbb68b5da8091d1c7fbd2a447218b", "ref_doc_id": "dba8ad71-1979-457f-8689-ff7dc9d2b345"}, "a2878874-d30a-41dd-aa87-ad004f52ed83": {"doc_hash": "87353fe92e02fbe22ff915c90b9b94810855437fafb81a59e2cfe96752626075", "ref_doc_id": "dba8ad71-1979-457f-8689-ff7dc9d2b345"}, "f1981d2f-f2d7-4591-8d6b-586d1b1bbaf2": {"doc_hash": "8a10fb19fb6a90bdd3691c131195c5fb8dda23a3a1c9b13524f7ea0f7572477e", "ref_doc_id": "e523414d-2c6a-44cd-a377-bd5f9e65889e"}, "68222e96-bda8-4e21-9910-bd3b830b8745": {"doc_hash": "30c5673845bd35a2e788645e31d4d675000b72549d7572f010ccd971e9a907fb", "ref_doc_id": "e523414d-2c6a-44cd-a377-bd5f9e65889e"}, "9385b1c4-79f8-4936-ab3b-cb3ae7caf3c5": {"doc_hash": "88e2330fd60530313d7c1e3ff210362537f4ec114bc3af9906bbed6fcf40a178", "ref_doc_id": "e523414d-2c6a-44cd-a377-bd5f9e65889e"}, "2a6a0a5f-f589-41ad-b2e3-1b3c93b6d575": {"doc_hash": "47edc8eb71d0925bd81b0d688787fd5dc7527d525e70a117e3cdbf26396224b5", "ref_doc_id": "e523414d-2c6a-44cd-a377-bd5f9e65889e"}, "5528fedf-bc4c-4529-811f-3afd2d41471f": {"doc_hash": "d23dd3016044fe95704b89795bc8210a0f23514f511ce43958e8730c4099dec2", "ref_doc_id": "e523414d-2c6a-44cd-a377-bd5f9e65889e"}, "a757ebb5-8102-48f1-89fd-66846b69056f": {"doc_hash": "4fb44ea8a1a15c08c88e3ecfbb2d9cb665976fb7e303a0005e873b2e304cd027", "ref_doc_id": "e523414d-2c6a-44cd-a377-bd5f9e65889e"}, "d8963dee-44dd-43c1-b880-45b3fe6ab17b": {"doc_hash": "ab625253e2551445364e4914514e8a2799f2254885d533e9386f572e165c31c3", "ref_doc_id": "e523414d-2c6a-44cd-a377-bd5f9e65889e"}, "90ac22ba-d236-4f08-b3b0-60962d28c851": {"doc_hash": "b61c8fe1f9535bb0f5db71187cd2d6120174ba37bf96b112d923c5bc3dc81649", "ref_doc_id": "e523414d-2c6a-44cd-a377-bd5f9e65889e"}, "4359040f-c29e-49c3-81b1-f08e07cc1aa5": {"doc_hash": "8f43738414c0d1490d5683b10825b9b435e6e9c607d055e296814c27805d0188", "ref_doc_id": "4a450406-d4ab-4c59-afa1-572c12cbf7f1"}, "3ba63a2b-041d-4a4d-8f57-af2f6a4b219d": {"doc_hash": "3679c7425ccb9e7dc53b230eb6ee0820f473f28e2844192d92b89cfc69aeed13", "ref_doc_id": "4a450406-d4ab-4c59-afa1-572c12cbf7f1"}, "4ced5a62-c424-4440-8e17-8564a7694f47": {"doc_hash": "975e873b1cfc83263c563bf9805767c1edb20229ab95dc10bd8fae4ec8897cbd", "ref_doc_id": "740f7246-5510-4f72-ae99-deb0de5eb6a6"}, "67b391ca-02ae-43ff-a98c-6a7d81941e0c": {"doc_hash": "e7039126247e09086ec51c383628828fb0093de935e18b02e5b192be6766a0f2", "ref_doc_id": "740f7246-5510-4f72-ae99-deb0de5eb6a6"}, "50bb5630-c338-48ea-81e4-5cc94796c746": {"doc_hash": "1c67eed837b48c53561fe63bb31f860c782f213a2d0ad1fbcea037c5c0bfb07b", "ref_doc_id": "740f7246-5510-4f72-ae99-deb0de5eb6a6"}, "3318a198-619e-4f08-b91d-f47ee5844cba": {"doc_hash": "bda9093b2c9ad4428202c0c646ae38c25edff6544cb792f63ed57ba4bf0ba016", "ref_doc_id": "b17969f6-1bfc-4628-8e34-bd6ced6bd890"}, "0911f539-e849-49e4-9780-d7b6c3ec83ce": {"doc_hash": "a404437129f361ab4c75cac35acf9b5ba7ee804854f4a4d61e64ddbb649cc203", "ref_doc_id": "b17969f6-1bfc-4628-8e34-bd6ced6bd890"}, "9d199733-f60b-4140-9442-1de0f366bb8c": {"doc_hash": "859520c65b5fe170a5a48a357cf767c2adc7021e3bb2bbe564eefd8752a2c66c", "ref_doc_id": "1cc46db8-e37a-4bcc-a9ee-9337a455ee14"}, "ac40df4b-c18f-49e4-ace5-1f332b823fcf": {"doc_hash": "b1593c97baa27e25882409af20891ef38413d132efd57d8398351ee8eb190d8e", "ref_doc_id": "717220ee-9300-46f8-bcae-054196fde762"}, "7235ebc2-f461-4593-b10c-393c7316e508": {"doc_hash": "050067102025de5810f758e1e941e15687a66e98ce0481209ff5f56d445475cf", "ref_doc_id": "717220ee-9300-46f8-bcae-054196fde762"}, "d255c569-0911-49db-96ab-d7e5b53cc081": {"doc_hash": "d467e76b09b015a78376e44e78cda61a7f0a8ae3760844f942ad961e9386c537", "ref_doc_id": "f4b11cca-1fab-4c2e-b69d-2eced8bee678"}, "c64d8489-c19e-4248-99e4-fb84fca7c209": {"doc_hash": "a3c72d431125292f0d01533a48ffeeaf3db6879c3f99c60279c38cbba9855bea", "ref_doc_id": "f4b11cca-1fab-4c2e-b69d-2eced8bee678"}, "b53adf00-3785-4c3a-806e-aec86d922328": {"doc_hash": "52953ba9fb626763db0fcd24651005315f8ca9e5f22455b8d578fe71b0fb8220", "ref_doc_id": "f4b11cca-1fab-4c2e-b69d-2eced8bee678"}, "e852e866-fd3d-4988-9662-4fa90892b82e": {"doc_hash": "48f283050bb4b0a3cd3fcf5d9a22e977ab565339b26012a39444b30b8f29da85", "ref_doc_id": "f4b11cca-1fab-4c2e-b69d-2eced8bee678"}, "c2c9c59f-887a-4930-af31-d015cf6cb575": {"doc_hash": "b09742892746073db8b4374a6c4bc88125e26871d8bd0d2eee4b78166f1c68bb", "ref_doc_id": "f4b11cca-1fab-4c2e-b69d-2eced8bee678"}, "06ea441b-a896-4736-94f4-3e250a8aeaa9": {"doc_hash": "d531e943bf5a47dfd9e60071500693044c38f36669feb992c81eb38a56788a19", "ref_doc_id": "f4b11cca-1fab-4c2e-b69d-2eced8bee678"}, "d8e196c8-bd1e-4ddd-940b-314e011094d3": {"doc_hash": "93ff17a602fa9e36a43e6fe950ca8c6c9f2150e77c2b9196ed686644921a159e", "ref_doc_id": "f4b11cca-1fab-4c2e-b69d-2eced8bee678"}, "ccf5fe2a-5363-49c3-a0b8-d343a7ad2590": {"doc_hash": "1ff902b42d67830cf0d2da7e64536d3b29d18f12c53efce72d3a6360d4be405b", "ref_doc_id": "89762987-2cc0-4698-9236-4da8f4837395"}, "4bf61569-c869-4660-8c66-46cf601a2bf4": {"doc_hash": "3a9945e55b0f3f0667a1c09c2cea0fcbabb64b5e812ec81670c056a30d7a02e1", "ref_doc_id": "89762987-2cc0-4698-9236-4da8f4837395"}, "bc8126b3-ce29-489b-b5ba-2a7197ba5b4e": {"doc_hash": "aac66e051b49285c57ac702ccdcd09e6b0a8a600bb35adffe5ca2b4ec2ad6002", "ref_doc_id": "89762987-2cc0-4698-9236-4da8f4837395"}, "4f04a498-9128-43a7-abcd-ff11209c959c": {"doc_hash": "06ff28315e7de91d55d88bd33b849fdd61fa6dff7495abee2065ec26f92da3cf", "ref_doc_id": "89762987-2cc0-4698-9236-4da8f4837395"}, "8172f5bf-f46a-4011-97d0-480744433c64": {"doc_hash": "ed04dd9f118ee8f10b94b55945bb106e2fae287109c9de3bba7dd169777a52be", "ref_doc_id": "89762987-2cc0-4698-9236-4da8f4837395"}, "7548c7e9-18bc-4c9b-b37a-5064cbbfe002": {"doc_hash": "224cc7d3ca6efbd19abc7656177250652e51762c6b34f7f66116c8aa973147fe", "ref_doc_id": "a93eea08-e93f-4f53-91f3-854e1e351f91"}, "18b4a453-dc7d-4100-9371-a7cb0022e15e": {"doc_hash": "ff9af65dc9f163173a7b9c6d1f70509bf073e97b2280f65b58df381fe95d2b35", "ref_doc_id": "a93eea08-e93f-4f53-91f3-854e1e351f91"}, "e1e1ba4f-f7a7-4526-9deb-23d878a613ba": {"doc_hash": "6654cb7f8c6ef4a0e14c65b11c4db73fb4888f6e7e905d3e70fc4ff2f6c183b0", "ref_doc_id": "a93eea08-e93f-4f53-91f3-854e1e351f91"}, "42b5b13b-3022-4d92-a7b2-c2338f638567": {"doc_hash": "fd1d20d7437db6eebbc631cc8cd9c58e6f7db6e0d85bca73fe1582ad2d1b877a", "ref_doc_id": "2124450a-bae9-44d8-8f95-286e98fd4c9a"}, "d6d81e84-2514-4b63-9256-49aa1d68cc78": {"doc_hash": "e5925f8f50c7202b4e58a4b9f5b50d8d6666e6525233342d3629fa1c0eb05ffc", "ref_doc_id": "2124450a-bae9-44d8-8f95-286e98fd4c9a"}, "a014e101-75bc-4aae-9898-8f7cb001c4db": {"doc_hash": "5e6b14c61ce2947abd1a6a1a3ad364a89e4f1f9fbf69871575f2b2f1c6104410", "ref_doc_id": "2124450a-bae9-44d8-8f95-286e98fd4c9a"}, "6b72caa8-8f6d-41c5-9235-2e74ad2cbe8b": {"doc_hash": "0cc1fd68acb19d95527903d589cce13675c9851c427b2f5eb2dcf74b80a6b9e6", "ref_doc_id": "2a78fbb5-bd04-4b9c-995a-4631842b06be"}, "b2fb9369-fb01-45b4-ae35-5f679bb855fb": {"doc_hash": "41a45cc9e3f88300f5fc3866c32c3f474aaf6a404c1a09efd0d04fc51350754c", "ref_doc_id": "2a78fbb5-bd04-4b9c-995a-4631842b06be"}, "34811cb1-4ea9-439e-b895-ac80eb51048e": {"doc_hash": "c9c0b3c0d078dae387a2acff1089dbf9d4f9af32b10321b982a57e7400f1f1ce", "ref_doc_id": "2a78fbb5-bd04-4b9c-995a-4631842b06be"}, "39476b22-6a00-4c08-9943-8720369367c4": {"doc_hash": "33dec57346adea4a84871099c7db8505e1657b641056e142a5162be19e61f02e", "ref_doc_id": "c7a2e0e1-7d0b-4fd6-8433-ca219cf26399"}, "fc883f8d-5328-4795-88b8-4799d9f7c2ed": {"doc_hash": "d6f0d0833046dfb406ff8da47ddfbb62e5fa1988307077656d4cbe9436efe849", "ref_doc_id": "c7a2e0e1-7d0b-4fd6-8433-ca219cf26399"}, "52b4cfaa-24f9-4176-bf97-023a5ec00204": {"doc_hash": "e4dca88ba43959db679e4f6f0bdb237b80c5e12114d5a0377a1f1e5e6ad67b4e", "ref_doc_id": "c7a2e0e1-7d0b-4fd6-8433-ca219cf26399"}, "9b5e2ee9-494a-4d97-917d-6d8c76ffe6c1": {"doc_hash": "dce7e5f4244bf46a0943e135cfd60fb450e67c2b86f418da84ad8eb6f57a560e", "ref_doc_id": "c7a2e0e1-7d0b-4fd6-8433-ca219cf26399"}, "fa879162-ce18-461a-b007-cdf8b40eeb04": {"doc_hash": "dd6953ff4a2f716862823dcb5a4d45a8df00b0e0ba576ac67b67860918482b78", "ref_doc_id": "3306a846-7489-4569-9981-e51cc70c1c67"}, "42d8104f-79d6-40fd-975d-90eb288ba01e": {"doc_hash": "aa8cbc9afe0c67935898789b002f668937787aa0060d33a3632a6ee9f35bfc26", "ref_doc_id": "3306a846-7489-4569-9981-e51cc70c1c67"}, "743195f7-220a-4fa5-83a3-9a5b09aa69ec": {"doc_hash": "0aebaa12700b54cd2321b7986ff11be5aa2b8050e1f86c94119cb1430aa259c6", "ref_doc_id": "3306a846-7489-4569-9981-e51cc70c1c67"}, "91c78055-c457-4dd0-b4f7-a6ecb88b5047": {"doc_hash": "2f16cb2d083f3da2ce799386aaba4730d43be08089e315dff5bea808e1a0fa8f", "ref_doc_id": "fd027ff0-c338-453a-8d1f-1d7abc054f0a"}, "46151b60-b8bf-4fa7-99ff-fb489d6bcb79": {"doc_hash": "0fcac047a180ae89b956b95c9e4a0587171fc37400131870ff73fbfdd6532ec8", "ref_doc_id": "fd027ff0-c338-453a-8d1f-1d7abc054f0a"}, "d7cf6818-ae82-42a9-86a3-efe42d70c8b6": {"doc_hash": "22df0d9b64945591503f89df1322cf41fd8d76a7e2ddceb3f35ae6bcdc89e881", "ref_doc_id": "fd027ff0-c338-453a-8d1f-1d7abc054f0a"}, "62515493-7ca0-4efe-bab8-ce000f6ca3e0": {"doc_hash": "e127cabd25790223e959ee5045fe221ca1844d877dad8d310eb0be69ff29fbcd", "ref_doc_id": "6ea1defb-ef98-4293-aae5-55e98fb8a821"}, "6076f9ef-ec88-48db-8b5d-a6fd5f84e4e5": {"doc_hash": "6ce0961a72976db4e6391121e8fbd2a2d036ceec70d6b5de1620480ce3287902", "ref_doc_id": "6ea1defb-ef98-4293-aae5-55e98fb8a821"}, "deb17177-b41f-4f9e-a7c5-2d7b3ef1d677": {"doc_hash": "fb79a76920fe2e870d4d495e210e77170a453c74f84539b29a762bae24c10223", "ref_doc_id": "6ea1defb-ef98-4293-aae5-55e98fb8a821"}, "1073e176-fb40-4243-b17f-ce6693713409": {"doc_hash": "12404564839e439ee1780a5ed25c1bc211f1af73c6d5ab5409d9372026794fed", "ref_doc_id": "57f96dae-6255-48a6-951c-114fb8502003"}, "3d93edf4-1735-40f5-b485-921fad429741": {"doc_hash": "a10876b5275af57f057fd40885164abf290104d9859d5dd8448ca3d12f55a6d8", "ref_doc_id": "57f96dae-6255-48a6-951c-114fb8502003"}, "a130913d-297f-4640-a6f0-ad4f19039482": {"doc_hash": "25053fd5d398b78d06740febed9ce38d46068e70a2080ca148d3be19f2d2ebdf", "ref_doc_id": "57f96dae-6255-48a6-951c-114fb8502003"}, "53183fae-307b-4460-8618-05d57de7e38e": {"doc_hash": "3fa800d29c3279aea6c1fc2d80069772910d97507ba29130334d413734f5b281", "ref_doc_id": "57f96dae-6255-48a6-951c-114fb8502003"}, "94a9a4c5-8883-48a6-838f-0d97cb868afa": {"doc_hash": "fe18c287b4c5d6f30b6f933d95179772d2defda801f35f3160d3a956f5155cab", "ref_doc_id": "57f96dae-6255-48a6-951c-114fb8502003"}, "a4174597-323d-4c5f-b92e-2dca78cda41f": {"doc_hash": "8ae2c12a10911f5566b479c939983e5803e27871426b43094da90b13e24038a3", "ref_doc_id": "57f96dae-6255-48a6-951c-114fb8502003"}, "83cd90d3-bc96-45ae-9aa6-689ce85850b7": {"doc_hash": "1fd676671b731fcf9f92fa73a9f1d2c885bfaae535ba381a76e2876f26bef201", "ref_doc_id": "371cfb89-a0eb-4d3f-9ec1-432e47970e44"}, "2b85ec23-f6b5-4d2c-8ee4-7b5a048c09ec": {"doc_hash": "36954b42d0e003070ac6a2834941a7ba7ea036156aac53b43165a39659e2d374", "ref_doc_id": "5deb23ed-42a3-4596-b3db-53e2507ba468"}, "45402de1-5965-4a5d-98af-4bb16241d530": {"doc_hash": "08dd36c57eea3bf2452ae50da7cd498219f5d5b53250a865a6c2a24bfecbf8d5", "ref_doc_id": "5deb23ed-42a3-4596-b3db-53e2507ba468"}, "c849718b-5a9f-4308-ab05-a48f885add41": {"doc_hash": "46453e51f3791d07d8b64a3006c4ca382fcf69b0629f0ac8c9422ce1db3c8144", "ref_doc_id": "5deb23ed-42a3-4596-b3db-53e2507ba468"}, "0c22dd55-2dc8-488d-b96e-4c6c74452fc5": {"doc_hash": "2c965893c53ff3c2b585cdd25f73dd59b8a92a44ac13f3c6dc2d8d1169331d68", "ref_doc_id": "515cd4d2-1a82-4adf-adec-6fbde7b97c91"}, "cec3b98a-ae4a-4b31-85db-53be43c8f6c2": {"doc_hash": "71568f36382dd036d63e412c1f65e05d4ae982124f7c7c86437bf954017799f8", "ref_doc_id": "515cd4d2-1a82-4adf-adec-6fbde7b97c91"}, "4f22c82d-7f24-4c51-8161-b7c824fb8ddf": {"doc_hash": "a307fc2ae97a6cff17dcc1498d329d0f953f6d8fccc980c445613c8ac7001dab", "ref_doc_id": "515cd4d2-1a82-4adf-adec-6fbde7b97c91"}, "f194cb50-835a-416e-a27e-e5ff4b70f450": {"doc_hash": "6efb6433b6593c27297c24c050eee07d0ba2207026dc8334abb84b0863dbec07", "ref_doc_id": "0e95ed92-630a-4a37-a537-96f0770aa1c8"}, "502b146c-6a8e-443b-bfc2-317f61305678": {"doc_hash": "e00a7ece1e4e12a279aeb9bce10c01ff3a105c99229329481de73395b6f93baf", "ref_doc_id": "0e95ed92-630a-4a37-a537-96f0770aa1c8"}, "b306cbed-521f-47bf-961a-1a4a174db777": {"doc_hash": "491980a98ebfeec318bf67404fe4899e058aa59860ca94b59d7e4a38c6c393de", "ref_doc_id": "0e95ed92-630a-4a37-a537-96f0770aa1c8"}, "a20fed4a-abb3-4881-bc16-0f6614b1441e": {"doc_hash": "abea9d298400c1d529f5825c0e0ddee07c368d435c7668a82bd1340c28bf38b3", "ref_doc_id": "48570ac2-28e7-46d6-bb94-621c1404ba9e"}, "e5693ca5-ea84-43df-af5e-3bd349770c92": {"doc_hash": "eba452eec7e83856c4e9d1f2cd89aac107c1b4c453778cbf9e3a6902fff8ff29", "ref_doc_id": "48570ac2-28e7-46d6-bb94-621c1404ba9e"}, "be7ad5d9-778a-4796-9a0e-11749847b9bb": {"doc_hash": "6a60011cf94cff7e1c611b75d8d0dfc6333c7b86503204727aeef6353fc8396b", "ref_doc_id": "48570ac2-28e7-46d6-bb94-621c1404ba9e"}, "053d4dbb-1ed6-4aee-b9c4-c196c23a61d0": {"doc_hash": "ac16c41430d93a99259e1cbd91c8ca9f0d378917de0b312ab3d2d85ba92bcd97", "ref_doc_id": "7fbd543c-eb29-42c8-b20f-e47b04f24818"}, "9163d41e-7fc2-4333-b994-63f0a5c9a6b7": {"doc_hash": "35c94dedd7b50857322e878b006785688c4b9acc828d31e0bdfc0fb852406973", "ref_doc_id": "7fbd543c-eb29-42c8-b20f-e47b04f24818"}, "1c8589cd-90cb-4399-8fc3-d50226aa9298": {"doc_hash": "e1c27d306a0cc28a7fb639de9a5b686a233bbf8397363744515d1e7ebfb1df55", "ref_doc_id": "7fbd543c-eb29-42c8-b20f-e47b04f24818"}, "ac56c108-ed41-4604-938e-02031465039a": {"doc_hash": "99b316b5c01ba41d8abdb0297b469ad094b5f30bdf8a2984cf9c4d39837b06d2", "ref_doc_id": "b98f6cd6-73e2-4a92-9eef-7628dc6db29f"}, "fdfeadfe-36a3-4866-9e3a-3e637eb9581e": {"doc_hash": "f976ba452889768cce5ba0013f0375cf7c8f416baceb987ae96e03737f32fe01", "ref_doc_id": "b98f6cd6-73e2-4a92-9eef-7628dc6db29f"}, "fd51950b-2579-4ce7-a6fa-3617f8943582": {"doc_hash": "a282b29f7b3c6fc2c99319f167995376fab3c2a9530f49202882d114a0365b1a", "ref_doc_id": "b98f6cd6-73e2-4a92-9eef-7628dc6db29f"}, "36f43a16-b07f-428d-be77-6dc49edd54a6": {"doc_hash": "21e599b73817f8d51fa28ee4cb7ab9e6e128dc6a0e41e646f4f8b1988914efd7", "ref_doc_id": "efc59103-b568-4d8b-b9ac-e1c672c99c50"}, "acf6f18e-ad5c-468e-9c45-a2e854ea95e0": {"doc_hash": "865023d313f7ed59454ba2d60a4ce532e720aa6df1f8a970438a368cb6440db6", "ref_doc_id": "efc59103-b568-4d8b-b9ac-e1c672c99c50"}, "dd7df896-0190-41e5-b23a-dc6dd0bd590d": {"doc_hash": "037decb18ddb90a0f930fdfcca384382fa0725b89d1301a550e15bdd06992b2f", "ref_doc_id": "efc59103-b568-4d8b-b9ac-e1c672c99c50"}, "fe8a601d-3d51-45a3-be13-f02758ff5414": {"doc_hash": "fbdfb3bc3d9c49a2883264ce9817c57bb7850a0a80035d9df54eddb316330be5", "ref_doc_id": "efc59103-b568-4d8b-b9ac-e1c672c99c50"}, "5dd871bf-cecb-406c-b88e-5709a6adb814": {"doc_hash": "23afb2ed61ff800bd99e2f57263adecd14c744ee970c7ce3a3ea84195b4f7394", "ref_doc_id": "efc59103-b568-4d8b-b9ac-e1c672c99c50"}, "2579320b-f5fa-4df8-897b-4eaf4c248f17": {"doc_hash": "ab32301c48368a2105015d436e64d7a671e0e045ef51d47bd5283386701b7bf3", "ref_doc_id": "a7389587-1026-44fc-9df5-07766d354257"}, "a7a21c2d-ed15-4b0a-9598-c1146743daa5": {"doc_hash": "a43d6941ca6961b1e36a738addf3b5a87c1ff1b0f76ff0a1568cc419e0451235", "ref_doc_id": "a7389587-1026-44fc-9df5-07766d354257"}, "0f2ffd0d-92cb-47f1-86c7-77ee4fb840fc": {"doc_hash": "6261f295365512a559e974d411b6d8b9a05a6e666eca05cf08f238ed38b77a0b", "ref_doc_id": "a7389587-1026-44fc-9df5-07766d354257"}, "af3e00bd-51cb-452c-b456-9c9b1c418ded": {"doc_hash": "1a21be289ac67ca7675c4db0262afd50057a48ecd53f019f9e92357a864e1d4c", "ref_doc_id": "a7389587-1026-44fc-9df5-07766d354257"}, "2ff4e7af-8e0f-43cc-ae14-0fe199c2a8c0": {"doc_hash": "9d73db2197ab32140f682163bb4d77e6e67af4d85efbf5c95351b7c6bb8a1cb2", "ref_doc_id": "a7389587-1026-44fc-9df5-07766d354257"}, "eb65d5c7-7a08-4636-9ad1-a589c140eba2": {"doc_hash": "1bfdaf914dbdff819db4dedcf729a7f28c4b6fe4e0161e4cf4cc954af3cbcf56", "ref_doc_id": "a7389587-1026-44fc-9df5-07766d354257"}, "74afd105-66b1-4480-928e-6463efb8f7ce": {"doc_hash": "c743a2f80aa660db6bba691a17be71d5936c01a73b2971349b2b8edc63cdcdf8", "ref_doc_id": "a7389587-1026-44fc-9df5-07766d354257"}, "5d2ceeb5-c6d7-4864-91a1-106f421bcdf5": {"doc_hash": "f1d4acf598d4282ec22637d67df90aa7112bbe800c2568e94d5bd78b3b185275", "ref_doc_id": "a7389587-1026-44fc-9df5-07766d354257"}, "8a738ca9-b6d5-47f6-b9af-5b2bec90990b": {"doc_hash": "197e4a216dd4c0d4bcd3254750e5a3d6823f88f9ab29a8cc564b016dba8fea00", "ref_doc_id": "a7389587-1026-44fc-9df5-07766d354257"}, "d9777523-70a6-4d40-a26d-75900de6cf15": {"doc_hash": "d37af0a1228f7885c32ae68882de3926dcfa261642482ff74a686ebd452b387d", "ref_doc_id": "a6df1775-f7b3-4155-9727-85ef5a94fe6e"}, "fdd290a3-858c-460f-bc80-37181a1e0641": {"doc_hash": "6782bc6bc3e536fdd1494b5f8e34ae6a752e63e4590166cc5333846e53578501", "ref_doc_id": "a6df1775-f7b3-4155-9727-85ef5a94fe6e"}, "32de2981-3bfd-416b-bf65-cda9858bac22": {"doc_hash": "87248260de2972fca58dd9bc3d9950ca48c28723da855de9667c38148a01255d", "ref_doc_id": "a6df1775-f7b3-4155-9727-85ef5a94fe6e"}, "5ef47187-7c0a-4d19-a5db-d902f4b9117d": {"doc_hash": "8b4549306257c93943a584ba0e5bdb1b9cbb4dbc61ed7ce094e28c9dc078f4f9", "ref_doc_id": "a6df1775-f7b3-4155-9727-85ef5a94fe6e"}, "752056c3-b097-45de-888d-b643f5a1334d": {"doc_hash": "953fd716d6e111b3bb74440d33ddd86390c24332ac4dd89bb05c79f37c446763", "ref_doc_id": "a6df1775-f7b3-4155-9727-85ef5a94fe6e"}, "522dca29-d9a4-42f0-8b09-52ed9c2805e6": {"doc_hash": "9681edefbcc2b28cc9fd67cb7d601c808dca6ee8c7a372bf1c35ff2b53fbf34b", "ref_doc_id": "a6df1775-f7b3-4155-9727-85ef5a94fe6e"}, "97d68ab7-cf8d-43ac-bb13-933a04db0c4e": {"doc_hash": "c1adf5387ac0a3c44ec109cecee84987edff325f46b2e8c58aa0456571764f99", "ref_doc_id": "a6df1775-f7b3-4155-9727-85ef5a94fe6e"}, "0a3493e0-3b1e-4000-9a2f-8db92edb4bdd": {"doc_hash": "cf86160d47a8f7a33cd7b77241c4c50e87bbaee951f619a83095ec903b08afbb", "ref_doc_id": "a6df1775-f7b3-4155-9727-85ef5a94fe6e"}, "5ee9453f-8e37-4ce7-9fe6-bf30c947adce": {"doc_hash": "5a0692dbd502d08c560b987f3c19f8023ad186c23db12e37e7ee14dc8b5106c0", "ref_doc_id": "a6df1775-f7b3-4155-9727-85ef5a94fe6e"}, "a5be2e51-5414-43ff-aea8-f02386808984": {"doc_hash": "6000c4ef0eb225a0a81431090cf8d0f9bd4a60f440138a976ff636a6b58cf8f3", "ref_doc_id": "8da64739-fb32-4a71-81fb-87b44f924646"}, "1a245358-58d5-498d-925f-01a7e0468c6f": {"doc_hash": "ee4c2f8c68f4abdcb0734b7404f3e69234ae08cc10d7817c0bca320731325498", "ref_doc_id": "8da64739-fb32-4a71-81fb-87b44f924646"}, "ecb9771d-b392-4709-906e-225a19362cd4": {"doc_hash": "b5696aa61ba9439fe663ddb5324e022f7dc74330fc00c5d941ec7dd63a4f9bf3", "ref_doc_id": "8da64739-fb32-4a71-81fb-87b44f924646"}, "f2110263-d784-4771-b5eb-ca17a5b9f293": {"doc_hash": "73784007055659fcce52f963059d7e6e081aa158ccfa71e401490b882c46cfa1", "ref_doc_id": "8da64739-fb32-4a71-81fb-87b44f924646"}, "1b6d1535-66aa-421c-a5e7-ead42942e325": {"doc_hash": "ea0822c0063b0c638e6596f957485aee1fbf64f67a4a27cb479cb885567f0346", "ref_doc_id": "8da64739-fb32-4a71-81fb-87b44f924646"}, "ab5934a2-0282-43d6-a328-5c649126a33f": {"doc_hash": "b0e6ab1b60eca890398570dc8bc630477be15524a8265267c834ab5c7b48193b", "ref_doc_id": "8da64739-fb32-4a71-81fb-87b44f924646"}, "a83723a3-f166-45b1-b75d-8f5e54e3035d": {"doc_hash": "ce21c478d06a7b4561ad58cf555bc8d7b2d3e92600057f843757bffeb00c69b7", "ref_doc_id": "8da64739-fb32-4a71-81fb-87b44f924646"}, "8b4bb903-07ce-40f4-ad84-699788e9fef8": {"doc_hash": "2ccacdc0d9a1afd940435882aef4b157a030f6fe8c6d950c50368f6b1158c622", "ref_doc_id": "8da64739-fb32-4a71-81fb-87b44f924646"}, "c99e758b-113d-433e-ab46-81c57950def2": {"doc_hash": "6183b6c335a6b26137fd158f472aa56cab4d239f6cb2c9ca70bdf703f3598118", "ref_doc_id": "8da64739-fb32-4a71-81fb-87b44f924646"}, "cfd89418-7755-4778-bccd-5123990d3974": {"doc_hash": "4afcb7f533286334f76c08e7ad7f7eb18c3b8eb41716b8b9db80acc127df4bdc", "ref_doc_id": "1ee48f39-469b-4622-aaf2-4e24b9b0fbf7"}, "60820d92-e3b4-4e9c-acd9-edfadc0e25b8": {"doc_hash": "ad55842557845f7ba980d8282de2758c3cdf5e5bcba5e906ba3d9956c95dfed5", "ref_doc_id": "1ee48f39-469b-4622-aaf2-4e24b9b0fbf7"}, "dbd3796d-e736-4b3d-a83c-c4168922bd7e": {"doc_hash": "493110b2685005bc30b0a39f007bb9909cc666e82e8f4dfbf75018ac5835fbec", "ref_doc_id": "46298fdd-9e96-4be0-84db-adc501e9dd94"}, "9ca3c541-f414-4c7d-b0d7-7db0c20601bb": {"doc_hash": "20206b7432d9e84d7126880dc794b2cd792d6cb90025b799804be769ace6e213", "ref_doc_id": "46298fdd-9e96-4be0-84db-adc501e9dd94"}, "c80d02cd-3678-464d-8a36-57de8b1ab234": {"doc_hash": "aeb489e74ef4a150e3ad265e645762041f194ec55a73a07ccd45278a1ef3346b", "ref_doc_id": "46298fdd-9e96-4be0-84db-adc501e9dd94"}, "fb44efbf-0cda-4c65-bb8b-411648350433": {"doc_hash": "4ce3612736cb32f48b25297398b035eb64638e09dfabc5fab093f56724267e3e", "ref_doc_id": "1c6a9ef1-a6b6-473a-8951-9ae03b1c4b32"}, "b2f7f865-0cb4-47d9-a810-5b73ac69fc53": {"doc_hash": "b991ab41addd32b4ea39fd71fc40124b5ac8e8f11b12580ea79c4ca83e19d16f", "ref_doc_id": "1c6a9ef1-a6b6-473a-8951-9ae03b1c4b32"}, "fc26c0ad-6ef9-4b20-8718-a3d4160d9985": {"doc_hash": "29da4d098516c81d04115578909aaa1a7aaa70dfb262cbba796c2d71505ebc97", "ref_doc_id": "1c6a9ef1-a6b6-473a-8951-9ae03b1c4b32"}, "780bba18-859c-42b9-ba4b-7a3322976468": {"doc_hash": "4cdf0789254f3029abc835b227d7e04340f85a55165f2dea859af469446bba31", "ref_doc_id": "63154e71-a06f-4ea6-9ce1-69f9b846286b"}, "591991e9-b6b6-4fbf-a9bf-b205cccc233e": {"doc_hash": "c3fbca226464cb154900553c40b02b0c11ad2a36203d8e8a370dfc60ace681ad", "ref_doc_id": "63154e71-a06f-4ea6-9ce1-69f9b846286b"}, "5e4ad184-c9b8-4310-97c8-b894f6edfc27": {"doc_hash": "4d7a64f412cf8766ee307cea113ba73c5faa25a24b22687a0f909ae1cf39d51f", "ref_doc_id": "63154e71-a06f-4ea6-9ce1-69f9b846286b"}, "dc25e83e-6a6b-4746-8797-5e62327f3df7": {"doc_hash": "3975fe95e8fbd3ebb7167a6a1a3498ebf9529a4d1e526709afe20a12289e56ef", "ref_doc_id": "9239f300-edb3-4abf-9e6e-0cf5c3c18997"}, "9d4e8267-2e76-4731-8c79-fe904fb7b063": {"doc_hash": "c4f867c0aabd9639f3f6a5185b80a43bb1f36c4c8174f31897ec939852441045", "ref_doc_id": "9239f300-edb3-4abf-9e6e-0cf5c3c18997"}, "8b73de1a-1dc8-4bf3-ad73-761ac5e7e07f": {"doc_hash": "525d449af4f91de9e5dfb0b1a2f2a503f0b38896ace06d2b1685178948cd9414", "ref_doc_id": "9239f300-edb3-4abf-9e6e-0cf5c3c18997"}, "48413bed-a843-4cb3-8f02-dabfeabdb347": {"doc_hash": "f73363f900a2879e1114c365718ef81dd7d572120dc7d663476be198c03342d8", "ref_doc_id": "0e1d7974-7c21-4c29-8b07-a74a0345358c"}, "6c5e7b95-5665-4f6c-8041-c0f7892ec3b6": {"doc_hash": "aa200dd51e2c2d47e926fa16db6a333c213e418183f99530474f8867eba4e0ea", "ref_doc_id": "0e1d7974-7c21-4c29-8b07-a74a0345358c"}, "51e65ec8-d0c1-4e31-a1c9-64d0ba8875b2": {"doc_hash": "5588d2903b1a151813fab30b0b43f9a0a02f972c903fc80bc902e32e299039a5", "ref_doc_id": "0e1d7974-7c21-4c29-8b07-a74a0345358c"}, "3887897c-efd0-47c6-9ce2-f9f8d178f4a6": {"doc_hash": "493d6346fbc1edb3a1bb4bbefe9246949fbe508e59dd03b46c2209d96e0e218b", "ref_doc_id": "0e1d7974-7c21-4c29-8b07-a74a0345358c"}, "37478217-bb1d-499f-ab2c-191816c8fabc": {"doc_hash": "dea121136e957ff2e01b8b877ec5731be7ee4e1605626f248668df92a464709c", "ref_doc_id": "0e1d7974-7c21-4c29-8b07-a74a0345358c"}, "b3b2ef9f-a809-43a5-b42a-c0c8e781299d": {"doc_hash": "99d91838ea9cd9b61bf6dade72cc0e77d10d573d140b16c7a2a54b11f265f0b3", "ref_doc_id": "0e1d7974-7c21-4c29-8b07-a74a0345358c"}, "790b42c6-3cae-4fcc-8527-1b9ef1f24eaa": {"doc_hash": "45747a4062ed0a8505c700f28f94fe40d3104ea71bd5c3682c5efbfd0c4ec08e", "ref_doc_id": "0e1d7974-7c21-4c29-8b07-a74a0345358c"}, "0240fc74-927d-4676-a842-f8e79d9ed2f7": {"doc_hash": "d97db281479d84386ebce3c0f2dea07eac616912a8f654a32600383bd17aff68", "ref_doc_id": "3713c18b-4c38-40fc-96fb-0fbff8b093f3"}, "995a6992-63c9-46e7-8870-37e2a964a4ba": {"doc_hash": "1a26de132c4ba2caf6acee703cce93e1530794713092059f4d139f117063bf5a", "ref_doc_id": "3713c18b-4c38-40fc-96fb-0fbff8b093f3"}, "c8df9663-c777-40c2-9521-c492afc11b9f": {"doc_hash": "5e4169806ac066a6c35f4fa5f05bbd3760accfb7dbe96629551879f779cc9d70", "ref_doc_id": "8e431196-224e-418a-b1ab-ed0e7e3916aa"}, "888c4bc3-0f17-4040-921c-88982914a1d2": {"doc_hash": "f3f61f17f24899fcdc90c9b95a0a42fa10ac5a54f35670a85037990c56cdb3f0", "ref_doc_id": "8e431196-224e-418a-b1ab-ed0e7e3916aa"}, "137fe230-c369-4b2a-a5e5-93070234bdfb": {"doc_hash": "ecbcaf2c4edd041daf4c929c56080c591627c92cdff117ee15ef1b9f8d1f9f49", "ref_doc_id": "4dad9663-23e3-496c-b8ab-ff8deeefbbf9"}, "bb81c72e-7403-4826-8a45-658e64287486": {"doc_hash": "385789d9cea67005f296b40973b2c0a3e43decb9071e1c1117d1693ade110518", "ref_doc_id": "4dad9663-23e3-496c-b8ab-ff8deeefbbf9"}, "da35902b-1975-454c-8f51-da132568dbec": {"doc_hash": "dd90ef9bce97dea0b045971da9e00f40af25c18629d235b3dd66f39f1adbef20", "ref_doc_id": "629aa3c5-1e55-4950-9703-f8bd516f6ffd"}, "c56d464f-7ec4-4abb-9f03-35959714759d": {"doc_hash": "bd38d2f31a8f2f264098189a2fb39dfc794e9db9d9db744d5f4eb1bf69ee73b8", "ref_doc_id": "629aa3c5-1e55-4950-9703-f8bd516f6ffd"}, "778aedee-6170-4430-99e3-fdc32f2410b8": {"doc_hash": "8e037d93d667de28f5a35901b085fbd3fa0aa69db9d0ff57d81058c47162d3ad", "ref_doc_id": "7cc1fa22-065f-43ca-a779-108038d1822e"}, "1bafc626-33e0-47c7-8a96-b3e56a54de17": {"doc_hash": "fa224e7f61077cefc7bbe7472a4632cf1e80fff59f1f3aec466bf2cf0fa70da8", "ref_doc_id": "7cc1fa22-065f-43ca-a779-108038d1822e"}, "d7f573be-2b5f-4dcb-8d15-8946baf03541": {"doc_hash": "108a8bbb9fdf7dee550181a1c92a138c4eb8e02d74754df140cedbe7eb8dc2b8", "ref_doc_id": "7cc1fa22-065f-43ca-a779-108038d1822e"}, "72294b18-e6a3-468a-bdb6-c3b7a64ced82": {"doc_hash": "8b465e93fe3a0f130e9059f1105706d9ed42da573e99e7c529540fc17dfe6702", "ref_doc_id": "430b7061-8878-4660-b749-19c257a0753d"}, "c2f57f89-f6e0-4ab3-a9c3-33d7c3a52ecc": {"doc_hash": "0d2cfb14250aa664ba9f8544f3da74f48cd0b939e4f4541bf035c5cea2d354a9", "ref_doc_id": "430b7061-8878-4660-b749-19c257a0753d"}, "5934b079-e8f4-431b-9cd8-82cf0f813b94": {"doc_hash": "d5a1e75b2c65874ac8e7fb46342daffd9b739713d5fa7b9c6e0c127b19dc8c92", "ref_doc_id": "430b7061-8878-4660-b749-19c257a0753d"}, "2890b580-5a09-4b00-91e5-edb9bfc7a14d": {"doc_hash": "44526464f39ba13076df344dd5de6d8d0d5e698e0a14ae3aac36070aff4957d5", "ref_doc_id": "2a5f7834-517f-462a-9487-930654d0129e"}, "59c0e136-9a7d-4c10-98d0-6222b8ea0aa4": {"doc_hash": "d55c8371cc8a59bb7fb603a890f7e1b444b08347311464d2942ff62f375ddfe2", "ref_doc_id": "2a5f7834-517f-462a-9487-930654d0129e"}, "7f29db1c-91e5-48eb-92f1-97dbfd2a51bb": {"doc_hash": "2963ed3a3023a25254c05a7d331ca56a668ba28f4355d650e7917e31d18a28a2", "ref_doc_id": "2a5f7834-517f-462a-9487-930654d0129e"}, "afad220d-babf-449e-8c09-7865c4d9be29": {"doc_hash": "cb983310190874fe0119f191c050a523803177b414acb1a02e6f153e37c2ffe7", "ref_doc_id": "2a5f7834-517f-462a-9487-930654d0129e"}, "77bf5dac-ce17-4b66-9668-63a77eb2a187": {"doc_hash": "b68e4cc01cacacb9cf648b17f25d10b7aef937677a7d63f69f7fe03ea331143c", "ref_doc_id": "2a5f7834-517f-462a-9487-930654d0129e"}, "cf23a833-2854-4df1-8202-a9b02f2ebcc6": {"doc_hash": "29275ccb1d2fe194f686a6e4f630e360ee18f3e1b819e63408460f1008b274a9", "ref_doc_id": "2a5f7834-517f-462a-9487-930654d0129e"}, "35697870-bd99-4ee1-b7a2-a78cefd58806": {"doc_hash": "55bc362a47b4a9b6b08d4cfd0733462769bdac08df99fb5bcf2b6c5d32f77286", "ref_doc_id": "2a5f7834-517f-462a-9487-930654d0129e"}, "f52a26a5-0c94-4f1c-8ded-a952878ad14b": {"doc_hash": "5874f8e8bc1fb3a891a314ca6f072e50c62202a4d154c7462ea53febddb41647", "ref_doc_id": "2a5f7834-517f-462a-9487-930654d0129e"}, "e826d8e8-32a8-4125-8945-e7d3e3cd4d1e": {"doc_hash": "1401dcf217eaf01cc16c093ab669ce92ccdb6861ac8f2e9e68c0b42ff3793109", "ref_doc_id": "bea453b6-19cc-4716-9aa0-7972c7a5f75a"}}, "docstore/ref_doc_info": {"8c8ef739-bcd3-4cad-8494-1bf91c6601b3": {"node_ids": ["168b0ab2-9774-4bfa-9860-a3c9fd70da7f", "fbba4f4d-5e34-437b-816e-48d799bc9aff", "7b22eb32-bb85-4c1e-bd47-be6231156338"], "metadata": {"page_label": "1", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "1814e81f-9d13-43fc-af31-f2ae27af422c": {"node_ids": ["d6b2bf27-ffba-47ef-bb6a-92bdd11dd119", "f7c93f17-b67c-4c28-a438-d133788e8906", "9bf1cb93-31c4-461e-bc49-879f5e21c629"], "metadata": {"page_label": "2", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "dba8ad71-1979-457f-8689-ff7dc9d2b345": {"node_ids": ["1be76a00-ae46-40f1-95ca-26c9b35b8441", "8922d98b-0a7e-46ab-967c-1ffe8f3995d0", "6ecb0a0b-2906-494d-8469-fee96bf13076", "a2878874-d30a-41dd-aa87-ad004f52ed83"], "metadata": {"page_label": "3", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "e523414d-2c6a-44cd-a377-bd5f9e65889e": {"node_ids": ["f1981d2f-f2d7-4591-8d6b-586d1b1bbaf2", "68222e96-bda8-4e21-9910-bd3b830b8745", "9385b1c4-79f8-4936-ab3b-cb3ae7caf3c5", "2a6a0a5f-f589-41ad-b2e3-1b3c93b6d575", "5528fedf-bc4c-4529-811f-3afd2d41471f", "a757ebb5-8102-48f1-89fd-66846b69056f", "d8963dee-44dd-43c1-b880-45b3fe6ab17b", "90ac22ba-d236-4f08-b3b0-60962d28c851"], "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "4a450406-d4ab-4c59-afa1-572c12cbf7f1": {"node_ids": ["4359040f-c29e-49c3-81b1-f08e07cc1aa5", "3ba63a2b-041d-4a4d-8f57-af2f6a4b219d"], "metadata": {"page_label": "5", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "740f7246-5510-4f72-ae99-deb0de5eb6a6": {"node_ids": ["4ced5a62-c424-4440-8e17-8564a7694f47", "67b391ca-02ae-43ff-a98c-6a7d81941e0c", "50bb5630-c338-48ea-81e4-5cc94796c746"], "metadata": {"page_label": "1", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "b17969f6-1bfc-4628-8e34-bd6ced6bd890": {"node_ids": ["3318a198-619e-4f08-b91d-f47ee5844cba", "0911f539-e849-49e4-9780-d7b6c3ec83ce"], "metadata": {"page_label": "2", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "1cc46db8-e37a-4bcc-a9ee-9337a455ee14": {"node_ids": ["9d199733-f60b-4140-9442-1de0f366bb8c"], "metadata": {"page_label": "3", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "717220ee-9300-46f8-bcae-054196fde762": {"node_ids": ["ac40df4b-c18f-49e4-ace5-1f332b823fcf", "7235ebc2-f461-4593-b10c-393c7316e508"], "metadata": {"page_label": "4", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "f4b11cca-1fab-4c2e-b69d-2eced8bee678": {"node_ids": ["d255c569-0911-49db-96ab-d7e5b53cc081", "c64d8489-c19e-4248-99e4-fb84fca7c209", "b53adf00-3785-4c3a-806e-aec86d922328", "e852e866-fd3d-4988-9662-4fa90892b82e", "c2c9c59f-887a-4930-af31-d015cf6cb575", "06ea441b-a896-4736-94f4-3e250a8aeaa9", "d8e196c8-bd1e-4ddd-940b-314e011094d3"], "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "89762987-2cc0-4698-9236-4da8f4837395": {"node_ids": ["ccf5fe2a-5363-49c3-a0b8-d343a7ad2590", "4bf61569-c869-4660-8c66-46cf601a2bf4", "bc8126b3-ce29-489b-b5ba-2a7197ba5b4e", "4f04a498-9128-43a7-abcd-ff11209c959c", "8172f5bf-f46a-4011-97d0-480744433c64"], "metadata": {"page_label": "6", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "a93eea08-e93f-4f53-91f3-854e1e351f91": {"node_ids": ["7548c7e9-18bc-4c9b-b37a-5064cbbfe002", "18b4a453-dc7d-4100-9371-a7cb0022e15e", "e1e1ba4f-f7a7-4526-9deb-23d878a613ba"], "metadata": {"page_label": "1", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "2124450a-bae9-44d8-8f95-286e98fd4c9a": {"node_ids": ["42b5b13b-3022-4d92-a7b2-c2338f638567", "d6d81e84-2514-4b63-9256-49aa1d68cc78", "a014e101-75bc-4aae-9898-8f7cb001c4db"], "metadata": {"page_label": "2", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "2a78fbb5-bd04-4b9c-995a-4631842b06be": {"node_ids": ["6b72caa8-8f6d-41c5-9235-2e74ad2cbe8b", "b2fb9369-fb01-45b4-ae35-5f679bb855fb", "34811cb1-4ea9-439e-b895-ac80eb51048e"], "metadata": {"page_label": "3", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "c7a2e0e1-7d0b-4fd6-8433-ca219cf26399": {"node_ids": ["39476b22-6a00-4c08-9943-8720369367c4", "fc883f8d-5328-4795-88b8-4799d9f7c2ed", "52b4cfaa-24f9-4176-bf97-023a5ec00204", "9b5e2ee9-494a-4d97-917d-6d8c76ffe6c1"], "metadata": {"page_label": "4", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "3306a846-7489-4569-9981-e51cc70c1c67": {"node_ids": ["fa879162-ce18-461a-b007-cdf8b40eeb04", "42d8104f-79d6-40fd-975d-90eb288ba01e", "743195f7-220a-4fa5-83a3-9a5b09aa69ec"], "metadata": {"page_label": "1", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "fd027ff0-c338-453a-8d1f-1d7abc054f0a": {"node_ids": ["91c78055-c457-4dd0-b4f7-a6ecb88b5047", "46151b60-b8bf-4fa7-99ff-fb489d6bcb79", "d7cf6818-ae82-42a9-86a3-efe42d70c8b6"], "metadata": {"page_label": "2", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "6ea1defb-ef98-4293-aae5-55e98fb8a821": {"node_ids": ["62515493-7ca0-4efe-bab8-ce000f6ca3e0", "6076f9ef-ec88-48db-8b5d-a6fd5f84e4e5", "deb17177-b41f-4f9e-a7c5-2d7b3ef1d677"], "metadata": {"page_label": "3", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "57f96dae-6255-48a6-951c-114fb8502003": {"node_ids": ["1073e176-fb40-4243-b17f-ce6693713409", "3d93edf4-1735-40f5-b485-921fad429741", "a130913d-297f-4640-a6f0-ad4f19039482", "53183fae-307b-4460-8618-05d57de7e38e", "94a9a4c5-8883-48a6-838f-0d97cb868afa", "a4174597-323d-4c5f-b92e-2dca78cda41f"], "metadata": {"page_label": "4", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "371cfb89-a0eb-4d3f-9ec1-432e47970e44": {"node_ids": ["83cd90d3-bc96-45ae-9aa6-689ce85850b7"], "metadata": {"page_label": "5", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "5deb23ed-42a3-4596-b3db-53e2507ba468": {"node_ids": ["2b85ec23-f6b5-4d2c-8ee4-7b5a048c09ec", "45402de1-5965-4a5d-98af-4bb16241d530", "c849718b-5a9f-4308-ab05-a48f885add41"], "metadata": {"page_label": "1", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "515cd4d2-1a82-4adf-adec-6fbde7b97c91": {"node_ids": ["0c22dd55-2dc8-488d-b96e-4c6c74452fc5", "cec3b98a-ae4a-4b31-85db-53be43c8f6c2", "4f22c82d-7f24-4c51-8161-b7c824fb8ddf"], "metadata": {"page_label": "2", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "0e95ed92-630a-4a37-a537-96f0770aa1c8": {"node_ids": ["f194cb50-835a-416e-a27e-e5ff4b70f450", "502b146c-6a8e-443b-bfc2-317f61305678", "b306cbed-521f-47bf-961a-1a4a174db777"], "metadata": {"page_label": "3", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "48570ac2-28e7-46d6-bb94-621c1404ba9e": {"node_ids": ["a20fed4a-abb3-4881-bc16-0f6614b1441e", "e5693ca5-ea84-43df-af5e-3bd349770c92", "be7ad5d9-778a-4796-9a0e-11749847b9bb"], "metadata": {"page_label": "4", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "7fbd543c-eb29-42c8-b20f-e47b04f24818": {"node_ids": ["053d4dbb-1ed6-4aee-b9c4-c196c23a61d0", "9163d41e-7fc2-4333-b994-63f0a5c9a6b7", "1c8589cd-90cb-4399-8fc3-d50226aa9298"], "metadata": {"page_label": "5", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "b98f6cd6-73e2-4a92-9eef-7628dc6db29f": {"node_ids": ["ac56c108-ed41-4604-938e-02031465039a", "fdfeadfe-36a3-4866-9e3a-3e637eb9581e", "fd51950b-2579-4ce7-a6fa-3617f8943582"], "metadata": {"page_label": "6", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "efc59103-b568-4d8b-b9ac-e1c672c99c50": {"node_ids": ["36f43a16-b07f-428d-be77-6dc49edd54a6", "acf6f18e-ad5c-468e-9c45-a2e854ea95e0", "dd7df896-0190-41e5-b23a-dc6dd0bd590d", "fe8a601d-3d51-45a3-be13-f02758ff5414", "5dd871bf-cecb-406c-b88e-5709a6adb814"], "metadata": {"page_label": "7", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "a7389587-1026-44fc-9df5-07766d354257": {"node_ids": ["2579320b-f5fa-4df8-897b-4eaf4c248f17", "a7a21c2d-ed15-4b0a-9598-c1146743daa5", "0f2ffd0d-92cb-47f1-86c7-77ee4fb840fc", "af3e00bd-51cb-452c-b456-9c9b1c418ded", "2ff4e7af-8e0f-43cc-ae14-0fe199c2a8c0", "eb65d5c7-7a08-4636-9ad1-a589c140eba2", "74afd105-66b1-4480-928e-6463efb8f7ce", "5d2ceeb5-c6d7-4864-91a1-106f421bcdf5", "8a738ca9-b6d5-47f6-b9af-5b2bec90990b"], "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "a6df1775-f7b3-4155-9727-85ef5a94fe6e": {"node_ids": ["d9777523-70a6-4d40-a26d-75900de6cf15", "fdd290a3-858c-460f-bc80-37181a1e0641", "32de2981-3bfd-416b-bf65-cda9858bac22", "5ef47187-7c0a-4d19-a5db-d902f4b9117d", "752056c3-b097-45de-888d-b643f5a1334d", "522dca29-d9a4-42f0-8b09-52ed9c2805e6", "97d68ab7-cf8d-43ac-bb13-933a04db0c4e", "0a3493e0-3b1e-4000-9a2f-8db92edb4bdd", "5ee9453f-8e37-4ce7-9fe6-bf30c947adce"], "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "8da64739-fb32-4a71-81fb-87b44f924646": {"node_ids": ["a5be2e51-5414-43ff-aea8-f02386808984", "1a245358-58d5-498d-925f-01a7e0468c6f", "ecb9771d-b392-4709-906e-225a19362cd4", "f2110263-d784-4771-b5eb-ca17a5b9f293", "1b6d1535-66aa-421c-a5e7-ead42942e325", "ab5934a2-0282-43d6-a328-5c649126a33f", "a83723a3-f166-45b1-b75d-8f5e54e3035d", "8b4bb903-07ce-40f4-ad84-699788e9fef8", "c99e758b-113d-433e-ab46-81c57950def2"], "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "1ee48f39-469b-4622-aaf2-4e24b9b0fbf7": {"node_ids": ["cfd89418-7755-4778-bccd-5123990d3974", "60820d92-e3b4-4e9c-acd9-edfadc0e25b8"], "metadata": {"page_label": "11", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "46298fdd-9e96-4be0-84db-adc501e9dd94": {"node_ids": ["dbd3796d-e736-4b3d-a83c-c4168922bd7e", "9ca3c541-f414-4c7d-b0d7-7db0c20601bb", "c80d02cd-3678-464d-8a36-57de8b1ab234"], "metadata": {"page_label": "1", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "1c6a9ef1-a6b6-473a-8951-9ae03b1c4b32": {"node_ids": ["fb44efbf-0cda-4c65-bb8b-411648350433", "b2f7f865-0cb4-47d9-a810-5b73ac69fc53", "fc26c0ad-6ef9-4b20-8718-a3d4160d9985"], "metadata": {"page_label": "2", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "63154e71-a06f-4ea6-9ce1-69f9b846286b": {"node_ids": ["780bba18-859c-42b9-ba4b-7a3322976468", "591991e9-b6b6-4fbf-a9bf-b205cccc233e", "5e4ad184-c9b8-4310-97c8-b894f6edfc27"], "metadata": {"page_label": "3", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "9239f300-edb3-4abf-9e6e-0cf5c3c18997": {"node_ids": ["dc25e83e-6a6b-4746-8797-5e62327f3df7", "9d4e8267-2e76-4731-8c79-fe904fb7b063", "8b73de1a-1dc8-4bf3-ad73-761ac5e7e07f"], "metadata": {"page_label": "4", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "0e1d7974-7c21-4c29-8b07-a74a0345358c": {"node_ids": ["48413bed-a843-4cb3-8f02-dabfeabdb347", "6c5e7b95-5665-4f6c-8041-c0f7892ec3b6", "51e65ec8-d0c1-4e31-a1c9-64d0ba8875b2", "3887897c-efd0-47c6-9ce2-f9f8d178f4a6", "37478217-bb1d-499f-ab2c-191816c8fabc", "b3b2ef9f-a809-43a5-b42a-c0c8e781299d", "790b42c6-3cae-4fcc-8527-1b9ef1f24eaa"], "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "3713c18b-4c38-40fc-96fb-0fbff8b093f3": {"node_ids": ["0240fc74-927d-4676-a842-f8e79d9ed2f7", "995a6992-63c9-46e7-8870-37e2a964a4ba"], "metadata": {"page_label": "6", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "8e431196-224e-418a-b1ab-ed0e7e3916aa": {"node_ids": ["c8df9663-c777-40c2-9521-c492afc11b9f", "888c4bc3-0f17-4040-921c-88982914a1d2"], "metadata": {"page_label": "1", "file_name": "Programming language theory - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Programming language theory - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 388157, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "4dad9663-23e3-496c-b8ab-ff8deeefbbf9": {"node_ids": ["137fe230-c369-4b2a-a5e5-93070234bdfb", "bb81c72e-7403-4826-8a45-658e64287486"], "metadata": {"page_label": "2", "file_name": "Programming language theory - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Programming language theory - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 388157, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "629aa3c5-1e55-4950-9703-f8bd516f6ffd": {"node_ids": ["da35902b-1975-454c-8f51-da132568dbec", "c56d464f-7ec4-4abb-9f03-35959714759d"], "metadata": {"page_label": "1", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "7cc1fa22-065f-43ca-a779-108038d1822e": {"node_ids": ["778aedee-6170-4430-99e3-fdc32f2410b8", "1bafc626-33e0-47c7-8a96-b3e56a54de17", "d7f573be-2b5f-4dcb-8d15-8946baf03541"], "metadata": {"page_label": "2", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "430b7061-8878-4660-b749-19c257a0753d": {"node_ids": ["72294b18-e6a3-468a-bdb6-c3b7a64ced82", "c2f57f89-f6e0-4ab3-a9c3-33d7c3a52ecc", "5934b079-e8f4-431b-9cd8-82cf0f813b94"], "metadata": {"page_label": "3", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "2a5f7834-517f-462a-9487-930654d0129e": {"node_ids": ["2890b580-5a09-4b00-91e5-edb9bfc7a14d", "59c0e136-9a7d-4c10-98d0-6222b8ea0aa4", "7f29db1c-91e5-48eb-92f1-97dbfd2a51bb", "afad220d-babf-449e-8c09-7865c4d9be29", "77bf5dac-ce17-4b66-9668-63a77eb2a187", "cf23a833-2854-4df1-8202-a9b02f2ebcc6", "35697870-bd99-4ee1-b7a2-a78cefd58806", "f52a26a5-0c94-4f1c-8ded-a952878ad14b"], "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}, "bea453b6-19cc-4716-9aa0-7972c7a5f75a": {"node_ids": ["e826d8e8-32a8-4125-8945-e7d3e3cd4d1e"], "metadata": {"page_label": "5", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}}}, "docstore/data": {"168b0ab2-9774-4bfa-9860-a3c9fd70da7f": {"__data__": {"id_": "168b0ab2-9774-4bfa-9860-a3c9fd70da7f", "embedding": null, "metadata": {"page_label": "1", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8c8ef739-bcd3-4cad-8494-1bf91c6601b3", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "06132d4460eda84dff1ddcd39f5494d3fa1bad7c1a21da49e0f55f0acdaae115", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fbba4f4d-5e34-437b-816e-48d799bc9aff", "node_type": "1", "metadata": {}, "hash": "9d0057450425044f02dd79dade14d5890986ae4c98ed7b6a02fb6a58e5cc956a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Flowchart of using successive\nsubtractions to \ufb01nd the greatest common\ndivisor of number r and s\nAda Lovelace's diagram from \"Note G\",\nthe \ufb01rst published computer algorithm\nAlgorithm\nIn mathematics and computer science, an algorithm (/\u02c8\u00e6l\u0261\u0259r\u026a\u00f0\u0259m/ \u24d8) is a finite sequence of mathematically rigorous instructions, typically used to solve a class of\nspecific problems or to perform a computation.[1] Algorithms are used as specifications for performing calculations and data processing. More advanced algorithms can use\nconditionals to divert the code execution through various routes (referred to as automated decision-making) and deduce valid inferences (referred to as automated\nreasoning).\nIn contrast, a heuristic is an approach to solving problems without well-defined correct or optimal results.[2] For example, although social media recommender systems are\ncommonly called \"algorithms\", they actually rely on heuristics as there is no truly \"correct\" recommendation.\nAs an effective method, an algorithm can be expressed within a finite amount of space and time[3] and in a well-defined formal language[4] for calculating a function.[5]\nStarting from an initial state and initial input (perhaps empty),[6] the instructions describe a computation that, when executed, proceeds through a finite[7] number of well-\ndefined successive states, eventually producing \"output\"[8] and terminating at a final ending state. The transition from one state to the next is not necessarily deterministic;\nsome algorithms, known as randomized algorithms, incorporate random input.[9]\nAround 825 AD, Persian scientist and polymath Mu\u1e25ammad ibn M\u016bs\u0101 al-Khw\u0101rizm\u012b wrote kit\u0101b al-\u1e25is\u0101b al-hind\u012b (\"Book of Indian computation\") and kitab al-jam' wa'l-\ntafriq al-\u1e25is\u0101b al-hind\u012b (\"Addition and subtraction in Indian arithmetic\"). In the early 12th century, Latin translations of these texts involving the Hindu\u2013Arabic numeral\nsystem and arithmetic appeared, for example Liber Alghoarismi de practica arismetrice, attributed to John of Seville, and Liber Algorismi de numero Indorum, attributed\nto Adelard of Bath.[10] Here, alghoarismi or algorismi is the Latinization of Al-Khwarizmi's name;[1] the text starts with the phrase Dixit Algorismi, or \"Thus spoke Al-\nKhwarizmi\".[2]\nThe word algorism in English came to mean the use of place-value notation in calculations; it occurs in the Ancrene Wisse from circa 1225.[11] By the time Geoffrey Chaucer wrote The Canterbury Tales in the late\n14th century, he used a variant of the same word in describing augrym stones, stones used for place-value calculation.[12][13] In the 15th century, under the influence of the Greek word \u1f00 \u03c1\u03b9\u03b8\u00b5\u03cc\u03c2 (arithmos,\n\"number\"; cf. \"arithmetic\"), the Latin word was altered to algorithmus.[14] By 1596, this form of the word was used in English, as algorithm, by Thomas Hood.[15]\nOne informal definition is \"a set of rules that precisely defines a sequence of operations\",[16] which would include all computer programs (including programs that do not perform numeric calculations), and any\nprescribed bureaucratic procedure[17] or cook-book recipe.[18] In general, a program is an algorithm only if it stops eventually[19]\u2014even though infinite loops may sometimes prove desirable. Boolos, Jeffrey &\n1974, 1999 define an algorithm to be an explicit set of instructions for determining an output, that can be followed by a computing machine or a human who could only carry out specific elementary operations on\nsymbols.[20]\nMost algorithms are intended to be implemented as computer programs. However, algorithms are also implemented by other means, such as in a biological neural network (for example, the human brain\nperforming arithmetic or an insect looking for food), in an electrical circuit, or a mechanical device.\nStep-by-step procedures for solving mathematical problems have been recorded since antiquity.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3871, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fbba4f4d-5e34-437b-816e-48d799bc9aff": {"__data__": {"id_": "fbba4f4d-5e34-437b-816e-48d799bc9aff", "embedding": null, "metadata": {"page_label": "1", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8c8ef739-bcd3-4cad-8494-1bf91c6601b3", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "06132d4460eda84dff1ddcd39f5494d3fa1bad7c1a21da49e0f55f0acdaae115", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "168b0ab2-9774-4bfa-9860-a3c9fd70da7f", "node_type": "1", "metadata": {"page_label": "1", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "055e02ac0473eb43ba0fcc789dab634aed1c60dff310893b8f59031471145e64", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7b22eb32-bb85-4c1e-bd47-be6231156338", "node_type": "1", "metadata": {}, "hash": "e9a9dbef4e38593b0f09bb9bcac7390fd47b3a95e6f6e6fe4b586559c9f8558a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "[18] In general, a program is an algorithm only if it stops eventually[19]\u2014even though infinite loops may sometimes prove desirable. Boolos, Jeffrey &\n1974, 1999 define an algorithm to be an explicit set of instructions for determining an output, that can be followed by a computing machine or a human who could only carry out specific elementary operations on\nsymbols.[20]\nMost algorithms are intended to be implemented as computer programs. However, algorithms are also implemented by other means, such as in a biological neural network (for example, the human brain\nperforming arithmetic or an insect looking for food), in an electrical circuit, or a mechanical device.\nStep-by-step procedures for solving mathematical problems have been recorded since antiquity. This includes in Babylonian mathematics (around 2500 BC),[21] Egyptian mathematics (around 1550 BC),[21]\nIndian mathematics (around 800 BC and later),[22][23] the Ifa Oracle (around 500 BC),[24] Greek mathematics (around 240 BC),[25] Chinese mathematics (around 200 BC and later),[26] and Arabic mathematics\n(around 800 AD).[27]\nThe earliest evidence of algorithms is found in ancient Mesopotamian mathematics. A Sumerian clay tablet found in Shuruppak near Baghdad and dated to c. 2500 BC describes the earliest division algorithm.[21]\nDuring the Hammurabi dynasty c. 1800\u00a0\u2013 c. 1600 BC, Babylonian clay tablets described algorithms for computing formulas.[28] Algorithms were also used in Babylonian astronomy. Babylonian clay tablets\ndescribe and employ algorithmic procedures to compute the time and place of significant astronomical events.[29]\nAlgorithms for arithmetic are also found in ancient Egyptian mathematics, dating back to the Rhind Mathematical Papyrus c. 1550 BC.[21] Algorithms were later used in ancient Hellenistic mathematics. Two\nexamples are the Sieve of Eratosthenes, which was described in the Introduction to Arithmetic by Nicomachus,[30][25]: Ch 9.2  and the Euclidean algorithm, which was first described in Euclid's Elements\n(c. 300 BC).[25]: Ch 9.1 Examples of ancient Indian mathematics included the Shulba Sutras, the Kerala School, and the Br\u0101hmasphu\u1e6dasiddh\u0101nta.[22]\nThe first cryptographic algorithm for deciphering encrypted code was developed by Al-Kindi, a 9th-century Arab mathematician, in A Manuscript On Deciphering Cryptographic Messages. He gave the first\ndescription of cryptanalysis by frequency analysis, the earliest codebreaking algorithm.[27]\nBolter credits the invention of the weight-driven clock as \"the key invention [of Europe in the Middle Ages],\" specifically the verge escapement mechanism[31] producing the tick and tock of a mechanical clock.\n\"The accurate automatic machine\"[32] led immediately to \"mechanical automata\" in the 13th century and \"computational machines\"\u2014the difference and analytical engines of Charles Babbage and Ada Lovelace in\nthe mid-19th century.[33] Lovelace designed the first algorithm intended for processing on a computer, Babbage's analytical engine, which is the first device considered a real Turing-complete computer instead of\njust a calculator. Although the full implementation of Babbage's second device was not realized for decades after her lifetime, Lovelace has been called \"history's first programmer\".\nBell and Newell (1971) write that the Jacquard loom, a precursor to Hollerith cards (punch cards), and \"telephone switching technologies\" led to the development of the first computers.[34] By the mid-19th\ncentury, the telegraph, the precursor of the telephone, was in use throughout the world. By the late 19th century, the ticker tape (c. 1870s) was in use, as were Hollerith cards (c. 1890). Then came the teleprinter\n(c. 1910) with its punched-paper use of Baudot code on tape.\nTelephone-switching networks of electromechanical relays were invented in 1835. These led to the invention of the digital adding device by George Stibitz in 1937. While working in Bell Laboratories, he observed\nthe \"burdensome\" use of mechanical calculators with gears. \"He went home one evening in 1937 intending to test his idea... When the tinkering was over, Stibitz had constructed a binary adding device\".", "mimetype": "text/plain", "start_char_idx": 3105, "end_char_idx": 7265, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7b22eb32-bb85-4c1e-bd47-be6231156338": {"__data__": {"id_": "7b22eb32-bb85-4c1e-bd47-be6231156338", "embedding": null, "metadata": {"page_label": "1", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8c8ef739-bcd3-4cad-8494-1bf91c6601b3", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "06132d4460eda84dff1ddcd39f5494d3fa1bad7c1a21da49e0f55f0acdaae115", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fbba4f4d-5e34-437b-816e-48d799bc9aff", "node_type": "1", "metadata": {"page_label": "1", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "cee464449bb33d89bf3e170dec398d6f35ffa8a7ce4a9d1d39af87877b0aa4e5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "[34] By the mid-19th\ncentury, the telegraph, the precursor of the telephone, was in use throughout the world. By the late 19th century, the ticker tape (c. 1870s) was in use, as were Hollerith cards (c. 1890). Then came the teleprinter\n(c. 1910) with its punched-paper use of Baudot code on tape.\nTelephone-switching networks of electromechanical relays were invented in 1835. These led to the invention of the digital adding device by George Stibitz in 1937. While working in Bell Laboratories, he observed\nthe \"burdensome\" use of mechanical calculators with gears. \"He went home one evening in 1937 intending to test his idea... When the tinkering was over, Stibitz had constructed a binary adding device\".[35][36]\nIn 1928, a partial formalization of the modern concept of algorithms began with attempts to solve the Entscheidungsproblem (decision problem) posed by David Hilbert.\nLater formalizations were framed as attempts to define \"effective calculability\"[37] or \"effective method\".[38] Those formalizations included the G\u00f6del\u2013Herbrand\u2013Kleene\nrecursive functions of 1930, 1934 and 1935, Alonzo Church's lambda calculus of 1936, Emil Post's Formulation 1 of 1936, and Alan Turing's Turing machines of 1936\u201337 and\n1939.\nAlgorithms can be expressed in many kinds of notation, including natural languages, pseudocode, flowcharts, drakon-charts, programming languages or control tables\n(processed by interpreters). Natural language expressions of algorithms tend to be verbose and ambiguous and are rarely used for complex or technical algorithms.\nPseudocode, flowcharts, drakon-charts, and control tables are structured expressions of algorithms that avoid common ambiguities of natural language. Programming\nlanguages are primarily for expressing algorithms in a computer-executable form but are also used to define or document algorithms.\nThere are many possible representations and Turing machine programs can be expressed as a sequence of machine tables (see finite-state machine, state-transition table, and control table for more), as flowcharts\nand drakon-charts (see state diagram for more), as a form of rudimentary machine code or assembly code called \"sets of quadruples\", and more. Algorithm representations can also be classified into three\naccepted levels of Turing machine description: high-level description, implementation description, and formal description.[39] A high-level description describes the qualities of the algorithm itself, ignoring how it\nis implemented on the Turing machine.[39] An implementation description describes the general manner in which the machine moves its head and stores data to carry out the algorithm, but does not give exact\nstates.[39] In the most detail, a formal description gives the exact state table and list of transitions of the Turing machine.[39]\nEtymology\nDefinition\nHistory\nAncient algorithms\nComputers\nWeight-driven clocks\nElectromechanical relay\nFormalization\nRepresentations\nTuring machines\n6/7/25, 7:30 PM Algorithm - Wikipedia\nhttps://en.wikipedia.org/wiki/Algorithm 1/5", "mimetype": "text/plain", "start_char_idx": 6557, "end_char_idx": 9599, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d6b2bf27-ffba-47ef-bb6a-92bdd11dd119": {"__data__": {"id_": "d6b2bf27-ffba-47ef-bb6a-92bdd11dd119", "embedding": null, "metadata": {"page_label": "2", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1814e81f-9d13-43fc-af31-f2ae27af422c", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "423f2eb29bd71bb911d6ea84df5668cfee1caf448e5ad74635a19a3a8c17cf78", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f7c93f17-b67c-4c28-a438-d133788e8906", "node_type": "1", "metadata": {}, "hash": "816823ae47574f073ba0481c0f84e3acc8b107aae377abb4bce5cd7c5350dad3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The graphical aid called a flowchart offers a way to describe and document an algorithm (and a computer program corresponding to it). It has four primary symbols: arrows showing program flow, rectangles\n(SEQUENCE, GOTO), diamonds (IF-THEN-ELSE), and dots (OR-tie). Sub-structures can \"nest\" in rectangles, but only if a single exit occurs from the superstructure.\nIt is often important to know how much time, storage, or other cost an algorithm may require. Methods have been developed for the analysis of algorithms to obtain such quantitative answers (estimates); for\nexample, an algorithm that adds up the elements of a list of n numbers would have a time requirement of   , using big O notation. The algorithm only needs to remember two values: the sum of all the elements\nso far, and its current position in the input list. If the space required to store the input numbers is not counted, it has a space requirement of   , otherwise    is required.\nDifferent algorithms may complete the same task with a different set of instructions in less or more time, space, or 'effort' than others. For example, a binary search algorithm (with cost   ) outperforms a\nsequential search (cost    ) when used for table lookups on sorted lists or arrays.\nThe analysis, and study of algorithms is a discipline of computer science. Algorithms are often studied abstractly, without referencing any specific programming language or implementation. Algorithm analysis\nresembles other mathematical disciplines as it focuses on the algorithm's properties, not implementation. Pseudocode is typical for analysis as it is a simple and general representation. Most algorithms are\nimplemented on particular hardware/software platforms and their algorithmic efficiency is tested using real code. The efficiency of a particular algorithm may be insignificant for many \"one-off\" problems but it\nmay be critical for algorithms designed for fast interactive, commercial, or long-life scientific usage. Scaling from small n to large n frequently exposes inefficient algorithms that are otherwise benign.\nEmpirical testing is useful for uncovering unexpected interactions that affect performance. Benchmarks may be used to compare before/after potential improvements to an algorithm after program optimization.\nEmpirical tests cannot replace formal analysis, though, and are non-trivial to perform fairly.[40]\nTo illustrate the potential improvements possible even in well-established algorithms, a recent significant innovation, relating to FFT algorithms (used heavily in the field of image processing), can decrease\nprocessing time up to 1,000 times for applications like medical imaging.[41] In general, speed improvements depend on special properties of the problem, which are very common in practical applications.[42]\nSpeedups of this magnitude enable computing devices that make extensive use of image processing (like digital cameras and medical equipment) to consume less power.\nThe best case of an algorithm refers to the scenario or input for which the algorithm or data structure takes the least time and resources to complete its tasks.[43] The worst case of an algorithm is the case that\ncauses the algorithm or data structure to consume the maximum period of time and computational resources.[44]\nAlgorithm design is a method or mathematical process for problem-solving and engineering algorithms. The design of algorithms is part of many solution theories, such as divide-and-conquer or dynamic\nprogramming within operation research. Techniques for designing and implementing algorithm designs are also called algorithm design patterns,[45] with examples including the template method pattern and the\ndecorator pattern. One of the most important aspects of algorithm design is resource (run-time, memory usage) efficiency; the big O notation is used to describe e.g., an algorithm's run-time growth as the size of\nits input increases.[46]\nPer the Church\u2013Turing thesis, any algorithm can be computed by any Turing complete model. Turing completeness only requires four instruction types\u2014conditional GOTO, unconditional GOTO, assignment,\nHALT. However, Kemeny and Kurtz observe that, while \"undisciplined\" use of unconditional GOTOs and conditional IF-THEN GOTOs can result in \"spaghetti code\", a programmer can write structured programs\nusing only these instructions; on the other hand \"it is also possible, and not too hard, to write badly structured programs in a structured language\".[47] Tausworthe augments the three B\u00f6hm-Jacopini canonical\nstructures:[48] SEQUENCE, IF-THEN-ELSE, and WHILE-DO, with two more: DO-WHILE and CASE.[49] An additional benefit of a structured program is that it lends itself to proofs of correctness using\nmathematical induction.[50]\nBy themselves, algorithms are not usually patentable.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4808, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f7c93f17-b67c-4c28-a438-d133788e8906": {"__data__": {"id_": "f7c93f17-b67c-4c28-a438-d133788e8906", "embedding": null, "metadata": {"page_label": "2", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1814e81f-9d13-43fc-af31-f2ae27af422c", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "423f2eb29bd71bb911d6ea84df5668cfee1caf448e5ad74635a19a3a8c17cf78", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d6b2bf27-ffba-47ef-bb6a-92bdd11dd119", "node_type": "1", "metadata": {"page_label": "2", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "78cadd608623d475b1ce63deb2df7604efa0fa2775159bddedb8fbc4d4a3859e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9bf1cb93-31c4-461e-bc49-879f5e21c629", "node_type": "1", "metadata": {}, "hash": "d86139f9d5d4ffcb9c550cb7d1d7d62ab15baee5ecf435e810cd451e6d7a198e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Turing completeness only requires four instruction types\u2014conditional GOTO, unconditional GOTO, assignment,\nHALT. However, Kemeny and Kurtz observe that, while \"undisciplined\" use of unconditional GOTOs and conditional IF-THEN GOTOs can result in \"spaghetti code\", a programmer can write structured programs\nusing only these instructions; on the other hand \"it is also possible, and not too hard, to write badly structured programs in a structured language\".[47] Tausworthe augments the three B\u00f6hm-Jacopini canonical\nstructures:[48] SEQUENCE, IF-THEN-ELSE, and WHILE-DO, with two more: DO-WHILE and CASE.[49] An additional benefit of a structured program is that it lends itself to proofs of correctness using\nmathematical induction.[50]\nBy themselves, algorithms are not usually patentable. In the United States, a claim consisting solely of simple manipulations of abstract concepts, numbers, or signals does not constitute \"processes\" (USPTO\n2006), so algorithms are not patentable (as in Gottschalk v. Benson). However practical applications of algorithms are sometimes patentable. For example, in Diamond v. Diehr, the application of a simple\nfeedback algorithm to aid in the curing of synthetic rubber was deemed patentable. The patenting of software is controversial,[51] and there are criticized patents involving algorithms, especially data compression\nalgorithms, such as Unisys's LZW patent. Additionally, some cryptographic algorithms have export restrictions (see export of cryptography).\nRecursion\nA recursive algorithm invokes itself repeatedly until meeting a termination condition and is a common functional programming method. Iterative algorithms use repetitions such as loops or data structures like\nstacks to solve problems. Problems may be suited for one implementation or the other. The Tower of Hanoi is a puzzle commonly solved using recursive implementation. Every recursive version has an\nequivalent (but possibly more or less complex) iterative version, and vice versa.\nSerial, parallel or distributed\nAlgorithms are usually discussed with the assumption that computers execute one instruction of an algorithm at a time on serial computers. Serial algorithms are designed for these environments, unlike\nparallel or distributed algorithms. Parallel algorithms take advantage of computer architectures where multiple processors can work on a problem at the same time. Distributed algorithms use multiple\nmachines connected via a computer network. Parallel and distributed algorithms divide the problem into subproblems and collect the results back together. Resource consumption in these algorithms is not\nonly processor cycles on each processor but also the communication overhead between the processors. Some sorting algorithms can be parallelized ef\ufb01ciently, but their communication overhead is\nexpensive. Iterative algorithms are generally parallelizable, but some problems have no parallel algorithms and are called inherently serial problems.\nDeterministic or non-deterministic\nDeterministic algorithms solve the problem with exact decisions at every step; whereas non-deterministic algorithms solve problems via guessing. Guesses are typically made more accurate through the use\nof heuristics.\nExact or approximate\nWhile many algorithms reach an exact solution, approximation algorithms seek an approximation that is close to the true solution. Such algorithms have practical value for many hard problems. For\nexample, the Knapsack problem, where there is a set of items, and the goal is to pack the knapsack to get the maximum total value. Each item has some weight and some value. The total weight that can\nbe carried is no more than some \ufb01xed number X. So, the solution must consider the weights of items as well as their value.[ 5 2 ] \nQuantum algorithm\nQuantum algorithms run on a realistic model of quantum computation. The term is usually used for those algorithms that seem inherently quantum or use some essential feature of Quantum computing such\nas quantum superposition or quantum entanglement.\nAnother way of classifying algorithms is by their design methodology or paradigm. Some common paradigms are:\nBrute-force or exhaustive search\nBrute force is a problem-solving method of systematically trying every possible option until the optimal solution is found. This approach can be very time-consuming, testing every possible combination of\nvariables. It is often used when other methods are unavailable or too complex. Brute force can solve a variety of problems, including \ufb01nding the shortest path between two points and cracking passwords.\nDivide and conquer\nA divide-and-conquer algorithm repeatedly reduces a problem to one or more smaller instances of itself (usually recursively) until the instances are small enough to solve easily.", "mimetype": "text/plain", "start_char_idx": 4018, "end_char_idx": 8802, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9bf1cb93-31c4-461e-bc49-879f5e21c629": {"__data__": {"id_": "9bf1cb93-31c4-461e-bc49-879f5e21c629", "embedding": null, "metadata": {"page_label": "2", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1814e81f-9d13-43fc-af31-f2ae27af422c", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "423f2eb29bd71bb911d6ea84df5668cfee1caf448e5ad74635a19a3a8c17cf78", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f7c93f17-b67c-4c28-a438-d133788e8906", "node_type": "1", "metadata": {"page_label": "2", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "371e26adf07c453d4c5714b8db3b0d055d86039b71965d56eefc065ee0e4b6fb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The term is usually used for those algorithms that seem inherently quantum or use some essential feature of Quantum computing such\nas quantum superposition or quantum entanglement.\nAnother way of classifying algorithms is by their design methodology or paradigm. Some common paradigms are:\nBrute-force or exhaustive search\nBrute force is a problem-solving method of systematically trying every possible option until the optimal solution is found. This approach can be very time-consuming, testing every possible combination of\nvariables. It is often used when other methods are unavailable or too complex. Brute force can solve a variety of problems, including \ufb01nding the shortest path between two points and cracking passwords.\nDivide and conquer\nA divide-and-conquer algorithm repeatedly reduces a problem to one or more smaller instances of itself (usually recursively) until the instances are small enough to solve easily. Merge sorting is an example\nof divide and conquer, where an unordered list is repeatedly split into smaller lists, which are sorted in the same way and then merged.[ 5 3 ]  In a simpler variant of divide and conquer called prune and search\nor decrease-and-conquer algorithm, which solves one smaller instance of itself, and does not require a merge step.[ 5 4 ]  An example of a prune and search algorithm is the binary search algorithm.\nSearch and enumeration\nMany problems (such as playing chess) can be modelled as problems on graphs. A graph exploration algorithm speci\ufb01es rules for moving around a graph and is useful for such problems. This category also\nincludes search algorithms, branch and bound enumeration, and backtracking.\nRandomized algorithm\nSuch algorithms make some choices randomly (or pseudo-randomly). They \ufb01nd approximate solutions when \ufb01nding exact solutions may be impractical (see heuristic method below). For some problems, the\nfastest approximations must involve some randomness.[ 5 5 ]  Whether randomized algorithms with polynomial time complexity can be the fastest algorithm for some problems is an open question known as\nthe P versus NP problem. There are two large classes of such algorithms:\n1. Monte Carlo algorithms return a correct answer with high probability. E.g. RP is the subclass of these that run in polynomial time.\n2. Las Vegas algorithms always return the correct answer, but their running time is only probabilistically bound, e.g. ZPP.\nFlowchart representation\nAlgorithmic analysis\nFormal versus empirical\nExecution ef\ufb01ciency\nBest Case and Worst Case\nDesign\nStructured programming\nLegal status\nClassification\nBy implementation\nBy design paradigm\n6/7/25, 7:30 PM Algorithm - Wikipedia\nhttps://en.wikipedia.org/wiki/Algorithm 2/5", "mimetype": "text/plain", "start_char_idx": 7876, "end_char_idx": 10579, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1be76a00-ae46-40f1-95ca-26c9b35b8441": {"__data__": {"id_": "1be76a00-ae46-40f1-95ca-26c9b35b8441", "embedding": null, "metadata": {"page_label": "3", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dba8ad71-1979-457f-8689-ff7dc9d2b345", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "064cd9bb1dbafc5c738a9181a376e6e079904c56955f44f291edb9ee5aa9e9b2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8922d98b-0a7e-46ab-967c-1ffe8f3995d0", "node_type": "1", "metadata": {}, "hash": "ee1d0198ac41001e84fcff90e60bed7e0b5be64d203eec2ae79fe0befb2b337b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Mathematics portal\nComputer\nprogramming portal\nReduction of complexity\nThis technique transforms dif\ufb01cult problems into better-known problems solvable with (hopefully) asymptotically optimal algorithms. The goal is to \ufb01nd a reducing algorithm whose complexity is not\ndominated by the resulting reduced algorithms. For example, one selection algorithm \ufb01nds the median of an unsorted list by \ufb01rst sorting the list (the expensive portion), and then pulling out the middle\nelement in the sorted list (the cheap portion). This technique is also known as transform and conquer.\nBack tracking\nIn this approach, multiple solutions are built incrementally and abandoned when it is determined that they cannot lead to a valid full solution.\nFor optimization problems there is a more specific classification of algorithms; an algorithm for such problems may fall into one or more of the general categories described above as well as into one of the\nfollowing:\nLinear programming\nWhen searching for optimal solutions to a linear function bound by linear equality and inequality constraints, the constraints can be used directly to produce optimal solutions. There are algorithms that can\nsolve any problem in this category, such as the popular simplex algorithm.[ 5 6 ]  Problems that can be solved with linear programming include the maximum \ufb02ow problem for directed graphs. If a problem also\nrequires that any of the unknowns be integers, then it is classi\ufb01ed in integer programming. A linear programming algorithm can solve such a problem if it can be proved that all restrictions for integer values\nare super\ufb01cial, i.e., the solutions satisfy these restrictions anyway. In the general case, a specialized algorithm or an algorithm that \ufb01nds approximate solutions is used, depending on the dif\ufb01culty of the\nproblem.\nDynamic programming\nWhen a problem shows optimal substructures\u2014meaning the optimal solution can be constructed from optimal solutions to subproblems\u2014and overlapping subproblems, meaning the same subproblems are\nused to solve many different problem instances, a quicker approach called dynamic programming avoids recomputing solutions. For example, Floyd\u2013Warshall algorithm, the shortest path between a start\nand goal vertex in a weighted graph can be found using the shortest path to the goal from all adjacent vertices. Dynamic programming and memoization go together. Unlike divide and conquer, dynamic\nprogramming subproblems often overlap. The difference between dynamic programming and simple recursion is the caching or memoization of recursive calls. When subproblems are independent and do\nnot repeat, memoization does not help; hence dynamic programming is not applicable to all complex problems. Using memoization dynamic programming reduces the complexity of many problems from\nexponential to polynomial.\nThe greedy method\nGreedy algorithms, similarly to a dynamic programming, work by examining substructures, in this case not of the problem but of a given solution. Such algorithms start with some solution and improve it by\nmaking small modi\ufb01cations. For some problems, they always \ufb01nd the optimal solution but for others they may stop at local optima. The most popular use of greedy algorithms is \ufb01nding minimal spanning\ntrees of graphs without negative cycles. Huffman Tree, Kruskal, Prim, Sollin are greedy algorithms that can solve this optimization problem.\nThe heuristic method\nIn optimization problems, heuristic algorithms \ufb01nd solutions close to the optimal solution when \ufb01nding the optimal solution is impractical. These algorithms get closer and closer to the optimal solution as they\nprogress. In principle, if run for an in\ufb01nite amount of time, they will \ufb01nd the optimal solution. They can ideally \ufb01nd a solution very close to the optimal solution in a relatively short time. These algorithms\ninclude local search, tabu search, simulated annealing, and genetic algorithms. Some, like simulated annealing, are non-deterministic algorithms while others, like tabu search, are deterministic. When a\nbound on the error of the non-optimal solution is known, the algorithm is further categorized as an approximation algorithm.\nOne of the simplest algorithms finds the largest number in a list of numbers of random order. Finding the solution requires looking at every number in the list. From this follows a simple algorithm, which can be\ndescribed in plain English as:\nHigh-level description:\n1. If a set of numbers is empty, then there is no highest number.\n2. Assume the \ufb01rst number in the set is the largest.\n3. For each remaining number in the set: if this number is greater than the current largest, it becomes the new largest.\n4. When there are no unchecked numbers left in the set, consider the current largest number to be the largest in the set.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4782, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8922d98b-0a7e-46ab-967c-1ffe8f3995d0": {"__data__": {"id_": "8922d98b-0a7e-46ab-967c-1ffe8f3995d0", "embedding": null, "metadata": {"page_label": "3", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dba8ad71-1979-457f-8689-ff7dc9d2b345", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "064cd9bb1dbafc5c738a9181a376e6e079904c56955f44f291edb9ee5aa9e9b2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1be76a00-ae46-40f1-95ca-26c9b35b8441", "node_type": "1", "metadata": {"page_label": "3", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "8c4665869973bfc88925fb7e1005dbc5760cc39b0cac46edb6745b2d62df5f45", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6ecb0a0b-2906-494d-8469-fee96bf13076", "node_type": "1", "metadata": {}, "hash": "34b597e10459e5fce7e252caef4371d5a9c87846d5f1177646b83eba1a272f56", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Some, like simulated annealing, are non-deterministic algorithms while others, like tabu search, are deterministic. When a\nbound on the error of the non-optimal solution is known, the algorithm is further categorized as an approximation algorithm.\nOne of the simplest algorithms finds the largest number in a list of numbers of random order. Finding the solution requires looking at every number in the list. From this follows a simple algorithm, which can be\ndescribed in plain English as:\nHigh-level description:\n1. If a set of numbers is empty, then there is no highest number.\n2. Assume the \ufb01rst number in the set is the largest.\n3. For each remaining number in the set: if this number is greater than the current largest, it becomes the new largest.\n4. When there are no unchecked numbers left in the set, consider the current largest number to be the largest in the set.\n(Quasi-)formal description: Written in prose but much closer to the high-level language of a computer program, the following is the more formal coding of the algorithm in pseudocode or pidgin code:\nAlgorithm LargestNumber\nInput: A list of numbers L.\nOutput: The largest number in the list L.\nif L.size = 0 return null\nlargest \u2190 L[0]\nfor each item in L, do\n    if item > largest, then\n        largest \u2190 item\nreturn largest\n\" \u2190 \" denotes assignment. For instance, \"largest \u2190  item\" means that the value of largest changes to the value of item.\n\"r e t u r n \" terminates the algorithm and outputs the following value.\nAbstract machine\nALGOL\nAlgorithm = Logic + Control\nAlgorithm aversion\nAlgorithm engineering\nAlgorithm characterizations\nAlgorithmic bias\nAlgorithmic composition\nAlgorithmic entities\nAlgorithmic synthesis\nAlgorithmic technique\nAlgorithmic topology\nComputational mathematics\nGarbage in, garbage out\nIntroduction to Algorithms (textbook)\nGovernment by algorithm\nList of algorithms\nList of algorithm general topics\nMedium is the message\nRegulation of algorithms\nTheory of computation\nComputability theory\nComputational complexity theory\n1. \"De\ufb01nition of ALGORITHM\" (https://www.merriam-webster.com/di\nctionary/algorithm). Merriam-Webster Online Dictionary. Archived\n(https://web.archive.org/web/20200214074446/https://www.merri\nam-webster.com/dictionary/algorithm) from the original on\nFebruary 14, 2020. Retrieved November 14, 2019.\n2. David A. Grossman, Ophir Frieder, Information Retrieval:\nAlgorithms and Heuristics, 2nd edition, 2004, ISBN\u00a01402030045\n3. \"Any classical mathematical algorithm, for example, can be\ndescribed in a \ufb01nite number of English words\" (Rogers 1987:2).\n4. Well de\ufb01ned concerning the agent that executes the algorithm:\n\"There is a computing agent, usually human, which can react to\nthe instructions and carry out the computations\" (Rogers\n1987:2).\n5. \"an algorithm is a procedure for computing a function\n(concerning some chosen notation for integers) ... this limitation\n(to numerical functions) results in no loss of generality\", (Rogers\n1987:1).\n6. \"An algorithm has zero or more inputs, i.e., quantities which are\ngiven to it initially before the algorithm begins\" (Knuth 1973:5).\n7. \"A procedure which has all the characteristics of an algorithm\nexcept that it possibly lacks \ufb01niteness may be called a\n'computational method'\" (Knuth 1973:5).\n8. \"An algorithm has one or more outputs, i.e., quantities which\nhave a speci\ufb01ed relation to the inputs\" (Knuth 1973:5).\n9. Whether or not a process with random interior processes (not\nincluding the input) is an algorithm is debatable. Rogers opines\nthat: \"a computation is carried out in a discrete stepwise fashion,\nwithout the use of continuous methods or analog devices ...\ncarried forward deterministically, without resort to random\nmethods or devices, e.g., dice\" (Rogers 1987:2).\n10. Blair, Ann, Duguid, Paul, Goeing, Anja-Silvia and Grafton,\nAnthony. Information: A Historical Companion, Princeton:\nPrinceton University Press, 2021. p. 247\n11.", "mimetype": "text/plain", "start_char_idx": 3906, "end_char_idx": 7819, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6ecb0a0b-2906-494d-8469-fee96bf13076": {"__data__": {"id_": "6ecb0a0b-2906-494d-8469-fee96bf13076", "embedding": null, "metadata": {"page_label": "3", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dba8ad71-1979-457f-8689-ff7dc9d2b345", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "064cd9bb1dbafc5c738a9181a376e6e079904c56955f44f291edb9ee5aa9e9b2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8922d98b-0a7e-46ab-967c-1ffe8f3995d0", "node_type": "1", "metadata": {"page_label": "3", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "89b8fc9e43a4bf91a633531dd274f27b422bf23e0d9f2d21015f15c84e499462", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a2878874-d30a-41dd-aa87-ad004f52ed83", "node_type": "1", "metadata": {}, "hash": "dba215d59161f90f95fb4eadb76c1bd28e977cffa89c4de202676ab7167e7286", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "8. \"An algorithm has one or more outputs, i.e., quantities which\nhave a speci\ufb01ed relation to the inputs\" (Knuth 1973:5).\n9. Whether or not a process with random interior processes (not\nincluding the input) is an algorithm is debatable. Rogers opines\nthat: \"a computation is carried out in a discrete stepwise fashion,\nwithout the use of continuous methods or analog devices ...\ncarried forward deterministically, without resort to random\nmethods or devices, e.g., dice\" (Rogers 1987:2).\n10. Blair, Ann, Duguid, Paul, Goeing, Anja-Silvia and Grafton,\nAnthony. Information: A Historical Companion, Princeton:\nPrinceton University Press, 2021. p. 247\n11. \"algorism\" (https://www.oed.com/dictionary/algorism_n?tl=true).\nOxford English Dictionary. Retrieved May 18, 2025.\n12. Chaucer, Geoffrey. \"The Miller's Tale\" (https://chaucer.fas.harvar\nd.edu/pages/millers-prologue-and-tale). Line 3210.\n13. Skeat, Walter William (1914). \"agrim, agrum\" (https://books.googl\ne.com/books?id=z58YAAAAIAAJ&pg=PA5). In Mayhew, Anthony\nLawson (ed.). A Glossary of Tudor and Stuart Words: Especially\nfrom the Dramatists. Clarendon Press. pp.\u00a05\u20136.\n14. Grabiner, Judith V. (December 2013). \"The role of mathematics\nin liberal arts education\". In Matthews, Michael R. (ed.).\nInternational Handbook of Research in History, Philosophy and\nScience Teaching. Springer. pp.\u00a0793\u2013836. doi:10.1007/978-94-\n007-7654-8_25 (https://doi.org/10.1007%2F978-94-007-7654-8_\n25). ISBN\u00a09789400776548.\n15. \"algorithm\" (https://www.oed.com/dictionary/algorithm_n). Oxford\nEnglish Dictionary. Retrieved May 18, 2025.\n16. Stone (1971), p.\u00a08.\n17. Simanowski, Roberto (2018). The Death Algorithm and Other\nDigital Dilemmas (https://books.google.com/books?id=RJV5DwA\nAQBAJ). Untimely Meditations. Vol.\u00a014. Translated by Chase,\nJefferson. Cambridge, Massachusetts: MIT Press. p.\u00a0147.\nISBN\u00a09780262536370. Archived (https://web.archive.org/web/20\n191222120705/https://books.google.com/books?id=RJV5DwAA\nQBAJ) from the original on December 22, 2019. Retrieved\nMay 27, 2019. \"[...] the next level of abstraction of central\nbureaucracy: globally operating algorithms.\"\n18. Dietrich, Eric (1999). \"Algorithm\". In Wilson, Robert Andrew; Keil,\nFrank C. (eds.). The MIT Encyclopedia of the Cognitive Sciences\n(https://books.google.com/books?id=-wt1aZrGXLYC). MIT\nCognet library. Cambridge, Massachusetts: MIT Press (published\n2001). p.\u00a011. ISBN\u00a09780262731447. Retrieved July 22, 2020. \"An\nalgorithm is a recipe, method, or technique for doing something.\"\n19. Stone requires that \"it must terminate in a \ufb01nite number of steps\"\n(Stone 1973:7\u20138).\n20. Boolos and Jeffrey 1974, 1999:19\n21. Chabert, Jean-Luc (2012). A History of Algorithms: From the\nPebble to the Microchip. Springer Science & Business Media.\npp.\u00a07\u20138. ISBN\u00a09783642181924.\n22. Sriram, M. S. (2005). \"Algorithms in Indian Mathematics\" (https://\nbooks.google.com/books?id=qfJdDwAAQBAJ&pg=PA153). In\nEmch, Gerard G.; Sridharan, R.; Srinivas, M. D. (eds.).", "mimetype": "text/plain", "start_char_idx": 7168, "end_char_idx": 10121, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a2878874-d30a-41dd-aa87-ad004f52ed83": {"__data__": {"id_": "a2878874-d30a-41dd-aa87-ad004f52ed83", "embedding": null, "metadata": {"page_label": "3", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dba8ad71-1979-457f-8689-ff7dc9d2b345", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "064cd9bb1dbafc5c738a9181a376e6e079904c56955f44f291edb9ee5aa9e9b2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6ecb0a0b-2906-494d-8469-fee96bf13076", "node_type": "1", "metadata": {"page_label": "3", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "f8c70a10de1ffa82d6c5af5706271dd2f6dcbb68b5da8091d1c7fbd2a447218b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\"An\nalgorithm is a recipe, method, or technique for doing something.\"\n19. Stone requires that \"it must terminate in a \ufb01nite number of steps\"\n(Stone 1973:7\u20138).\n20. Boolos and Jeffrey 1974, 1999:19\n21. Chabert, Jean-Luc (2012). A History of Algorithms: From the\nPebble to the Microchip. Springer Science & Business Media.\npp.\u00a07\u20138. ISBN\u00a09783642181924.\n22. Sriram, M. S. (2005). \"Algorithms in Indian Mathematics\" (https://\nbooks.google.com/books?id=qfJdDwAAQBAJ&pg=PA153). In\nEmch, Gerard G.; Sridharan, R.; Srinivas, M. D. (eds.).\nContributions to the History of Indian Mathematics. Springer.\np.\u00a0153. ISBN\u00a0978-93-86279-25-5.\n23. Hayashi, T. (2023, January 1). Brahmagupta (https://www.britann\nica.com/biography/Brahmagupta). Encyclopedia Britannica.\n24. Zaslavsky, Claudia (1970). \"Mathematics of the Yoruba People\nand of Their Neighbors in Southern Nigeria\" (https://www.jstor.or\ng/stable/3027363). The Two-Year College Mathematics Journal.\n1 (2): 76\u201399. doi:10.2307/3027363 (https://doi.org/10.2307%2F3\n027363). ISSN\u00a00049-4925 (https://search.worldcat.org/issn/0049-\n4925). JSTOR\u00a03027363 (https://www.jstor.org/stable/3027363).\n25. Cooke, Roger L. (2005). The History of Mathematics: A Brief\nCourse. John Wiley & Sons. ISBN\u00a0978-1-118-46029-0.\n26. Chabert, Jean-Luc, ed. (1999). \"A History of Algorithms\" (https://li\nnk.springer.com/book/10.1007/978-3-642-18192-4).\nSpringerLink. doi:10.1007/978-3-642-18192-4 (https://doi.org/10.\n1007%2F978-3-642-18192-4). ISBN\u00a0978-3-540-63369-3.\n27. Dooley, John F. (2013). A Brief History of Cryptology and\nCryptographic Algorithms. Springer Science & Business Media.\npp.\u00a012\u20133. ISBN\u00a09783319016283.\n28. Knuth, Donald E. (1972). \"Ancient Babylonian Algorithms\" (http\ns://web.archive.org/web/20121224100137/http://steiner.math.nth\nu.edu.tw/disk5/js/computer/1.pdf) (PDF). Commun. ACM. 15 (7):\n671\u2013677. doi:10.1145/361454.361514 (https://doi.org/10.1145%2\nF361454.361514). ISSN\u00a00001-0782 (https://search.worldcat.org/i\nssn/0001-0782). S2CID\u00a07829945 (https://api.semanticscholar.or\ng/CorpusID:7829945). Archived from the original (http://steiner.m\nath.nthu.edu.tw/disk5/js/computer/1.pdf) (PDF) on December 24,\n2012.\nOptimization problems\nExamples\nSee also\nNotes\n6/7/25, 7:30 PM Algorithm - Wikipedia\nhttps://en.wikipedia.org/wiki/Algorithm 3/5", "mimetype": "text/plain", "start_char_idx": 9593, "end_char_idx": 11868, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f1981d2f-f2d7-4591-8d6b-586d1b1bbaf2": {"__data__": {"id_": "f1981d2f-f2d7-4591-8d6b-586d1b1bbaf2", "embedding": null, "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e523414d-2c6a-44cd-a377-bd5f9e65889e", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "7ea41d7f3638c98124cc50a0ed3ad9ef236db462dc5436473237b16d4d4104d9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "68222e96-bda8-4e21-9910-bd3b830b8745", "node_type": "1", "metadata": {}, "hash": "fa8ae2a60a1d3d021398f9fd3fb5e86cc7a4a81dd89a46b3634d3ff2d13592ee", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "29. Aaboe, Asger (2001). Episodes from the Early History of\nAstronomy. New York: Springer. pp.\u00a040\u201362. ISBN\u00a0978-0-387-\n95136-2.\n30. Ast, Courtney. \"Eratosthenes\" (http://www.math.wichita.edu/histo\nry/men/eratosthenes.html). Wichita State University: Department\nof Mathematics and Statistics. Archived (https://web.archive.org/\nweb/20150227150653/http://www.math.wichita.edu/history/men/e\nratosthenes.html) from the original on February 27, 2015.\nRetrieved February 27, 2015.\n31. Bolter 1984:24\n32. Bolter 1984:26\n33. Bolter 1984:33\u201334, 204\u2013206.\n34. Bell and Newell diagram 1971:39, cf. Davis 2000\n35. Melina Hill, Valley News Correspondent, A Tinkerer Gets a Place\nin History, Valley News West Lebanon NH, Thursday, March 31,\n1983, p. 13.\n36. Davis 2000:14\n37. Kleene 1943 in Davis 1965:274\n38. Rosser 1939 in Davis 1965:225\n39. Sipser 2006:157\n40. Kriegel, Hans-Peter; Schubert, Erich; Zimek, Arthur (2016). \"The\n(black) art of run-time evaluation: Are we comparing algorithms\nor implementations?\". Knowledge and Information Systems. 52\n(2): 341\u2013378. doi:10.1007/s10115-016-1004-2 (https://doi.org/10.\n1007%2Fs10115-016-1004-2). ISSN\u00a00219-1377 (https://search.w\norldcat.org/issn/0219-1377). S2CID\u00a040772241 (https://api.seman\nticscholar.org/CorpusID:40772241).\n41. Gillian Conahan (January 2013). \"Better Math Makes Faster\nData Networks\" (http://discovermagazine.com/2013/jan-feb/34-b\netter-math-makes-faster-data-networks). discovermagazine.com.\nArchived (https://web.archive.org/web/20140513212427/http://dis\ncovermagazine.com/2013/jan-feb/34-better-math-makes-faster-d\nata-networks) from the original on May 13, 2014. Retrieved\nMay 13, 2014.\n42. Haitham Hassanieh, Piotr Indyk, Dina Katabi, and Eric Price,\n\"ACM-SIAM Symposium On Discrete Algorithms (SODA) (http://s\niam.omnibooksonline.com/2012SODA/data/papers/500.pdf)\nArchived (https://web.archive.org/web/20130704180806/http://sia\nm.omnibooksonline.com/2012SODA/data/papers/500.pdf) July 4,\n2013, at the Wayback Machine, Kyoto, January 2012. See also\nthe sFFT Web Page (http://groups.csail.mit.edu/netmit/sFFT/)\nArchived (https://web.archive.org/web/20120221145740/http://gr\noups.csail.mit.edu/netmit/sFFT/) February 21, 2012, at the\nWayback Machine.\n43. \"Best Case\" (https://xlinux.nist.gov/dads/HTML/bestcase.html).\nDictionary of Algorithms and Data Structures. National Institute of\nStandards and Technology (NIST). National Institute of\nStandards and Technology. Retrieved May 29, 2025.\n44. \"worst case\" (https://xlinux.nist.gov/dads/HTML/worstcase.html).\nDictionary of Algorithms and Data Structures. National Institute of\nStandards and Technology (NIST). National Institute of\nStandards and Technology (NIST). Retrieved May 29, 2025.\n45. Goodrich, Michael T.; Tamassia, Roberto (2002). Algorithm\nDesign: Foundations, Analysis, and Internet Examples (http://ww\n3.algorithmdesign.net/ch00-front.html).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2861, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "68222e96-bda8-4e21-9910-bd3b830b8745": {"__data__": {"id_": "68222e96-bda8-4e21-9910-bd3b830b8745", "embedding": null, "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e523414d-2c6a-44cd-a377-bd5f9e65889e", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "7ea41d7f3638c98124cc50a0ed3ad9ef236db462dc5436473237b16d4d4104d9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f1981d2f-f2d7-4591-8d6b-586d1b1bbaf2", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "8a10fb19fb6a90bdd3691c131195c5fb8dda23a3a1c9b13524f7ea0f7572477e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9385b1c4-79f8-4936-ab3b-cb3ae7caf3c5", "node_type": "1", "metadata": {}, "hash": "bd5a7d1119e6f5908fcd956db5bc965a80c02271eb7b0bfe4ccd07a3c75788f9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "43. \"Best Case\" (https://xlinux.nist.gov/dads/HTML/bestcase.html).\nDictionary of Algorithms and Data Structures. National Institute of\nStandards and Technology (NIST). National Institute of\nStandards and Technology. Retrieved May 29, 2025.\n44. \"worst case\" (https://xlinux.nist.gov/dads/HTML/worstcase.html).\nDictionary of Algorithms and Data Structures. National Institute of\nStandards and Technology (NIST). National Institute of\nStandards and Technology (NIST). Retrieved May 29, 2025.\n45. Goodrich, Michael T.; Tamassia, Roberto (2002). Algorithm\nDesign: Foundations, Analysis, and Internet Examples (http://ww\n3.algorithmdesign.net/ch00-front.html). John Wiley & Sons, Inc.\nISBN\u00a0978-0-471-38365-9. Archived (https://web.archive.org/web/\n20150428201622/http://ww3.algorithmdesign.net/ch00-front.html)\nfrom the original on April 28, 2015. Retrieved June 14, 2018.\n46. \"Big-O notation (article) | Algorithms\" (https://www.khanacademy.\norg/computing/computer-science/algorithms/asymptotic-notation/\na/big-o-notation). Khan Academy. Retrieved June 3, 2024.\n47. John G. Kemeny and Thomas E. Kurtz 1985 Back to Basic: The\nHistory, Corruption, and Future of the Language, Addison-\nWesley Publishing Company, Inc. Reading, MA, ISBN\u00a00-201-\n13433-0.\n48. Tausworthe 1977:101\n49. Tausworthe 1977:142\n50. Knuth 1973 section 1.2.1, expanded by Tausworthe 1977 at\npages 100ff and Chapter 9.1\n51. \"The Experts: Does the Patent System Encourage Innovation?\"\n(https://www.wsj.com/articles/SB10001424127887323582904578\n487200821421958). The Wall Street Journal. May 16, 2013.\nISSN\u00a00099-9660 (https://search.worldcat.org/issn/0099-9660).\nRetrieved March 29, 2017.\n52. Kellerer, Hans; Pferschy, Ulrich; Pisinger, David (2004).\nKnapsack Problems | Hans Kellerer | Springer (https://www.sprin\nger.com/us/book/9783540402862). Springer. doi:10.1007/978-3-\n540-24777-7 (https://doi.org/10.1007%2F978-3-540-24777-7).\nISBN\u00a0978-3-540-40286-2. S2CID\u00a028836720 (https://api.semantic\nscholar.org/CorpusID:28836720). Archived (https://web.archive.o\nrg/web/20171018181055/https://www.springer.com/us/book/9783\n540402862) from the original on October 18, 2017. Retrieved\nSeptember 19, 2017.\n53. Goodrich, Michael T.; Tamassia, Roberto (2001). \"5.2 Divide and\nConquer\". Algorithm Design: Foundations, Analysis, and Internet\nExamples. John Wiley & Sons. p.\u00a0263. ISBN\u00a09780471383659.\n54. Goodrich & Tamassia (2001), p.\u00a0245, 4.7.1 Prune-and-search.\n55. For instance, the volume of a convex polytope (described using a\nmembership oracle) can be approximated to high accuracy by a\nrandomized polynomial time algorithm, but not by a deterministic\none: see Dyer, Martin; Frieze, Alan; Kannan, Ravi (January\n1991). \"A Random Polynomial-time Algorithm for Approximating\nthe Volume of Convex Bodies\". J. ACM. 38 (1): 1\u201317.\nCiteSeerX\u00a010.1.1.145.4600 (https://citeseerx.ist.psu.edu/viewdo\nc/summary?doi=10.1.1.145.4600).", "mimetype": "text/plain", "start_char_idx": 2207, "end_char_idx": 5081, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9385b1c4-79f8-4936-ab3b-cb3ae7caf3c5": {"__data__": {"id_": "9385b1c4-79f8-4936-ab3b-cb3ae7caf3c5", "embedding": null, "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e523414d-2c6a-44cd-a377-bd5f9e65889e", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "7ea41d7f3638c98124cc50a0ed3ad9ef236db462dc5436473237b16d4d4104d9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "68222e96-bda8-4e21-9910-bd3b830b8745", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "30c5673845bd35a2e788645e31d4d675000b72549d7572f010ccd971e9a907fb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2a6a0a5f-f589-41ad-b2e3-1b3c93b6d575", "node_type": "1", "metadata": {}, "hash": "3ad88c463e3e585c23bb0d739c1d83802b53a7e408d5cb1c4f62606ac6dbc5a8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "John Wiley & Sons. p.\u00a0263. ISBN\u00a09780471383659.\n54. Goodrich & Tamassia (2001), p.\u00a0245, 4.7.1 Prune-and-search.\n55. For instance, the volume of a convex polytope (described using a\nmembership oracle) can be approximated to high accuracy by a\nrandomized polynomial time algorithm, but not by a deterministic\none: see Dyer, Martin; Frieze, Alan; Kannan, Ravi (January\n1991). \"A Random Polynomial-time Algorithm for Approximating\nthe Volume of Convex Bodies\". J. ACM. 38 (1): 1\u201317.\nCiteSeerX\u00a010.1.1.145.4600 (https://citeseerx.ist.psu.edu/viewdo\nc/summary?doi=10.1.1.145.4600). doi:10.1145/102782.102783\n(https://doi.org/10.1145%2F102782.102783). S2CID\u00a013268711\n(https://api.semanticscholar.org/CorpusID:13268711).\n56. George B. Dantzig and Mukund N. Thapa. 2003. Linear\nProgramming 2: Theory and Extensions. Springer-Verlag.\nAxt, P (1959). \"On a Subrecursive Hierarchy and Primitive\nRecursive Degrees\" (https://doi.org/10.2307%2F1993169).\nTransactions of the American Mathematical Society. 92 (1): 85\u2013\n105. doi:10.2307/1993169 (https://doi.org/10.2307%2F1993169).\nJSTOR\u00a01993169 (https://www.jstor.org/stable/1993169).\nBell, C. Gordon and Newell, Allen (1971), Computer Structures:\nReadings and Examples, McGraw\u2013Hill Book Company, New\nYork. ISBN\u00a00-07-004357-4.\nBlass, Andreas; Gurevich, Yuri (2003). \"Algorithms: A Quest for\nAbsolute De\ufb01nitions\" (http://research.microsoft.com/~gurevich/O\npera/164.pdf) (PDF). Bulletin of European Association for\nTheoretical Computer Science. 81. Archived (https://ghostarchiv\ne.org/archive/20221009/http://research.microsoft.com/~gurevich/\nOpera/164.pdf) (PDF) from the original on October 9, 2022.\nIncludes a bibliography of 56 references.\nBolter, David J. (1984). Turing's Man: Western Culture in the\nComputer Age (1984\u00a0ed.). Chapel Hill, NC: The University of\nNorth Carolina Press. ISBN\u00a0978-0-8078-1564-9., ISBN\u00a00-8078-\n4108-0\nBoolos, George; Jeffrey, Richard (1999) [1974]. Computability\nand Logic (https://archive.org/details/computabilitylog0000bool_r\n8y9) (4th\u00a0ed.). Cambridge University Press, London. ISBN\u00a0978-0-\n521-20402-6.: cf. Chapter 3 Turing machines where they discuss\n\"certain enumerable sets not effectively (mechanically)\nenumerable\".\nBurgin, Mark (2004). Super-Recursive Algorithms. Springer.\nISBN\u00a0978-0-387-95569-8.\nCampagnolo, M.L., Moore, C., and Costa, J.F. (2000) An analog\ncharacterization of the subrecursive functions. In Proc. of the 4th\nConference on Real Numbers and Computers, Odense\nUniversity, pp.\u00a091\u2013109\nChurch, Alonzo (1936). \"An Unsolvable Problem of Elementary\nNumber Theory\". American Journal of Mathematics. 58 (2): 345\u2013\n363. doi:10.2307/2371045 (https://doi.org/10.2307%2F2371045).\nJSTOR\u00a02371045 (https://www.jstor.org/stable/2371045).\nReprinted in The Undecidable, p.\u00a089ff. The \ufb01rst expression of\n\"Church's Thesis\". See in particular page 100 (The Undecidable)\nwhere he de\ufb01nes the notion of \"effective calculability\" in terms of\n\"an algorithm\", and he uses the word \"terminates\", etc.", "mimetype": "text/plain", "start_char_idx": 4508, "end_char_idx": 7465, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2a6a0a5f-f589-41ad-b2e3-1b3c93b6d575": {"__data__": {"id_": "2a6a0a5f-f589-41ad-b2e3-1b3c93b6d575", "embedding": null, "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e523414d-2c6a-44cd-a377-bd5f9e65889e", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "7ea41d7f3638c98124cc50a0ed3ad9ef236db462dc5436473237b16d4d4104d9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9385b1c4-79f8-4936-ab3b-cb3ae7caf3c5", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "88e2330fd60530313d7c1e3ff210362537f4ec114bc3af9906bbed6fcf40a178", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5528fedf-bc4c-4529-811f-3afd2d41471f", "node_type": "1", "metadata": {}, "hash": "a55d8ca7cb0b643282ad5efe43af929444ece486596b935da9b350a2a4af9af3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "In Proc. of the 4th\nConference on Real Numbers and Computers, Odense\nUniversity, pp.\u00a091\u2013109\nChurch, Alonzo (1936). \"An Unsolvable Problem of Elementary\nNumber Theory\". American Journal of Mathematics. 58 (2): 345\u2013\n363. doi:10.2307/2371045 (https://doi.org/10.2307%2F2371045).\nJSTOR\u00a02371045 (https://www.jstor.org/stable/2371045).\nReprinted in The Undecidable, p.\u00a089ff. The \ufb01rst expression of\n\"Church's Thesis\". See in particular page 100 (The Undecidable)\nwhere he de\ufb01nes the notion of \"effective calculability\" in terms of\n\"an algorithm\", and he uses the word \"terminates\", etc.\nChurch, Alonzo (1936). \"A Note on the Entscheidungsproblem\".\nThe Journal of Symbolic Logic. 1 (1): 40\u201341.\ndoi:10.2307/2269326 (https://doi.org/10.2307%2F2269326).\nJSTOR\u00a02269326 (https://www.jstor.org/stable/2269326).\nS2CID\u00a042323521 (https://api.semanticscholar.org/CorpusID:4232\n3521). Church, Alonzo (1936). \"Correction to a Note on the\nEntscheidungsproblem\". The Journal of Symbolic Logic. 1 (3):\n101\u2013102. doi:10.2307/2269030 (https://doi.org/10.2307%2F2269\n030). JSTOR\u00a02269030 (https://www.jstor.org/stable/2269030).\nS2CID\u00a05557237 (https://api.semanticscholar.org/CorpusID:55572\n37). Reprinted in The Undecidable, p.\u00a0110ff. Church shows that\nthe Entscheidungsproblem is unsolvable in about 3 pages of text\nand 3 pages of footnotes.\nDaffa', Ali Abdullah al- (1977). The Muslim contribution to\nmathematics. London: Croom Helm. ISBN\u00a0978-0-85664-464-1.\nDavis, Martin (1965). The Undecidable: Basic Papers On\nUndecidable Propositions, Unsolvable Problems and\nComputable Functions (https://archive.org/details/undecidableba\nsic0000davi). New York: Raven Press. ISBN\u00a0978-0-486-43228-1.\nDavis gives commentary before each article. Papers of G\u00f6del,\nAlonzo Church, Turing, Rosser, Kleene, and Emil Post are\nincluded; those cited in the article are listed here by author's\nname.\nDavis, Martin (2000). Engines of Logic: Mathematicians and the\nOrigin of the Computer. New York: W.W. Nortion. ISBN\u00a0978-0-\n393-32229-3. Davis offers concise biographies of Leibniz, Boole,\nFrege, Cantor, Hilbert, G\u00f6del and Turing with von Neumann as\nthe show-stealing villain. Very brief bios of Joseph-Marie\nJacquard, Babbage, Ada Lovelace, Claude Shannon, Howard\nAiken, etc.\n\u00a0This article incorporates public domain material from Paul E.\nBlack. \"algorithm\" (https://xlinux.nist.gov/dads/HTML/algorithm.ht\nml). Dictionary of Algorithms and Data Structures. NIST.\nDean, Tim (2012). \"Evolution and moral diversity\" (https://doi.org/\n10.4148%2Fbiyclc.v7i0.1775). Baltic International Yearbook of\nCognition, Logic and Communication. 7.\ndoi:10.4148/biyclc.v7i0.1775 (https://doi.org/10.4148%2Fbiyclc.v\n7i0.1775).\nDennett, Daniel (1995). Darwin's Dangerous Idea (https://archiv\ne.org/details/darwinsdangerous0000denn). New York:\nTouchstone/Simon & Schuster. pp.\u00a032 (https://archive.org/details/\ndarwinsdangerous0000denn/page/32)\u201336. ISBN\u00a0978-0-684-\n80290-9.\nDilson, Jesse (2007).", "mimetype": "text/plain", "start_char_idx": 6886, "end_char_idx": 9810, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5528fedf-bc4c-4529-811f-3afd2d41471f": {"__data__": {"id_": "5528fedf-bc4c-4529-811f-3afd2d41471f", "embedding": null, "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e523414d-2c6a-44cd-a377-bd5f9e65889e", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "7ea41d7f3638c98124cc50a0ed3ad9ef236db462dc5436473237b16d4d4104d9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2a6a0a5f-f589-41ad-b2e3-1b3c93b6d575", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "47edc8eb71d0925bd81b0d688787fd5dc7527d525e70a117e3cdbf26396224b5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a757ebb5-8102-48f1-89fd-66846b69056f", "node_type": "1", "metadata": {}, "hash": "7a5b4068e3af04a6db0f065419d2fbfe1e532242574fd2810c47ddd7a1d29831", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "NIST.\nDean, Tim (2012). \"Evolution and moral diversity\" (https://doi.org/\n10.4148%2Fbiyclc.v7i0.1775). Baltic International Yearbook of\nCognition, Logic and Communication. 7.\ndoi:10.4148/biyclc.v7i0.1775 (https://doi.org/10.4148%2Fbiyclc.v\n7i0.1775).\nDennett, Daniel (1995). Darwin's Dangerous Idea (https://archiv\ne.org/details/darwinsdangerous0000denn). New York:\nTouchstone/Simon & Schuster. pp.\u00a032 (https://archive.org/details/\ndarwinsdangerous0000denn/page/32)\u201336. ISBN\u00a0978-0-684-\n80290-9.\nDilson, Jesse (2007). The Abacus (https://archive.org/details/aba\ncusworlds\ufb01rs0000dils) ((1968, 1994)\u00a0ed.). St. Martin's Press, NY.\nISBN\u00a0978-0-312-10409-2., ISBN\u00a00-312-10409-X\nYuri Gurevich, Sequential Abstract State Machines Capture\nSequential Algorithms (http://citeseerx.ist.psu.edu/viewdoc/downl\noad?doi=10.1.1.146.3017&rep=rep1&type=pdf), ACM\nTransactions on Computational Logic, Vol 1, no 1 (July 2000),\npp.\u00a077\u2013111. Includes bibliography of 33 sources.\nvan Heijenoort, Jean (2001). From Frege to G\u00f6del, A Source\nBook in Mathematical Logic, 1879\u20131931 ((1967)\u00a0ed.). Harvard\nUniversity Press, Cambridge. ISBN\u00a0978-0-674-32449-7., 3rd\nedition 1976[?], ISBN\u00a00-674-32449-8 (pbk.)\nHodges, Andrew (1983). Alan Turing: The Enigma. New York:\nSimon and Schuster. ISBN\u00a0978-0-671-49207-6., ISBN\u00a00-671-\n49207-1. Cf. Chapter \"The Spirit of Truth\" for a history leading to,\nand a discussion of, his proof.\nKleene, Stephen C. (1936). \"General Recursive Functions of\nNatural Numbers\" (https://web.archive.org/web/2014090309212\n1/http://gdz.sub.uni-goettingen.de/index.php?id=11&PPN=GDZP\nPN002278499&L=1). Mathematische Annalen. 112 (5): 727\u2013742.\ndoi:10.1007/BF01565439 (https://doi.org/10.1007%2FBF015654\n39). S2CID\u00a0120517999 (https://api.semanticscholar.org/CorpusI\nD:120517999). Archived from the original (http://gdz.sub.uni-goet\ntingen.de/index.php?id=11&PPN=GDZPPN002278499&L=1) on\nSeptember 3, 2014. Retrieved September 30, 2013. Presented\nto the American Mathematical Society, September 1935.\nReprinted in The Undecidable, p.\u00a0237ff. Kleene's de\ufb01nition of\n\"general recursion\" (known now as mu-recursion) was used by\nChurch in his 1935 paper An Unsolvable Problem of Elementary\nNumber Theory that proved the \"decision problem\" to be\n\"undecidable\" (i.e., a negative result).\nKleene, Stephen C. (1943). \"Recursive Predicates and\nQuanti\ufb01ers\" (https://doi.org/10.2307%2F1990131). Transactions\nof the American Mathematical Society. 53 (1): 41\u201373.\ndoi:10.2307/1990131 (https://doi.org/10.2307%2F1990131).\nJSTOR\u00a01990131 (https://www.jstor.org/stable/1990131).\nReprinted in The Undecidable, p.\u00a0255ff. Kleene re\ufb01ned his\nde\ufb01nition of \"general recursion\" and proceeded in his chapter\n\"12. Algorithmic theories\" to posit \"Thesis I\" (p.", "mimetype": "text/plain", "start_char_idx": 9294, "end_char_idx": 12004, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a757ebb5-8102-48f1-89fd-66846b69056f": {"__data__": {"id_": "a757ebb5-8102-48f1-89fd-66846b69056f", "embedding": null, "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e523414d-2c6a-44cd-a377-bd5f9e65889e", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "7ea41d7f3638c98124cc50a0ed3ad9ef236db462dc5436473237b16d4d4104d9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5528fedf-bc4c-4529-811f-3afd2d41471f", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "d23dd3016044fe95704b89795bc8210a0f23514f511ce43958e8730c4099dec2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d8963dee-44dd-43c1-b880-45b3fe6ab17b", "node_type": "1", "metadata": {}, "hash": "e540894c10e6760427b5904a15b6700ea939cdf8a348c32e0518dbd9c913190b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Kleene, Stephen C. (1943). \"Recursive Predicates and\nQuanti\ufb01ers\" (https://doi.org/10.2307%2F1990131). Transactions\nof the American Mathematical Society. 53 (1): 41\u201373.\ndoi:10.2307/1990131 (https://doi.org/10.2307%2F1990131).\nJSTOR\u00a01990131 (https://www.jstor.org/stable/1990131).\nReprinted in The Undecidable, p.\u00a0255ff. Kleene re\ufb01ned his\nde\ufb01nition of \"general recursion\" and proceeded in his chapter\n\"12. Algorithmic theories\" to posit \"Thesis I\" (p.\u00a0274); he would\nlater repeat this thesis (in Kleene 1952:300) and name it\n\"Church's Thesis\"(Kleene 1952:317) (i.e., the Church thesis).\nKleene, Stephen C. (1991) [1952]. Introduction to\nMetamathematics (Tenth\u00a0ed.). North-Holland Publishing\nCompany. ISBN\u00a0978-0-7204-2103-3.\nKnuth, Donald (1997). Fundamental Algorithms, Third Edition.\nReading, Massachusetts: Addison\u2013Wesley. ISBN\u00a0978-0-201-\n89683-1.\nKnuth, Donald (1969). Volume 2/Seminumerical Algorithms, The\nArt of Computer Programming First Edition. Reading,\nMassachusetts: Addison\u2013Wesley.\nKosovsky, N.K. Elements of Mathematical Logic and its\nApplication to the theory of Subrecursive Algorithms, LSU Publ.,\nLeningrad, 1981\nKowalski, Robert (1979). \"Algorithm=Logic+Control\" (https://doi.o\nrg/10.1145%2F359131.359136). Communications of the ACM.\n22 (7): 424\u2013436. doi:10.1145/359131.359136 (https://doi.org/10.\n1145%2F359131.359136). S2CID\u00a02509896 (https://api.semantic\nscholar.org/CorpusID:2509896).\nA.A. Markov (1954) Theory of algorithms. [Translated by\nJacques J. Schorr-Kon and PST staff] Imprint Moscow, Academy\nof Sciences of the USSR, 1954 [i.e., Jerusalem, Israel Program\nfor Scienti\ufb01c Translations, 1961; available from the Of\ufb01ce of\nTechnical Services, U.S. Dept. of Commerce, Washington]\nDescription 444 p.\u00a028\u00a0cm. Added t.p. in Russian Translation of\nWorks of the Mathematical Institute, Academy of Sciences of the\nUSSR, v.\u00a042. Original title: Teoriya algerifmov. [QA248.M2943\nDartmouth College library. U.S. Dept. of Commerce, Of\ufb01ce of\nTechnical Services, number OTS 60-51085.]\nMinsky, Marvin (1967). Computation: Finite and In\ufb01nite Machines\n(https://archive.org/details/computation\ufb01nit0000mins) (First\u00a0ed.).\nPrentice-Hall, Englewood Cliffs, NJ. ISBN\u00a0978-0-13-165449-5.\nMinsky expands his \"...idea of an algorithm \u2013 an effective\nprocedure...\" in chapter 5.1 Computability, Effective Procedures\nand Algorithms. In\ufb01nite machines.\nPost, Emil (1936). \"Finite Combinatory Processes, Formulation\nI\". The Journal of Symbolic Logic. 1 (3): 103\u2013105.\ndoi:10.2307/2269031 (https://doi.org/10.2307%2F2269031).\nJSTOR\u00a02269031 (https://www.jstor.org/stable/2269031).\nS2CID\u00a040284503 (https://api.semanticscholar.org/CorpusID:4028\n4503). Reprinted in The Undecidable, pp.\u00a0289ff. Post de\ufb01nes a\nsimple algorithmic-like process of a man writing marks or erasing\nmarks and going from box to box and eventually halting, as he\nfollows a list of simple instructions. This is cited by Kleene as one\nsource of his \"Thesis I\", the so-called Church\u2013Turing thesis.", "mimetype": "text/plain", "start_char_idx": 11555, "end_char_idx": 14504, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d8963dee-44dd-43c1-b880-45b3fe6ab17b": {"__data__": {"id_": "d8963dee-44dd-43c1-b880-45b3fe6ab17b", "embedding": null, "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e523414d-2c6a-44cd-a377-bd5f9e65889e", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "7ea41d7f3638c98124cc50a0ed3ad9ef236db462dc5436473237b16d4d4104d9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a757ebb5-8102-48f1-89fd-66846b69056f", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "4fb44ea8a1a15c08c88e3ecfbb2d9cb665976fb7e303a0005e873b2e304cd027", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "90ac22ba-d236-4f08-b3b0-60962d28c851", "node_type": "1", "metadata": {}, "hash": "3cfe41376039c4305735d02bd917edff3906a9283b9673634a7c96b85ea83089", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Post, Emil (1936). \"Finite Combinatory Processes, Formulation\nI\". The Journal of Symbolic Logic. 1 (3): 103\u2013105.\ndoi:10.2307/2269031 (https://doi.org/10.2307%2F2269031).\nJSTOR\u00a02269031 (https://www.jstor.org/stable/2269031).\nS2CID\u00a040284503 (https://api.semanticscholar.org/CorpusID:4028\n4503). Reprinted in The Undecidable, pp.\u00a0289ff. Post de\ufb01nes a\nsimple algorithmic-like process of a man writing marks or erasing\nmarks and going from box to box and eventually halting, as he\nfollows a list of simple instructions. This is cited by Kleene as one\nsource of his \"Thesis I\", the so-called Church\u2013Turing thesis.\nRogers, Hartley Jr. (1987). Theory of Recursive Functions and\nEffective Computability. The MIT Press. ISBN\u00a0978-0-262-68052-\n3.\nRosser, J.B. (1939). \"An Informal Exposition of Proofs of Godel's\nTheorem and Church's Theorem\". Journal of Symbolic Logic. 4\n(2): 53\u201360. doi:10.2307/2269059 (https://doi.org/10.2307%2F226\n9059). JSTOR\u00a02269059 (https://www.jstor.org/stable/2269059).\nS2CID\u00a039499392 (https://api.semanticscholar.org/CorpusID:3949\n9392). Reprinted in The Undecidable, p.\u00a0223ff. Herein is Rosser's\nfamous de\ufb01nition of \"effective method\": \"...a method each step of\nwhich is precisely predetermined and which is certain to produce\nthe answer in a \ufb01nite number of steps... a machine which will\nthen solve any problem of the set with no human intervention\nbeyond inserting the question and (later) reading the answer\"\n(p.\u00a0225\u2013226, The Undecidable)\nSantos-Lang, Christopher (2015). \"Moral Ecology Approaches to\nMachine Ethics\" (http://grinfree.com/MoralEcology.pdf) (PDF). In\nvan Rysewyk, Simon; Pontier, Matthijs (eds.). Machine Medical\nEthics. Intelligent Systems, Control and Automation: Science and\nEngineering. Vol.\u00a074. Switzerland: Springer. pp.\u00a0111\u2013127.\ndoi:10.1007/978-3-319-08108-3_8 (https://doi.org/10.1007%2F9\n78-3-319-08108-3_8). ISBN\u00a0978-3-319-08107-6. Archived (http\ns://ghostarchive.org/archive/20221009/http://grinfree.com/MoralE\ncology.pdf) (PDF) from the original on October 9, 2022.\nScott, Michael L. (2009). Programming Language Pragmatics\n(3rd\u00a0ed.). Morgan Kaufmann Publishers/Elsevier. ISBN\u00a0978-0-12-\n374514-9.\nSipser, Michael (2006). Introduction to the Theory of\nComputation (https://archive.org/details/introductiontoth00sips).\nPWS Publishing Company. ISBN\u00a0978-0-534-94728-6.\nSober, Elliott; Wilson, David Sloan (1998). Unto Others: The\nEvolution and Psychology of Unsel\ufb01sh Behavior (https://archive.o\nrg/details/untoothersevolut00sobe). Cambridge: Harvard\nUniversity Press. ISBN\u00a09780674930469.\nStone, Harold S. (1971). Introduction to Computer Organization\nand Data Structures. McGraw-Hill, New York.\nISBN\u00a09780070617261. Cf. in particular the \ufb01rst chapter titled:\nAlgorithms, Turing Machines, and Programs. His succinct\ninformal de\ufb01nition: \"...any sequence of instructions that can be\nobeyed by a robot, is called an algorithm\" (p.\u00a04).\nTausworthe, Robert C (1977). Standardized Development of\nComputer Software Part 1 Methods. Englewood Cliffs NJ:\nPrentice\u2013Hall, Inc.", "mimetype": "text/plain", "start_char_idx": 13897, "end_char_idx": 16901, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "90ac22ba-d236-4f08-b3b0-60962d28c851": {"__data__": {"id_": "90ac22ba-d236-4f08-b3b0-60962d28c851", "embedding": null, "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e523414d-2c6a-44cd-a377-bd5f9e65889e", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "7ea41d7f3638c98124cc50a0ed3ad9ef236db462dc5436473237b16d4d4104d9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d8963dee-44dd-43c1-b880-45b3fe6ab17b", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "ab625253e2551445364e4914514e8a2799f2254885d533e9386f572e165c31c3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unto Others: The\nEvolution and Psychology of Unsel\ufb01sh Behavior (https://archive.o\nrg/details/untoothersevolut00sobe). Cambridge: Harvard\nUniversity Press. ISBN\u00a09780674930469.\nStone, Harold S. (1971). Introduction to Computer Organization\nand Data Structures. McGraw-Hill, New York.\nISBN\u00a09780070617261. Cf. in particular the \ufb01rst chapter titled:\nAlgorithms, Turing Machines, and Programs. His succinct\ninformal de\ufb01nition: \"...any sequence of instructions that can be\nobeyed by a robot, is called an algorithm\" (p.\u00a04).\nTausworthe, Robert C (1977). Standardized Development of\nComputer Software Part 1 Methods. Englewood Cliffs NJ:\nPrentice\u2013Hall, Inc. ISBN\u00a0978-0-13-842195-3.\nBibliography\n6/7/25, 7:30 PM Algorithm - Wikipedia\nhttps://en.wikipedia.org/wiki/Algorithm 4/5", "mimetype": "text/plain", "start_char_idx": 16253, "end_char_idx": 17020, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4359040f-c29e-49c3-81b1-f08e07cc1aa5": {"__data__": {"id_": "4359040f-c29e-49c3-81b1-f08e07cc1aa5", "embedding": null, "metadata": {"page_label": "5", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4a450406-d4ab-4c59-afa1-572c12cbf7f1", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "bb5a6a798ea4c0b197bee5aad572c64289a602237e9154c97beab1cb2b7e3390", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3ba63a2b-041d-4a4d-8f57-af2f6a4b219d", "node_type": "1", "metadata": {}, "hash": "627d0f9865af8aedd57d85878c236f9af3029ea276bc0f38247bc0fbcebffc05", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Turing, Alan M. (1936\u201337). \"On Computable Numbers, With An\nApplication to the Entscheidungsproblem\". Proceedings of the\nLondon Mathematical Society. Series 2. 42: 230\u2013265.\ndoi:10.1112/plms/s2-42.1.230 (https://doi.org/10.1112%2Fplms%\n2Fs2-42.1.230). S2CID\u00a073712 (https://api.semanticscholar.org/C\norpusID:73712).. Corrections, ibid, vol. 43(1937) pp.\u00a0544\u2013546.\nReprinted in The Undecidable, p.\u00a0116ff. Turing's famous paper\ncompleted as a Master's dissertation while at King's College\nCambridge UK.\nTuring, Alan M. (1939). \"Systems of Logic Based on Ordinals\".\nProceedings of the London Mathematical Society. 45: 161\u2013228.\ndoi:10.1112/plms/s2-45.1.161 (https://doi.org/10.1112%2Fplms%\n2Fs2-45.1.161). hdl:21.11116/0000-0001-91CE-3 (https://hdl.han\ndle.net/21.11116%2F0000-0001-91CE-3). Reprinted in The\nUndecidable, pp.\u00a0155ff. Turing's paper that de\ufb01ned \"the oracle\"\nwas his PhD thesis while at Princeton.\nUnited States Patent and Trademark Of\ufb01ce (2006), 2106.02\n**>Mathematical Algorithms: 2100 Patentability (http://www.uspt\no.gov/web/of\ufb01ces/pac/mpep/documents/2100_2106_02.htm),\nManual of Patent Examining Procedure (MPEP). Latest revision\nAugust 2006\nZaslavsky, C. (1970). Mathematics of the Yoruba People and of Their Neighbors in Southern Nigeria. The Two-Year College Mathematics Journal, 1(2), 76\u201399. https://doi.org/10.2307/3027363\nBellah, Robert Neelly (1985). Habits of the Heart: Individualism and Commitment in American Life (https://books.google.com/books?id=XsUojihVZQcC). Berkeley: University of California Press. ISBN\u00a0978-0-\n520-25419-0.\nBerlinski, David (2001). The Advent of the Algorithm: The 300-Year Journey from an Idea to the Computer (https://archive.org/details/adventofalgorith0000berl). Harvest Books. ISBN\u00a0978-0-15-601391-8.\nChabert, Jean-Luc (1999). A History of Algorithms: From the Pebble to the Microchip. Springer Verlag. ISBN\u00a0978-3-540-63369-3.\nThomas H. Cormen; Charles E. Leiserson; Ronald L. Rivest; Clifford Stein (2009). Introduction To Algorithms (3rd\u00a0ed.). MIT Press. ISBN\u00a0978-0-262-03384-8.\nHarel, David; Feldman, Yishai (2004). Algorithmics: The Spirit of Computing. Addison-Wesley. ISBN\u00a0978-0-321-11784-7.\nHertzke, Allen D.; McRorie, Chris (1998). \"The Concept of Moral Ecology\". In Lawler, Peter Augustine; McConkey, Dale (eds.). Community and Political Thought Today. Westport, CT: Praeger.\nJon Kleinberg, \u00c9va Tardos(2006): Algorithm Design, Pearson/Addison-Wesley, ISBN 978-0-32129535-4\nKnuth, Donald E. (2000). Selected Papers on Analysis of Algorithms (http://www-cs-faculty.stanford.edu/~uno/aa.html) Archived (https://web.archive.org/web/20170701190647/http://www-cs-faculty.stanford.ed\nu/~uno/aa.html) July 1, 2017, at the Wayback Machine. Stanford, California: Center for the Study of Language and Information.\nKnuth, Donald E. (2010).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2786, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3ba63a2b-041d-4a4d-8f57-af2f6a4b219d": {"__data__": {"id_": "3ba63a2b-041d-4a4d-8f57-af2f6a4b219d", "embedding": null, "metadata": {"page_label": "5", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4a450406-d4ab-4c59-afa1-572c12cbf7f1", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "bb5a6a798ea4c0b197bee5aad572c64289a602237e9154c97beab1cb2b7e3390", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4359040f-c29e-49c3-81b1-f08e07cc1aa5", "node_type": "1", "metadata": {"page_label": "5", "file_name": "Algorithm - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Algorithm - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1116832, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "8f43738414c0d1490d5683b10825b9b435e6e9c607d055e296814c27805d0188", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Hertzke, Allen D.; McRorie, Chris (1998). \"The Concept of Moral Ecology\". In Lawler, Peter Augustine; McConkey, Dale (eds.). Community and Political Thought Today. Westport, CT: Praeger.\nJon Kleinberg, \u00c9va Tardos(2006): Algorithm Design, Pearson/Addison-Wesley, ISBN 978-0-32129535-4\nKnuth, Donald E. (2000). Selected Papers on Analysis of Algorithms (http://www-cs-faculty.stanford.edu/~uno/aa.html) Archived (https://web.archive.org/web/20170701190647/http://www-cs-faculty.stanford.ed\nu/~uno/aa.html) July 1, 2017, at the Wayback Machine. Stanford, California: Center for the Study of Language and Information.\nKnuth, Donald E. (2010). Selected Papers on Design of Algorithms (http://www-cs-faculty.stanford.edu/~uno/da.html) Archived (https://web.archive.org/web/20170716225848/http://www-cs-faculty.stanford.ed\nu/~uno/da.html) July 16, 2017, at the Wayback Machine. Stanford, California: Center for the Study of Language and Information.\nWallach, Wendell; Allen, Colin (November 2008). Moral Machines: Teaching Robots Right from Wrong. US: Oxford University Press. ISBN\u00a0978-0-19-537404-9.\nBleakley, Chris (2020). Poems that Solve Puzzles: The History and Science of Algorithms (https://books.google.com/books?id=3pr5DwAAQBAJ). Oxford University Press. ISBN\u00a0978-0-19-885373-2.\n\"Algorithm\" (https://www.encyclopediaofmath.org/index.php?title=Algorithm). Encyclopedia of Mathematics. EMS Press. 2001 [1994].\nWeisstein, Eric W. \"Algorithm\" (https://mathworld.wolfram.com/Algorithm.html). MathWorld.\nDictionary of Algorithms and Data Structures (https://www.nist.gov/dads/) \u2013 National Institute of Standards and Technology\nAlgorithm repositories\nThe Stony Brook Algorithm Repository (http://www.cs.sunysb.edu/~algorith/) \u2013 State University of New York at Stony Brook\nCollected Algorithms of the ACM (http://calgo.acm.org/) \u2013 Associations for Computing Machinery\nThe Stanford GraphBase (http://www-cs-staff.stanford.edu/~knuth/sgb.html) Archived (https://web.archive.org/web/20151206222112/http://www-cs-staff.stanford.edu/%7Eknuth/sgb.html) December 6, 2015,\nat the Wayback Machine \u2013 Stanford University\nRetrieved from \"https://en.wikipedia.org/w/index.php?title=Algorithm&oldid=1294265930\"\nFurther reading\nExternal links\n6/7/25, 7:30 PM Algorithm - Wikipedia\nhttps://en.wikipedia.org/wiki/Algorithm 5/5", "mimetype": "text/plain", "start_char_idx": 2148, "end_char_idx": 4451, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4ced5a62-c424-4440-8e17-8564a7694f47": {"__data__": {"id_": "4ced5a62-c424-4440-8e17-8564a7694f47", "embedding": null, "metadata": {"page_label": "1", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "740f7246-5510-4f72-ae99-deb0de5eb6a6", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "0c73bcf228a2261840871cbbd96b653bfb112e8d454475445526a71027a09861", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "67b391ca-02ae-43ff-a98c-6a7d81941e0c", "node_type": "1", "metadata": {}, "hash": "15e2b9fe75d6770f3e768e7467ee88d231bbd7cac37e156086c7380dca05c242", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Fundamental areas of computer science\nProgramming language\ntheory\nComputer\narchitecture\nArti\ufb01cial intelligence\n Computational\ncomplexity theory\nGottfried Wilhelm Leibniz\n(1646\u20131716) developed\nlogic in a binary number\nsystem and has been\ncalled the \"founder of\ncomputer science\".[ 1 3 ] \nCharles Babbage is sometimes\nreferred to as the \"father of\ncomputing\".[ 1 4 ] \nAda Lovelace published the\n\ufb01rst algorithm intended for\nprocessing on a computer.[ 1 5 ] \nComputer science\nComputer science is the study of computation, information, and automation.[1][2][3] Computer science spans theoretical disciplines (such as algorithms, theory of\ncomputation, and information theory) to applied disciplines (including the design and implementation of hardware and software).[4][5][6]\nAlgorithms and data structures are central to computer science.[7] The theory of computation concerns abstract models of computation and general classes of\nproblems that can be solved using them. The fields of cryptography and computer security involve studying the means for secure communication and preventing\nsecurity vulnerabilities. Computer graphics and computational geometry address the generation of images. Programming language theory considers different ways to\ndescribe computational processes, and database theory concerns the management of repositories of data. Human\u2013computer interaction investigates the interfaces\nthrough which humans and computers interact, and software engineering focuses on the design and principles behind developing software. Areas such as operating\nsystems, networks and embedded systems investigate the principles and design behind complex systems. Computer architecture describes the construction of\ncomputer components and computer-operated equipment. Artificial intelligence and machine learning aim to synthesize goal-orientated processes such as problem-\nsolving, decision-making, environmental adaptation, planning and learning found in humans and animals. Within artificial intelligence, computer vision aims to\nunderstand and process image and video data, while natural language processing aims to understand and process textual and linguistic data.\nThe fundamental concern of computer science is determining what can and cannot be automated.[2][8][3][9][10] The Turing Award is generally recognized as the\nhighest distinction in computer science.[11][12]\nThe earliest foundations of what would become computer science predate the invention of the modern digital computer. Machines for calculating fixed numerical tasks such as the\nabacus have existed since antiquity, aiding in computations such as multiplication and division. Algorithms for performing computations have existed since antiquity, even before the\ndevelopment of sophisticated computing equipment.[16]\nWilhelm Schickard designed and constructed the first working mechanical calculator in 1623.[17] In 1673, Gottfried Leibniz demonstrated a digital mechanical calculator, called the\nStepped Reckoner.[18] Leibniz may be considered the first computer scientist and information theorist, because of various reasons, including the fact that he documented the binary\nnumber system. In 1820, Thomas de Colmar launched the mechanical calculator industry[note 1] when he invented his simplified arithmometer, the first calculating machine strong\nenough and reliable enough to be used daily in an office environment. Charles Babbage started the design of the first automatic mechanical calculator, his Difference Engine, in 1822,\nwhich eventually gave him the idea of the first programmable mechanical calculator, his Analytical Engine.[19] He started developing this machine in 1834, and \"in less than two years,\nhe had sketched out many of the salient features of the modern computer\".[20] \"A crucial step was the adoption of a punched card system derived from the Jacquard loom\"[20] making it\ninfinitely programmable.[note 2] In 1843, during the translation of a French article on the Analytical Engine, Ada Lovelace wrote, in one of the many notes she included, an algorithm to\ncompute the Bernoulli numbers, which is considered to be the first published algorithm ever specifically tailored for implementation on a computer.[21] Around 1885, Herman Hollerith\ninvented the tabulator, which used punched cards to process statistical information; eventually his company became part of IBM. Following Babbage, although unaware of his earlier\nwork, Percy Ludgate in 1909 published[22] the 2nd of the only two designs for mechanical analytical engines in history. In 1914, the Spanish engineer Leonardo Torres Quevedo\npublished his Essays on Automatics,[23] and designed, inspired by Babbage, a theoretical electromechanical calculating machine which was to be controlled by a read-only program. The\npaper also introduced the idea of floating-point arithmetic.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4837, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "67b391ca-02ae-43ff-a98c-6a7d81941e0c": {"__data__": {"id_": "67b391ca-02ae-43ff-a98c-6a7d81941e0c", "embedding": null, "metadata": {"page_label": "1", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "740f7246-5510-4f72-ae99-deb0de5eb6a6", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "0c73bcf228a2261840871cbbd96b653bfb112e8d454475445526a71027a09861", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4ced5a62-c424-4440-8e17-8564a7694f47", "node_type": "1", "metadata": {"page_label": "1", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "975e873b1cfc83263c563bf9805767c1edb20229ab95dc10bd8fae4ec8897cbd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "50bb5630-c338-48ea-81e4-5cc94796c746", "node_type": "1", "metadata": {}, "hash": "ba7e1352edf5e5316fcf94393a4473520b17899d7d16f84fce4aa9d7e377e397", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "[21] Around 1885, Herman Hollerith\ninvented the tabulator, which used punched cards to process statistical information; eventually his company became part of IBM. Following Babbage, although unaware of his earlier\nwork, Percy Ludgate in 1909 published[22] the 2nd of the only two designs for mechanical analytical engines in history. In 1914, the Spanish engineer Leonardo Torres Quevedo\npublished his Essays on Automatics,[23] and designed, inspired by Babbage, a theoretical electromechanical calculating machine which was to be controlled by a read-only program. The\npaper also introduced the idea of floating-point arithmetic.[24][25] In 1920, to celebrate the 100th anniversary of the invention of the arithmometer, Torres presented in Paris the\nElectromechanical Arithmometer, a prototype that demonstrated the feasibility of an electromechanical analytical engine,[26] on which commands could be typed and the results\nprinted automatically.[27] In 1937, one hundred years after Babbage's impossible dream, Howard Aiken convinced IBM, which was making all kinds of punched card equipment and\nwas also in the calculator business[28] to develop his giant programmable calculator, the ASCC/Harvard Mark I, based on Babbage's Analytical Engine, which itself used cards and a\ncentral computing unit. When the machine was finished, some hailed it as \"Babbage's dream come true\".[29]\nDuring the 1940s, with the development of new and more powerful computing machines such as the Atanasoff\u2013Berry computer and ENIAC, the term computer came to refer to the\nmachines rather than their human predecessors.[30] As it became clear that computers could be used for more than just mathematical calculations, the field of computer science\nbroadened to study computation in general. In 1945, IBM founded the Watson Scientific Computing Laboratory at Columbia University in New York City. The renovated fraternity\nhouse on Manhattan's West Side was IBM's first laboratory devoted to pure science. The lab is the forerunner of IBM's Research Division, which today operates research facilities\naround the world.[31] Ultimately, the close relationship between IBM and Columbia University was instrumental in the emergence of a new scientific discipline, with Columbia\noffering one of the first academic-credit courses in computer science in 1946.[32] Computer science began to be established as a distinct academic discipline in the 1950s and early\n1960s.[33][34] The world's first computer science degree program, the Cambridge Diploma in Computer Science, began at the University of Cambridge Computer Laboratory in 1953.\nThe first computer science department in the United States was formed at Purdue University in 1962.[35] Since practical computers became available, many applications of\ncomputing have become distinct areas of study in their own rights.\nAlthough first proposed in 1956,[36] the term \"computer science\" appears in a 1959 article in Communications of the ACM,[37] in which Louis Fein argues for the creation of a\nGraduate School in Computer Sciences analogous to the creation of Harvard Business School in 1921.[38] Louis justifies the name by arguing that, like management science, the\nsubject is applied and interdisciplinary in nature, while having the characteristics typical of an academic discipline.[37] His efforts, and those of others such as numerical analyst\nGeorge Forsythe, were rewarded: universities went on to create such departments, starting with Purdue in 1962.[39] Despite its name, a significant amount of computer science does\nnot involve the study of computers themselves. Because of this, several alternative names have been proposed.[40] Certain departments of major universities prefer the term\ncomputing science, to emphasize precisely that difference. Danish scientist Peter Naur suggested the term datalogy,[41] to reflect the fact that the scientific discipline revolves\naround data and data treatment, while not necessarily involving computers. The first scientific institution to use the term was the Department of Datalogy at the University of\nCopenhagen, founded in 1969, with Peter Naur being the first professor in datalogy. The term is used mainly in the Scandinavian countries. An alternative term, also proposed by\nNaur, is data science; this is now used for a multi-disciplinary field of data analysis, including statistics and databases.\nIn the early days of computing, a number of terms for the practitioners of the field of computing were suggested (albeit facetiously) in the Communications of the ACM\u2014\nturingineer, turologist, flow-charts-man, applied meta-mathematician, and applied epistemologist.", "mimetype": "text/plain", "start_char_idx": 4207, "end_char_idx": 8856, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "50bb5630-c338-48ea-81e4-5cc94796c746": {"__data__": {"id_": "50bb5630-c338-48ea-81e4-5cc94796c746", "embedding": null, "metadata": {"page_label": "1", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "740f7246-5510-4f72-ae99-deb0de5eb6a6", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "0c73bcf228a2261840871cbbd96b653bfb112e8d454475445526a71027a09861", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "67b391ca-02ae-43ff-a98c-6a7d81941e0c", "node_type": "1", "metadata": {"page_label": "1", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "e7039126247e09086ec51c383628828fb0093de935e18b02e5b192be6766a0f2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Danish scientist Peter Naur suggested the term datalogy,[41] to reflect the fact that the scientific discipline revolves\naround data and data treatment, while not necessarily involving computers. The first scientific institution to use the term was the Department of Datalogy at the University of\nCopenhagen, founded in 1969, with Peter Naur being the first professor in datalogy. The term is used mainly in the Scandinavian countries. An alternative term, also proposed by\nNaur, is data science; this is now used for a multi-disciplinary field of data analysis, including statistics and databases.\nIn the early days of computing, a number of terms for the practitioners of the field of computing were suggested (albeit facetiously) in the Communications of the ACM\u2014\nturingineer, turologist, flow-charts-man, applied meta-mathematician, and applied epistemologist.[42] Three months later in the same journal, comptologist was suggested,\nfollowed next year by hypologist.[43] The term computics has also been suggested.[44] In Europe, terms derived from contracted translations of the expression \"automatic\ninformation\" (e.g. \"informazione automatica\" in Italian) or \"information and mathematics\" are often used, e.g. informatique (French), Informatik (German), informatica (Italian,\nDutch), inform\u00e1tica (Spanish, Portuguese), informatika (Slavic languages and Hungarian) or pliroforiki (\u03c0\u03bb\u03b7\u03c1\u03bf\u03c6\u03bf\u03c1\u03b9\u03ba\u03ae, which means informatics) in Greek. Similar words have also been adopted in the UK (as in\nthe School of Informatics, University of Edinburgh).[45] \"In the U.S., however, informatics is linked with applied computing, or computing in the context of another domain.\"[46]\nA folkloric quotation, often attributed to\u2014but almost certainly not first formulated by\u2014Edsger Dijkstra, states that \"computer science is no more about computers than astronomy is about telescopes.\"[note 3] The\ndesign and deployment of computers and computer systems is generally considered the province of disciplines other than computer science. For example, the study of computer hardware is usually considered\npart of computer engineering, while the study of commercial computer systems and their deployment is often called information technology or information systems. However, there has been exchange of ideas\nbetween the various computer-related disciplines. Computer science research also often intersects other disciplines, such as cognitive science, linguistics, mathematics, physics, biology, Earth science, statistics,\nphilosophy, and logic.\nComputer science is considered by some to have a much closer relationship with mathematics than many scientific disciplines, with some observers saying that computing is a mathematical science.[33] Early\ncomputer science was strongly influenced by the work of mathematicians such as Kurt G\u00f6del, Alan Turing, John von Neumann, R\u00f3zsa P\u00e9ter and Alonzo Church and there continues to be a useful interchange of\nideas between the two fields in areas such as mathematical logic, category theory, domain theory, and algebra.[36]\nThe relationship between computer science and software engineering is a contentious issue, which is further muddied by disputes over what the term \"software engineering\" means, and how computer science is\ndefined.[47] David Parnas, taking a cue from the relationship between other engineering and science disciplines, has claimed that the principal focus of computer science is studying the properties of computation\nin general, while the principal focus of software engineering is the design of specific computations to achieve practical goals, making the two separate but complementary disciplines.[48]\nThe academic, political, and funding aspects of computer science tend to depend on whether a department is formed with a mathematical emphasis or with an engineering emphasis. Computer science\ndepartments with a mathematics emphasis and with a numerical orientation consider alignment with computational science. Both types of departments tend to make efforts to bridge the field educationally if not\nacross all research.\nDespite the word science in its name, there is debate over whether or not computer science is a discipline of science,[49] mathematics,[50] or engineering.[51] Allen Newell and Herbert A. Simon argued in 1975,\nHistory\nEtymology and scope\nPhilosophy\nEpistemology of computer science\n6/7/25, 7:30 PM Computer science - Wikipedia\nhttps://en.wikipedia.org/wiki/Computer_science 1/6", "mimetype": "text/plain", "start_char_idx": 7992, "end_char_idx": 12439, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3318a198-619e-4f08-b91d-f47ee5844cba": {"__data__": {"id_": "3318a198-619e-4f08-b91d-f47ee5844cba", "embedding": null, "metadata": {"page_label": "2", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b17969f6-1bfc-4628-8e34-bd6ced6bd890", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "e3d669c097fa527fe58cebac2fa3aef6433231c9ebb4515b346dcba24463804f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0911f539-e849-49e4-9780-d7b6c3ec83ce", "node_type": "1", "metadata": {}, "hash": "f6b65cb4eeb83f724f7b86959670270f17f3cd37d2735559319776ff8448aba4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Computer science is an empirical discipline. We would have called it an experimental science, but like astronomy, economics, and geology, some of its unique forms of observation and experience do not\nfit a narrow stereotype of the experimental method. Nonetheless, they are experiments. Each new machine that is built is an experiment. Actually constructing the machine poses a question to nature;\nand we listen for the answer by observing the machine in operation and analyzing it by all analytical and measurement means available.[51]\nIt has since been argued that computer science can be classified as an empirical science since it makes use of empirical testing to evaluate the correctness of programs, but a problem remains in defining the laws\nand theorems of computer science (if any exist) and defining the nature of experiments in computer science.[51] Proponents of classifying computer science as an engineering discipline argue that the reliability of\ncomputational systems is investigated in the same way as bridges in civil engineering and airplanes in aerospace engineering.[51] They also argue that while empirical sciences observe what presently exists,\ncomputer science observes what is possible to exist and while scientists discover laws from observation, no proper laws have been found in computer science and it is instead concerned with creating\nphenomena.[51]\nProponents of classifying computer science as a mathematical discipline argue that computer programs are physical realizations of mathematical entities and programs that can be deductively reasoned through\nmathematical formal methods.[51] Computer scientists Edsger W. Dijkstra and Tony Hoare regard instructions for computer programs as mathematical sentences and interpret formal semantics for programming\nlanguages as mathematical axiomatic systems.[51]\nA number of computer scientists have argued for the distinction of three separate paradigms in computer science. Peter Wegner argued that those paradigms are science, technology, and mathematics.[52] Peter\nDenning's working group argued that they are theory, abstraction (modeling), and design.[33] Amnon H. Eden described them as the \"rationalist paradigm\" (which treats computer science as a branch of\nmathematics, which is prevalent in theoretical computer science, and mainly employs deductive reasoning), the \"technocratic paradigm\" (which might be found in engineering approaches, most prominently in\nsoftware engineering), and the \"scientific paradigm\" (which approaches computer-related artifacts from the empirical perspective of natural sciences,[53] identifiable in some branches of artificial intelligence).[54]\nComputer science focuses on methods involved in design, specification, programming, verification, implementation and testing of human-made computing systems.[55]\nAs a discipline, computer science spans a range of topics from theoretical studies of algorithms and the limits of computation to the practical issues of implementing computing systems in hardware and\nsoftware.[56][57] CSAB, formerly called Computing Sciences Accreditation Board\u2014which is made up of representatives of the Association for Computing Machinery (ACM), and the IEEE Computer Society (IEEE\nCS)[58]\u2014identifies four areas that it considers crucial to the discipline of computer science: theory of computation, algorithms and data structures, programming methodology and languages, and computer\nelements and architecture. In addition to these four areas, CSAB also identifies fields such as software engineering, artificial intelligence, computer networking and communication, database systems, parallel\ncomputation, distributed computation, human\u2013computer interaction, computer graphics, operating systems, and numerical and symbolic computation as being important areas of computer science.[56]\nTheoretical computer science is mathematical and abstract in spirit, but it derives its motivation from practical and everyday computation. It aims to understand the nature of computation and, as a consequence\nof this understanding, provide more efficient methodologies.\nAccording to Peter Denning, the fundamental question underlying computer science is, \"What can be automated?\"[3] Theory of computation is focused on answering fundamental questions about what can be\ncomputed and what amount of resources are required to perform those computations. In an effort to answer the first question, computability theory examines which computational problems are solvable on\nvarious theoretical models of computation. The second question is addressed by computational complexity theory, which studies the time and space costs associated with different approaches to solving a\nmultitude of computational problems.\nThe famous P = NP? problem, one of the Millennium Prize Problems,[59] is an open problem in the theory of computation.\nAutomata theory Formal languages Computability theoryComputational complexity theory\nModels of computationQuantum computing theoryLogic circuit theory Cellular automata\nInformation theory, closely related to probability and statistics, is related to the quantification of information. This was developed by Claude Shannon to find fundamental limits on signal processing operations\nsuch as compressing data and on reliably storing and communicating data.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 5313, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0911f539-e849-49e4-9780-d7b6c3ec83ce": {"__data__": {"id_": "0911f539-e849-49e4-9780-d7b6c3ec83ce", "embedding": null, "metadata": {"page_label": "2", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b17969f6-1bfc-4628-8e34-bd6ced6bd890", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "e3d669c097fa527fe58cebac2fa3aef6433231c9ebb4515b346dcba24463804f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3318a198-619e-4f08-b91d-f47ee5844cba", "node_type": "1", "metadata": {"page_label": "2", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "bda9093b2c9ad4428202c0c646ae38c25edff6544cb792f63ed57ba4bf0ba016", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\"[3] Theory of computation is focused on answering fundamental questions about what can be\ncomputed and what amount of resources are required to perform those computations. In an effort to answer the first question, computability theory examines which computational problems are solvable on\nvarious theoretical models of computation. The second question is addressed by computational complexity theory, which studies the time and space costs associated with different approaches to solving a\nmultitude of computational problems.\nThe famous P = NP? problem, one of the Millennium Prize Problems,[59] is an open problem in the theory of computation.\nAutomata theory Formal languages Computability theoryComputational complexity theory\nModels of computationQuantum computing theoryLogic circuit theory Cellular automata\nInformation theory, closely related to probability and statistics, is related to the quantification of information. This was developed by Claude Shannon to find fundamental limits on signal processing operations\nsuch as compressing data and on reliably storing and communicating data.[60] Coding theory is the study of the properties of codes (systems for converting information from one form to another) and their fitness\nfor a specific application. Codes are used for data compression, cryptography, error detection and correction, and more recently also for network coding. Codes are studied for the purpose of designing efficient\nand reliable data transmission methods. [61]\nCoding theoryChannel capacityAlgorithmic information theorySignal detection theoryKolmogorov complexity\nData structures and algorithms are the studies of commonly used computational methods and their computational efficiency.\nO( n2) \nAnalysis of algorithmsAlgorithm designData structuresCombinatorial optimizationComputational geometryRandomized algorithms\nProgramming language theory is a branch of computer science that deals with the design, implementation, analysis, characterization, and classification of programming languages and their individual features. It\nfalls within the discipline of computer science, both depending on and affecting mathematics, software engineering, and linguistics. It is an active research area, with numerous dedicated academic journals.\nFormal methods are a particular kind of mathematically based technique for the specification, development and verification of software and hardware systems.[62] The use of formal methods for software and\nhardware design is motivated by the expectation that, as in other engineering disciplines, performing appropriate mathematical analysis can contribute to the reliability and robustness of a design. They form an\nimportant theoretical underpinning for software engineering, especially where safety or security is involved. Formal methods are a useful adjunct to software testing since they help avoid errors and can also give a\nframework for testing. For industrial use, tool support is required. However, the high cost of using formal methods means that they are usually only used in the development of high-integrity and life-critical\nsystems, where safety or security is of utmost importance. Formal methods are best described as the application of a fairly broad variety of theoretical computer science fundamentals, in particular logic calculi,\nformal languages, automata theory, and program semantics, but also type systems and algebraic data types to problems in software and hardware specification and verification.\nParadigms of computer science\nFields\nTheoretical computer science\nTheory of computation\nInformation and coding theory\nData structures and algorithms\nProgramming language theory and formal methods\n6/7/25, 7:30 PM Computer science - Wikipedia\nhttps://en.wikipedia.org/wiki/Computer_science 2/6", "mimetype": "text/plain", "start_char_idx": 4212, "end_char_idx": 7999, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9d199733-f60b-4140-9442-1de0f366bb8c": {"__data__": {"id_": "9d199733-f60b-4140-9442-1de0f366bb8c", "embedding": null, "metadata": {"page_label": "3", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1cc46db8-e37a-4bcc-a9ee-9337a455ee14", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "cdf22d110254a5e471a578c4d1213fee951f6c53a2e8f992f4b4b5b0750afdb0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Formal semanticsType theoryCompiler designProgramming languagesFormal veri\ufb01cationAutomated theorem proving\nComputer graphics is the study of digital visual contents and involves the synthesis and manipulation of image data. The study is connected to many other fields in computer science, including computer vision,\nimage processing, and computational geometry, and is heavily applied in the fields of special effects and video games.\n2D computer graphicsComputer animationRendering Mixed realityVirtual realitySolid modeling\nInformation can take the form of images, sound, video or other multimedia. Bits of information can be streamed via signals. Its processing is the central notion of informatics, the European view on computing,\nwhich studies information processing algorithms independently of the type of information carrier \u2013 whether it is electrical, mechanical or biological. This field plays important role in information theory,\ntelecommunications, information engineering and has applications in medical image computing and speech synthesis, among others. What is the lower bound on the complexity of fast Fourier transform\nalgorithms? is one of the unsolved problems in theoretical computer science.\nFFT algorithmsImage processingSpeech recognitionData compressionMedical image computingSpeech synthesis\nScientific computing (or computational science) is the field of study concerned with constructing mathematical models and quantitative analysis techniques and using computers to analyze and solve scientific\nproblems. A major usage of scientific computing is simulation of various processes, including computational fluid dynamics, physical, electrical, and electronic systems and circuits, societies and social situations\n(notably war games) along with their habitats, and interactions among biological cells. Modern computers enable optimization of such designs as complete aircraft. Notable in electrical and electronic circuit\ndesign are SPICE,[63] as well as software for physical realization of new (or modified) designs. The latter includes essential design software for integrated circuits.[64]\nNumerical\nanalysis\nComputational\nphysics\nComputational\nchemistry BioinformaticsNeuroinformaticsPsychoinformatics Medical\ninformatics\nComputational\nengineering\nComputational\nmusicology\nHuman\u2013computer interaction (HCI) is the field of study and research concerned with the design and use of computer systems, mainly based on the analysis of the interaction between humans and computer\ninterfaces. HCI has several subfields that focus on the relationship between emotions, social behavior and brain activity with computers.\nAffective computingBrain\u2013computer interfaceHuman-centered designPhysical computingSocial computing\nSoftware engineering is the study of designing, implementing, and modifying the software in order to ensure it is of high quality, affordable, maintainable, and fast to build. It is a systematic approach to software\ndesign, involving the application of engineering practices to software. Software engineering deals with the organizing and analyzing of software\u2014it does not just deal with the creation or manufacture of new\nsoftware, but its internal arrangement and maintenance. For example software testing, systems engineering, technical debt and software development processes.\nArtificial intelligence (AI) aims to or is required to synthesize goal-orientated processes such as problem-solving, decision-making, environmental adaptation, learning, and communication found in humans and\nanimals. From its origins in cybernetics and in the Dartmouth Conference (1956), artificial intelligence research has been necessarily cross-disciplinary, drawing on areas of expertise such as applied mathematics,\nsymbolic logic, semiotics, electrical engineering, philosophy of mind, neurophysiology, and social intelligence. AI is associated in the popular mind with robotic development, but the main field of practical\napplication has been as an embedded component in areas of software development, which require computational understanding. The starting point in the late 1940s was Alan Turing's question \"Can computers\nthink?\", and the question remains effectively unanswered, although the Turing test is still used to assess computer output on the scale of human intelligence. But the automation of evaluative and predictive tasks\nhas been increasingly successful as a substitute for human monitoring and intervention in domains of computer application involving complex real-world data.\nComputational learning theoryComputer vision Neural networks Planning and scheduling\nNatural language processingComputational game theoryEvolutionary computationAutonomic computing\nApplied computer science\nComputer graphics and visualization\nImage and sound processing\nComputational science, \ufb01nance and engineering\nHuman\u2013computer interaction\nSoftware engineering\nArti\ufb01cial intelligence\n6/7/25, 7:30 PM Computer science - Wikipedia\nhttps://en.wikipedia.org/wiki/Computer_science 3/6", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 5004, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ac40df4b-c18f-49e4-ace5-1f332b823fcf": {"__data__": {"id_": "ac40df4b-c18f-49e4-ace5-1f332b823fcf", "embedding": null, "metadata": {"page_label": "4", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "717220ee-9300-46f8-bcae-054196fde762", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "674eb56e61e28db3a784dd23eeb453650dfcb58bd1b4e3741f518231c089df16", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7235ebc2-f461-4593-b10c-393c7316e508", "node_type": "1", "metadata": {}, "hash": "ec6e6d4b436177c83c6a9df884b212a9abceda3335d4172885be345717c3e9a3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Representation and reasoningPattern recognition Robotics Swarm intelligence\nComputer architecture, or digital computer organization, is the conceptual design and fundamental operational structure of a computer system. It focuses largely on the way by which the central processing unit\nperforms internally and accesses addresses in memory.[65] Computer engineers study computational logic and design of computer hardware, from individual processor components, microcontrollers, personal\ncomputers to supercomputers and embedded systems. The term \"architecture\" in computer literature can be traced to the work of Lyle R. Johnson and Frederick P. Brooks Jr., members of the Machine\nOrganization department in IBM's main research center in 1959.\nProcessing unit MicroarchitectureMultiprocessingProcessor design\nUbiquitous computingSystems architectureOperating systemsInput/output\nEmbedded systemReal-time computingDependability Interpreter\nConcurrency is a property of systems in which several computations are executing simultaneously, and potentially interacting with each other.[66] A number of mathematical models have been developed for\ngeneral concurrent computation including Petri nets, process calculi and the parallel random access machine model.[67] When multiple computers are connected in a network while using concurrency, this is\nknown as a distributed system. Computers within that distributed system have their own private memory, and information can be exchanged to achieve common goals.[68]\nThis branch of computer science aims studies the construction and behavior of computer networks. It addresses their performance, resilience, security, scalability, and cost-effectiveness, along with the variety of\nservices they can provide.[69]\nComputer security is a branch of computer technology with the objective of protecting information from unauthorized access, disruption, or modification while maintaining the accessibility and usability of the\nsystem for its intended users.\nHistorical cryptography is the art of writing and deciphering secret messages. Modern cryptography is the scientific study of problems relating to distributed computations that can be attacked.[70] Technologies\nstudied in modern cryptography include symmetric and asymmetric encryption, digital signatures, cryptographic hash functions, key-agreement protocols, blockchain, zero-knowledge proofs, and garbled circuits.\nA database is intended to organize, store, and retrieve large amounts of data easily. Digital databases are managed using database management systems to store, create, maintain, and search data, through\ndatabase models and query languages. Data mining is a process of discovering patterns in large data sets.\nThe philosopher of computing Bill Rapaport noted three Great Insights of Computer Science:[71]\nGottfried Wilhelm Leibniz's, George Boole's, Alan Turing's, Claude Shannon's, and Samuel Morse's insight: there are only two objects that a computer has to deal with in order to represent \"anything\".[note 4]\nAll the information about any computable problem can be represented using only 0 and 1 (or any other bistable pair that can \ufb02ip-\ufb02op between two easily distinguishable states, such as \"on/off\",\n\"magnetized/de-magnetized\", \"high-voltage/low-voltage\", etc.).\nAlan Turing's insight: there are only \ufb01ve actions that a computer has to perform in order to do \"anything\".\nEvery algorithm can be expressed in a language for a computer consisting of only \ufb01ve basic instructions:[72]\nmove left one location;\nmove right one location;\nread symbol at current location;\nprint 0 at current location;\nprint 1 at current location.\nCorrado B\u00f6hm and Giuseppe Jacopini's insight: there are only three ways of combining these actions (into more complex ones) that are needed in order for a computer to do \"anything\".[73]\nOnly three rules are needed to combine any set of basic instructions into more complex ones:\nsequence: \ufb01rst do this, then do that;\nselection: IF such-and-such is the case, THEN do this, ELSE do that;\nrepetition: WHILE such-and-such is the case, DO this.\nThe three rules of Boehm's and Jacopini's insight can be further simpli\ufb01ed with the use of goto (which means it is more elementary than structured programming).\nProgramming languages can be used to accomplish different tasks in different ways. Common programming paradigms include:\nFunctional programming, a style of building the structure and elements of computer programs that treats computation as the evaluation of mathematical functions and avoids state and mutable data. It is a\ndeclarative programming paradigm, which means programming is done with expressions or declarations instead of statements.[74]\nImperative programming, a programming paradigm that uses statements that change a program's state.[75] In much the same way that the imperative mood in natural languages expresses commands, an\nimperative program consists of commands for the computer to perform. Imperative programming focuses on describing how a program operates.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 5018, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7235ebc2-f461-4593-b10c-393c7316e508": {"__data__": {"id_": "7235ebc2-f461-4593-b10c-393c7316e508", "embedding": null, "metadata": {"page_label": "4", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "717220ee-9300-46f8-bcae-054196fde762", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "674eb56e61e28db3a784dd23eeb453650dfcb58bd1b4e3741f518231c089df16", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ac40df4b-c18f-49e4-ace5-1f332b823fcf", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b1593c97baa27e25882409af20891ef38413d132efd57d8398351ee8eb190d8e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The three rules of Boehm's and Jacopini's insight can be further simpli\ufb01ed with the use of goto (which means it is more elementary than structured programming).\nProgramming languages can be used to accomplish different tasks in different ways. Common programming paradigms include:\nFunctional programming, a style of building the structure and elements of computer programs that treats computation as the evaluation of mathematical functions and avoids state and mutable data. It is a\ndeclarative programming paradigm, which means programming is done with expressions or declarations instead of statements.[74]\nImperative programming, a programming paradigm that uses statements that change a program's state.[75] In much the same way that the imperative mood in natural languages expresses commands, an\nimperative program consists of commands for the computer to perform. Imperative programming focuses on describing how a program operates.\nObject-oriented programming, a programming paradigm based on the concept of \"objects\", which may contain data, in the form of \ufb01elds, often known as attributes; and code, in the form of procedures, often\nknown as methods. A feature of objects is that an object's procedures can access and often modify the data \ufb01elds of the object with which they are associated. Thus object-oriented computer programs are\nmade out of objects that interact with one another.[76]\nService-oriented programming, a programming paradigm that uses \"services\" as the unit of computer work, to design and implement integrated business applications and mission critical software programs.\nComputer systems\nComputer architecture and microarchitecture\nConcurrent, parallel and distributed computing\nComputer networks\nComputer security and cryptography\nDatabases and data mining\nDiscoveries\nProgramming paradigms\n6/7/25, 7:30 PM Computer science - Wikipedia\nhttps://en.wikipedia.org/wiki/Computer_science 4/6", "mimetype": "text/plain", "start_char_idx": 4077, "end_char_idx": 5997, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d255c569-0911-49db-96ab-d7e5b53cc081": {"__data__": {"id_": "d255c569-0911-49db-96ab-d7e5b53cc081", "embedding": null, "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f4b11cca-1fab-4c2e-b69d-2eced8bee678", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "6e43b0b2e18ebfa8b9614f8f6b0cf1f25fc1b7374374fb651559d884f8202036", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c64d8489-c19e-4248-99e4-fb84fca7c209", "node_type": "1", "metadata": {}, "hash": "b00ac71459c88a2eb4304357a58b8c118f02ca1f1703529b08d4dc40d55df4dd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Many languages offer support for multiple paradigms, making the distinction more a matter of style than of technical capabilities.[77]\nConferences are important events for computer science research. During these conferences, researchers from the public and private sectors present their recent work and meet. Unlike in most other academic\nfields, in computer science, the prestige of conference papers is greater than that of journal publications.[78][79] One proposed explanation for this is the quick development of this relatively new field requires\nrapid review and distribution of results, a task better handled by conferences than by journals.[80]\nComputer science education\nGlossary of computer science\nList of computer scientists\nList of computer science awards\nList of pioneers in computer science\nOutline of computer science\n1. In 1851\n2. \"The introduction of punched cards into the new engine was important not only as a more convenient form of control than the drums, or because programs could now be of unlimited extent, and could be\nstored and repeated without the danger of introducing errors in setting the machine by hand; it was important also because it served to crystallize Babbage's feeling that he had invented something really new,\nsomething much more than a sophisticated calculating machine.\" Bruce Collier, 1970\n3. See the entry \"Computer science\" on Wikiquote for the history of this quotation.\n4. The word \"anything\" is written in quotation marks because there are things that computers cannot do. One example is: to answer the question if an arbitrary given computer program will eventually \ufb01nish or run\nforever (the Halting problem).\n1. \"What is Computer Science?\" (https://www.cs.york.ac.uk/undergr\naduate/what-is-cs/). Department of Computer Science, University\nof York. Archived (https://web.archive.org/web/20200611230638/\nhttps://www.cs.york.ac.uk/undergraduate/what-is-cs/) from the\noriginal on June 11, 2020. Retrieved June 11, 2020.\n2. What Can Be Automated? Computer Science and Engineering\nResearch Study (https://mitpress.mit.edu/books/what-can-be-aut\nomated). Computer Science Series. MIT Press. 1980. ISBN\u00a0978-\n0262010603. Archived (https://web.archive.org/web/2021010902\n1022/https://mitpress.mit.edu/books/what-can-be-automated)\nfrom the original on January 9, 2021.\n3. Denning, P.J.; Comer, D.E.; Gries, D.; Mulder, M.C.; Tucker, A.;\nTurner, A.J.; Young, P.R. (February 1989). \"Computing as a\ndiscipline\" (https://ieeexplore.ieee.org/document/19833).\nComputer. 22 (2): 63\u201370. doi:10.1109/2.19833 (https://doi.org/10.\n1109%2F2.19833). ISSN\u00a01558-0814 (https://search.worldcat.org/\nissn/1558-0814). Archived (https://web.archive.org/web/2022030\n3023329/https://ieeexplore.ieee.org/document/19833) from the\noriginal on March 3, 2022. Retrieved March 3, 2022. \"The\ndiscipline of computing is the systematic study of algorithmic\nprocesses that describe and transform information, their theory,\nanalysis, design, ef\ufb01ciency, implementation, and application. The\nfundamental question underlying all of computing is, 'What can\nbe (ef\ufb01ciently) automated?'\"\n4. \"WordNet Search\u20143.1\" (http://wordnetweb.princeton.edu/perl/we\nbwn?s=computer%20scientist). WordNet Search.\nWordnetweb.princeton.edu. Archived (https://web.archive.org/we\nb/20171018181122/http://wordnetweb.princeton.edu/perl/webw\nn?s=computer%20scientist) from the original on October 18,\n2017. Retrieved May 14, 2012.\n5. \"De\ufb01nition of computer science | Dictionary.com\" (https://www.dic\ntionary.com/browse/computer-science). www.dictionary.com.\nArchived (https://web.archive.org/web/20200611224238/https://w\nww.dictionary.com/browse/computer-science) from the original\non June 11, 2020.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3682, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c64d8489-c19e-4248-99e4-fb84fca7c209": {"__data__": {"id_": "c64d8489-c19e-4248-99e4-fb84fca7c209", "embedding": null, "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f4b11cca-1fab-4c2e-b69d-2eced8bee678", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "6e43b0b2e18ebfa8b9614f8f6b0cf1f25fc1b7374374fb651559d884f8202036", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d255c569-0911-49db-96ab-d7e5b53cc081", "node_type": "1", "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "d467e76b09b015a78376e44e78cda61a7f0a8ae3760844f942ad961e9386c537", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b53adf00-3785-4c3a-806e-aec86d922328", "node_type": "1", "metadata": {}, "hash": "7838e27fa7c90b03ce846fc70efcd8cc28de8f08fab9d7e9266399ae9e1e0f8c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4. \"WordNet Search\u20143.1\" (http://wordnetweb.princeton.edu/perl/we\nbwn?s=computer%20scientist). WordNet Search.\nWordnetweb.princeton.edu. Archived (https://web.archive.org/we\nb/20171018181122/http://wordnetweb.princeton.edu/perl/webw\nn?s=computer%20scientist) from the original on October 18,\n2017. Retrieved May 14, 2012.\n5. \"De\ufb01nition of computer science | Dictionary.com\" (https://www.dic\ntionary.com/browse/computer-science). www.dictionary.com.\nArchived (https://web.archive.org/web/20200611224238/https://w\nww.dictionary.com/browse/computer-science) from the original\non June 11, 2020. Retrieved June 11, 2020.\n6. \"What is Computer Science? | Undergraduate Computer Science\nat UMD\" (https://undergrad.cs.umd.edu/what-computer-science).\nundergrad.cs.umd.edu. Archived (https://web.archive.org/web/20\n201127013803/https://undergrad.cs.umd.edu/what-computer-sci\nence) from the original on November 27, 2020. Retrieved\nJuly 15, 2022.\n7. Harel, David (2014). Algorithmics The Spirit of Computing (http://\nworldcat.org/oclc/876384882). Springer Berlin. ISBN\u00a0978-3-642-\n44135-6. OCLC\u00a0876384882 (https://search.worldcat.org/oclc/876\n384882). Archived (https://web.archive.org/web/2020061714502\n1/https://www.worldcat.org/oclc/876384882) from the original on\nJune 17, 2020. Retrieved June 17, 2020.\n8. Patton, Richard D.; Patton, Peter C. (2009), Nof, Shimon Y. (ed.),\n\"What Can be Automated? What Cannot be Automated?\" (http\ns://doi.org/10.1007/978-3-540-78831-7_18), Springer Handbook\nof Automation, Springer Handbooks, Berlin, Heidelberg: Springer,\npp.\u00a0305\u2013313, doi:10.1007/978-3-540-78831-7_18 (https://doi.org/\n10.1007%2F978-3-540-78831-7_18), ISBN\u00a0978-3-540-78831-7,\narchived (https://web.archive.org/web/20230111224039/https://lin\nk.springer.com/chapter/10.1007/978-3-540-78831-7_18) from the\noriginal on January 11, 2023, retrieved March 3, 2022\n9. Forsythe, George (August 5\u201310, 1969). \"Computer Science and\nEducation\". Proceedings of IFIP Congress 1968. \"The question\n'What can be automated?' is one of the most inspiring\nphilosophical and practical questions of contemporary\ncivilization.\"\n10. Knuth, Donald E. (August 1, 1972). \"George Forsythe and the\ndevelopment of computer science\" (https://doi.org/10.1145%2F3\n61532.361538). Communications of the ACM. 15 (8): 721\u2013726.\ndoi:10.1145/361532.361538 (https://doi.org/10.1145%2F361532.\n361538). ISSN\u00a00001-0782 (https://search.worldcat.org/issn/0001-\n0782). S2CID\u00a012512057 (https://api.semanticscholar.org/CorpusI\nD:12512057).\n11. Hanson, Vicki L. (January 23, 2017). \"Celebrating 50 years of the\nTuring award\" (https://doi.org/10.1145%2F3033604).\nCommunications of the ACM. 60 (2): 5. doi:10.1145/3033604 (htt\nps://doi.org/10.1145%2F3033604).", "mimetype": "text/plain", "start_char_idx": 3093, "end_char_idx": 5791, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b53adf00-3785-4c3a-806e-aec86d922328": {"__data__": {"id_": "b53adf00-3785-4c3a-806e-aec86d922328", "embedding": null, "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f4b11cca-1fab-4c2e-b69d-2eced8bee678", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "6e43b0b2e18ebfa8b9614f8f6b0cf1f25fc1b7374374fb651559d884f8202036", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c64d8489-c19e-4248-99e4-fb84fca7c209", "node_type": "1", "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "a3c72d431125292f0d01533a48ffeeaf3db6879c3f99c60279c38cbba9855bea", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e852e866-fd3d-4988-9662-4fa90892b82e", "node_type": "1", "metadata": {}, "hash": "8bd3349db03d81c90eb48927aa459b1c49319d6776de4b0a44314bb7a0f21506", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Communications of the ACM. 15 (8): 721\u2013726.\ndoi:10.1145/361532.361538 (https://doi.org/10.1145%2F361532.\n361538). ISSN\u00a00001-0782 (https://search.worldcat.org/issn/0001-\n0782). S2CID\u00a012512057 (https://api.semanticscholar.org/CorpusI\nD:12512057).\n11. Hanson, Vicki L. (January 23, 2017). \"Celebrating 50 years of the\nTuring award\" (https://doi.org/10.1145%2F3033604).\nCommunications of the ACM. 60 (2): 5. doi:10.1145/3033604 (htt\nps://doi.org/10.1145%2F3033604). ISSN\u00a00001-0782 (https://sear\nch.worldcat.org/issn/0001-0782). S2CID\u00a029984960 (https://api.se\nmanticscholar.org/CorpusID:29984960).\n12. Scott, Eric; Martins, Marcella Scoczynski Ribeiro; Yafrani,\nMohamed El; Volz, Vanessa; Wilson, Dennis G (June 5, 2018).\n\"ACM marks 50 years of the ACM A.M. turing award and\ncomputing's greatest achievements\" (https://doi.org/10.1145/323\n1560.3231563). ACM SIGEVOlution. 10 (3): 9\u201311.\ndoi:10.1145/3231560.3231563 (https://doi.org/10.1145%2F32315\n60.3231563). ISSN\u00a01931-8499 (https://search.worldcat.org/issn/1\n931-8499). S2CID\u00a047021559 (https://api.semanticscholar.org/Cor\npusID:47021559).\n13. \"2021: 375th birthday of Leibniz, father of computer science\" (htt\nps://people.idsia.ch/~juergen/leibniz-father-computer-science-37\n5.html). people.idsia.ch. Archived (https://web.archive.org/web/20\n220921232935/https://people.idsia.ch/~juergen/leibniz-father-co\nmputer-science-375.html) from the original on September 21,\n2022. Retrieved February 4, 2023.\n14. \"Charles Babbage Institute: Who Was Charles Babbage?\" (http://\nwww.cbi.umn.edu/about/babbage.html). cbi.umn.edu. Archived (h\nttps://web.archive.org/web/20070109093346/http://www.cbi.umn.\nedu/about/babbage.html) from the original on January 9, 2007.\nRetrieved December 28, 2016.\n15. \"Ada Lovelace | Babbage Engine | Computer History Museum\" (h\nttp://www.computerhistory.org/babbage/adalovelace/).\nwww.computerhistory.org. Archived (https://web.archive.org/web/\n20181225024329/http://www.computerhistory.org/babbage/adalo\nvelace/%20) from the original on December 25, 2018. Retrieved\nDecember 28, 2016.\n16. \"History of Computer Science\" (https://cs.uwaterloo.ca/~shallit/C\nourses/134/history.html#:~:text=In%20the%201960%27s,%20co\nmputer%20science,person%20to%20receive%20a%20Ph.).\ncs.uwaterloo.ca. Archived (https://web.archive.org/web/20170729\n210116/https://cs.uwaterloo.ca/~shallit/Courses/134/history.html\n#:~:text=In%20the%201960%27s,%20computer%20science,per\nson%20to%20receive%20a%20Ph.) from the original on July 29,\n2017. Retrieved July 15, 2022.\n17. \"Wilhelm Schickard \u2013 Ein Computerpionier\" (https://web.archive.", "mimetype": "text/plain", "start_char_idx": 5330, "end_char_idx": 7903, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e852e866-fd3d-4988-9662-4fa90892b82e": {"__data__": {"id_": "e852e866-fd3d-4988-9662-4fa90892b82e", "embedding": null, "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f4b11cca-1fab-4c2e-b69d-2eced8bee678", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "6e43b0b2e18ebfa8b9614f8f6b0cf1f25fc1b7374374fb651559d884f8202036", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b53adf00-3785-4c3a-806e-aec86d922328", "node_type": "1", "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "52953ba9fb626763db0fcd24651005315f8ca9e5f22455b8d578fe71b0fb8220", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c2c9c59f-887a-4930-af31-d015cf6cb575", "node_type": "1", "metadata": {}, "hash": "edfc07c53a77259e7cab5193f985ec0582e3cecd4fefe0900fa87c3cb817b8c9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "16. \"History of Computer Science\" (https://cs.uwaterloo.ca/~shallit/C\nourses/134/history.html#:~:text=In%20the%201960%27s,%20co\nmputer%20science,person%20to%20receive%20a%20Ph.).\ncs.uwaterloo.ca. Archived (https://web.archive.org/web/20170729\n210116/https://cs.uwaterloo.ca/~shallit/Courses/134/history.html\n#:~:text=In%20the%201960%27s,%20computer%20science,per\nson%20to%20receive%20a%20Ph.) from the original on July 29,\n2017. Retrieved July 15, 2022.\n17. \"Wilhelm Schickard \u2013 Ein Computerpionier\" (https://web.archive.\norg/web/20200919014352/https://www.fmi.uni-jena.de/fmimedia/\nFakultaet/Institute+und+Abteilungen/Abteilung+f%C3%BCr+Dida\nktik/GDI/Wilhelm+Schickard.pdf) (PDF) (in German). Archived\nfrom the original (http://www.fmi.uni-jena.de/fmimedia/Fakultaet/I\nnstitute+und+Abteilungen/Abteilung+f%C3%BCr+Didaktik/GDI/W\nilhelm+Schickard.pdf) (PDF) on September 19, 2020. Retrieved\nDecember 4, 2016.\n18. Keates, Fiona (June 25, 2012). \"A Brief History of Computing\" (ht\ntps://web.archive.org/web/20120629072020/http://blogs.royalsoci\nety.org/history-of-science/2012/06/25/history-of-computing/). The\nRepository. The Royal Society. Archived from the original (http://\nblogs.royalsociety.org/history-of-science/2012/06/25/history-of-co\nmputing/) on June 29, 2012. Retrieved January 19, 2014.\n19. \"Science Museum, Babbage's Analytical Engine, 1834\u20131871\n(Trial model)\" (https://collection.sciencemuseumgroup.org.uk/obj\nects/co62245/babbages-analytical-engine-1834-1871-trial-model\n-analytical-engines). Archived (https://web.archive.org/web/2019\n0830123359/https://collection.sciencemuseumgroup.org.uk/objec\nts/co62245/babbages-analytical-engine-1834-1871-trial-model-a\nnalytical-engines) from the original on August 30, 2019.\nRetrieved May 11, 2020.\n20. Hyman, Anthony (1982). Charles Babbage: Pioneer of the\nComputer. Oxford University Press. ISBN\u00a0978-0691083032.\n21. \"A Selection and Adaptation From Ada's Notes found in Ada, The\nEnchantress of Numbers,\" by Betty Alexandra Toole Ed.D.\nStrawberry Press, Mill Valley, CA\" (https://web.archive.org/web/2\n0060210172109/http://www.scottlan.edu/lriddle/women/ada-love.\nhtm). Archived from the original (http://www.scottlan.edu/Lriddle/\nwomen/ada-love.htm) on February 10, 2006. Retrieved May 4,\n2006.\n22. \"The John Gabriel Byrne Computer Science Collection\" (https://w\neb.archive.org/web/20190416071721/https://www.scss.tcd.ie/SC\nSSTreasuresCatalog/miscellany/TCD-SCSS-X.20121208.002/T\nCD-SCSS-X.20121208.002.pdf) (PDF). Archived from the\noriginal (https://scss.tcd.ie/SCSSTreasuresCatalog/miscellany/T\nCD-SCSS-X.20121208.002/TCD-SCSS-X.20121208.002.pdf/)\non April 16, 2019. Retrieved August 8, 2019.\n23. Torres Quevedo, L. (1914). \"Ensayos sobre Autom\u00e1tica \u2013 Su\nde\ufb01nicion. Extension te\u00f3rica de sus aplicaciones\".", "mimetype": "text/plain", "start_char_idx": 7382, "end_char_idx": 10147, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c2c9c59f-887a-4930-af31-d015cf6cb575": {"__data__": {"id_": "c2c9c59f-887a-4930-af31-d015cf6cb575", "embedding": null, "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f4b11cca-1fab-4c2e-b69d-2eced8bee678", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "6e43b0b2e18ebfa8b9614f8f6b0cf1f25fc1b7374374fb651559d884f8202036", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e852e866-fd3d-4988-9662-4fa90892b82e", "node_type": "1", "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "48f283050bb4b0a3cd3fcf5d9a22e977ab565339b26012a39444b30b8f29da85", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "06ea441b-a896-4736-94f4-3e250a8aeaa9", "node_type": "1", "metadata": {}, "hash": "60049cab15bc763423f110f328b7996a4d792c49c88bf3c9aaf64fccd1918fdb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Retrieved May 4,\n2006.\n22. \"The John Gabriel Byrne Computer Science Collection\" (https://w\neb.archive.org/web/20190416071721/https://www.scss.tcd.ie/SC\nSSTreasuresCatalog/miscellany/TCD-SCSS-X.20121208.002/T\nCD-SCSS-X.20121208.002.pdf) (PDF). Archived from the\noriginal (https://scss.tcd.ie/SCSSTreasuresCatalog/miscellany/T\nCD-SCSS-X.20121208.002/TCD-SCSS-X.20121208.002.pdf/)\non April 16, 2019. Retrieved August 8, 2019.\n23. Torres Quevedo, L. (1914). \"Ensayos sobre Autom\u00e1tica \u2013 Su\nde\ufb01nicion. Extension te\u00f3rica de sus aplicaciones\". Revista de la\nAcademia de Ciencias Exacta, 12, pp. 391\u2013418.\n24. Torres Quevedo, Leonardo. Autom\u00e1tica: Complemento de la\nTeor\u00eda de las M\u00e1quinas, (pdf) (https://quickclick.es/rop/pdf/public\no/1914/1914_tomoI_2043_01.pdf), pp. 575\u2013583, Revista de\nObras P\u00fablicas, 19 November 1914.\n25. Ronald T. Kneusel. Numbers and Computers (https://books.googl\ne.com/books?id=eq4ZDgAAQBAJ&dq=leonardo+torres+queved\no++electromechanical+machine+essays&pg=PA84), Springer,\npp. 84\u201385, 2017. ISBN\u00a0978-3319505084\n26. Randell, Brian. Digital Computers, History of Origins, (pdf) (http\ns://dl.acm.org/doi/pdf/10.5555/1074100.1074334), p. 545, Digital\nComputers: Origins, Encyclopedia of Computer Science, January\n2003.\n27. Randell 1982, p.\u00a06, 11\u201313.\n28. \"In this sense Aiken needed IBM, whose technology included the\nuse of punched cards, the accumulation of numerical data, and\nthe transfer of numerical data from one register to another\",\nBernard Cohen, p.44 (2000)\n29. Brian Randell, p. 187, 1975\n30. The Association for Computing Machinery (ACM) was founded in\n1947.\n31. \"IBM Archives: 1945\" (https://www.ibm.com/ibm/history/history/ye\nar_1945.html). Ibm.com. January 23, 2003. Archived (https://we\nb.archive.org/web/20190105013948/https://www.ibm.com/ibm/his\ntory/history/year_1945.html) from the original on January 5,\n2019. Retrieved March 19, 2019.\n32. \"IBM100 \u2013 The Origins of Computer Science\" (https://www.ibm.c\nom/ibm/history/ibm100/us/en/icons/compsci/). Ibm.com.\nSeptember 15, 1995. Archived (https://web.archive.org/web/2019\n0105051800/https://www.ibm.com/ibm/history/ibm100/us/en/icon\ns/compsci/) from the original on January 5, 2019. Retrieved\nMarch 19, 2019.\n33. Denning, P.J.; Comer, D.E.; Gries, D.; Mulder, M.C.; Tucker, A.;\nTurner, A.J.; Young, P.R. (February 1989). \"Computing as a\ndiscipline\" (https://ieeexplore.ieee.org/document/19833).\nComputer. 22 (2): 63\u201370. doi:10.1109/2.19833 (https://doi.org/10.\n1109%2F2.19833). ISSN\u00a01558-0814 (https://search.worldcat.org/\nissn/1558-0814). Archived (https://web.archive.org/web/2022030\n3023329/https://ieeexplore.ieee.org/document/19833) from the\noriginal on March 3, 2022. Retrieved March 3, 2022.", "mimetype": "text/plain", "start_char_idx": 9612, "end_char_idx": 12290, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "06ea441b-a896-4736-94f4-3e250a8aeaa9": {"__data__": {"id_": "06ea441b-a896-4736-94f4-3e250a8aeaa9", "embedding": null, "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f4b11cca-1fab-4c2e-b69d-2eced8bee678", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "6e43b0b2e18ebfa8b9614f8f6b0cf1f25fc1b7374374fb651559d884f8202036", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c2c9c59f-887a-4930-af31-d015cf6cb575", "node_type": "1", "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b09742892746073db8b4374a6c4bc88125e26871d8bd0d2eee4b78166f1c68bb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d8e196c8-bd1e-4ddd-940b-314e011094d3", "node_type": "1", "metadata": {}, "hash": "b2de8809dd65e3ec19756e65b6edf58549e82bffcf9eb8b1325b768640027fc8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Denning, P.J.; Comer, D.E.; Gries, D.; Mulder, M.C.; Tucker, A.;\nTurner, A.J.; Young, P.R. (February 1989). \"Computing as a\ndiscipline\" (https://ieeexplore.ieee.org/document/19833).\nComputer. 22 (2): 63\u201370. doi:10.1109/2.19833 (https://doi.org/10.\n1109%2F2.19833). ISSN\u00a01558-0814 (https://search.worldcat.org/\nissn/1558-0814). Archived (https://web.archive.org/web/2022030\n3023329/https://ieeexplore.ieee.org/document/19833) from the\noriginal on March 3, 2022. Retrieved March 3, 2022.\n34. \"Some EDSAC statistics\" (http://www.cl.cam.ac.uk/conference/E\nDSAC99/statistics.html). University of Cambridge. Archived (http\ns://web.archive.org/web/20070903055322/http://www.cl.cam.ac.u\nk/conference/EDSAC99/statistics.html) from the original on\nSeptember 3, 2007. Retrieved November 19, 2011.\n35. \"Computer science pioneer Samuel D. Conte dies at 85\" (http://w\nww.cs.purdue.edu/about/conte.html). Purdue Computer Science.\nJuly 1, 2002. Archived (https://web.archive.org/web/2014100614\n2241/http://www.cs.purdue.edu/about/conte.html) from the\noriginal on October 6, 2014. Retrieved December 12, 2014.\n36. Tedre, Matti (2014). The Science of Computing: Shaping a\nDiscipline. Taylor and Francis / CRC Press.\n37. Louis Fine (1960). \"The Role of the University in Computers,\nData Processing, and Related Fields\" (https://doi.org/10.1145%2\nF368424.368427). Communications of the ACM. 2 (9): 7\u201314.\ndoi:10.1145/368424.368427 (https://doi.org/10.1145%2F368424.\n368427). S2CID\u00a06740821 (https://api.semanticscholar.org/Corpu\nsID:6740821).\n38. \"Stanford University Oral History\" (http://library.stanford.edu/guid\nes/stanford-university-oral-history). Stanford Libraries. Stanford\nUniversity. Archived (https://web.archive.org/web/201704040705\n55/http://library.stanford.edu/guides/stanford-university-oral-histor\ny) from the original on April 4, 2017. Retrieved May 30, 2013.\n39. Donald Knuth (1972). \"George Forsythe and the Development of\nComputer Science\" (http://www.stanford.edu/dept/ICME/docs/his\ntory/forsythe_knuth.pdf). Comms. ACM. Archived (https://web.arc\nhive.org/web/20131020200802/http://www.stanford.edu/dept/ICM\nE/docs/history/forsythe_knuth.pdf) October 20, 2013, at the\nWayback Machine\n40. Matti Tedre (2006). \"The Development of Computer Science: A\nSociocultural Perspective\" (http://epublications.uef.\ufb01/pub/urn_isb\nn_952-458-867-6/urn_isbn_952-458-867-6.pdf) (PDF). p.\u00a0260.\nArchived (https://ghostarchive.org/archive/20221009/http://epubli\ncations.uef.\ufb01/pub/urn_isbn_952-458-867-6/urn_isbn_952-458-86\n7-6.pdf) (PDF) from the original on October 9, 2022. Retrieved\nDecember 12, 2014.\n41. Peter Naur (1966). \"The science of datalogy\" (https://doi.org/10.1\n145%2F365719.366510). Communications of the ACM.", "mimetype": "text/plain", "start_char_idx": 11805, "end_char_idx": 14508, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d8e196c8-bd1e-4ddd-940b-314e011094d3": {"__data__": {"id_": "d8e196c8-bd1e-4ddd-940b-314e011094d3", "embedding": null, "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f4b11cca-1fab-4c2e-b69d-2eced8bee678", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "6e43b0b2e18ebfa8b9614f8f6b0cf1f25fc1b7374374fb651559d884f8202036", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "06ea441b-a896-4736-94f4-3e250a8aeaa9", "node_type": "1", "metadata": {"page_label": "5", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "d531e943bf5a47dfd9e60071500693044c38f36669feb992c81eb38a56788a19", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\"The Development of Computer Science: A\nSociocultural Perspective\" (http://epublications.uef.\ufb01/pub/urn_isb\nn_952-458-867-6/urn_isbn_952-458-867-6.pdf) (PDF). p.\u00a0260.\nArchived (https://ghostarchive.org/archive/20221009/http://epubli\ncations.uef.\ufb01/pub/urn_isbn_952-458-867-6/urn_isbn_952-458-86\n7-6.pdf) (PDF) from the original on October 9, 2022. Retrieved\nDecember 12, 2014.\n41. Peter Naur (1966). \"The science of datalogy\" (https://doi.org/10.1\n145%2F365719.366510). Communications of the ACM. 9 (7):\n485. doi:10.1145/365719.366510 (https://doi.org/10.1145%2F365\n719.366510). S2CID\u00a047558402 (https://api.semanticscholar.org/\nCorpusID:47558402).\n42. Weiss, E.A.; Corley, Henry P.T. \"Letters to the editor\" (https://doi.\norg/10.1145%2F368796.368802). Communications of the ACM.\n1 (4): 6. doi:10.1145/368796.368802 (https://doi.org/10.1145%2F\n368796.368802). S2CID\u00a05379449 (https://api.semanticscholar.or\ng/CorpusID:5379449).\n43. Communications of the ACM 2(1):p.4\n44. IEEE Computer 28(12): p.136\n45. P. Mounier-Kuhn, L'Informatique en France, de la seconde\nguerre mondiale au Plan Calcul. L'\u00e9mergence d'une science,\nParis, PUPS, 2010, ch. 3 & 4.\n46. Groth, Dennis P. (February 2010). \"Why an Informatics Degree?\"\n(http://cacm.acm.org/magazines/2010/2/69363-why-an-informatic\ns-degree). Communications of the ACM. Cacm.acm.org.\nArchived (https://web.archive.org/web/20230111224014/https://c\nacm.acm.org/magazines/2010/2/69363-why-an-informatics-degr\nee/abstract) from the original on January 11, 2023. Retrieved\nJune 14, 2016.\nResearch\nSee also\nNotes\nReferences\n6/7/25, 7:30 PM Computer science - Wikipedia\nhttps://en.wikipedia.org/wiki/Computer_science 5/6", "mimetype": "text/plain", "start_char_idx": 14014, "end_char_idx": 15669, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ccf5fe2a-5363-49c3-a0b8-d343a7ad2590": {"__data__": {"id_": "ccf5fe2a-5363-49c3-a0b8-d343a7ad2590", "embedding": null, "metadata": {"page_label": "6", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "89762987-2cc0-4698-9236-4da8f4837395", "node_type": "4", "metadata": {"page_label": "6", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "bfbcde953a8aaf8fd2bdb7e340bc687c73315b38f8a828a79b00fa7b83ef4784", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4bf61569-c869-4660-8c66-46cf601a2bf4", "node_type": "1", "metadata": {}, "hash": "c37830cea1d12e9b4bdf19abfa185d530ed001fe17fa81de751ee83ec6ac6ee9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "47. Tedre, M. (2011). \"Computing as a Science: A Survey of\nCompeting Viewpoints\". Minds and Machines. 21 (3): 361\u2013387.\ndoi:10.1007/s11023-011-9240-4 (https://doi.org/10.1007%2Fs110\n23-011-9240-4). S2CID\u00a014263916 (https://api.semanticscholar.or\ng/CorpusID:14263916).\n48. Parnas, D.L. (1998). \"Software engineering programmes are not\ncomputer science programmes\". Annals of Software\nEngineering. 6: 19\u201337. doi:10.1023/A:1018949113292 (https://do\ni.org/10.1023%2FA%3A1018949113292). S2CID\u00a035786237 (http\ns://api.semanticscholar.org/CorpusID:35786237)., p. 19: \"Rather\nthan treat software engineering as a sub\ufb01eld of computer\nscience, I treat it as an element of the set, Civil Engineering,\nMechanical Engineering, Chemical Engineering, Electrical\nEngineering, [...]\"\n49. Luk, R.W.P. (2020). \"Insight in how computer science can be a\nscience\". Science & Philosophy. 8 (2): 17\u201347.\ndoi:10.23756/sp.v8i2.531 (https://doi.org/10.23756%2Fsp.v8i2.5\n31).\n50. Knuth, D.E. (1974). \"Computer science and its relation to\nmathematics\". The American Mathematical Monthly. 81 (4): 323\u2013\n343. doi:10.2307/2318994 (https://doi.org/10.2307%2F2318994).\nJSTOR\u00a02318994 (https://www.jstor.org/stable/2318994).\n51. \"The Philosophy of Computer Science\" (https://plato.stanford.ed\nu/entries/computer-science/#EpisStatCompScie). The\nPhilosophy of Computer Science (Stanford Encyclopedia of\nPhilosophy). Metaphysics Research Lab, Stanford University.\n2021. Archived (https://web.archive.org/web/20210916211931/htt\nps://plato.stanford.edu/entries/computer-science/#EpisStatComp\nScie) from the original on September 16, 2021. Retrieved\nSeptember 16, 2021.\n52. Wegner, P. (October 13\u201315, 1976). Research paradigms in\ncomputer science\u2014Proceedings of the 2nd international\nConference on Software Engineering. San Francisco, California,\nUnited States: IEEE Computer Society Press, Los Alamitos, CA.\n53. Denning, Peter J. (2007). \"Computing is a natural science\".\nCommunications of the ACM. 50 (7): 13\u201318.\ndoi:10.1145/1272516.1272529 (https://doi.org/10.1145%2F12725\n16.1272529). S2CID\u00a020045303 (https://api.semanticscholar.org/\nCorpusID:20045303).\n54. Eden, A.H. (2007). \"Three Paradigms of Computer Science\" (http\ns://web.archive.org/web/20160215100211/http://www.eden-study.\norg/articles/2007/three_paradigms_of_computer_science.pdf)\n(PDF). Minds and Machines. 17 (2): 135\u2013167.\nCiteSeerX\u00a010.1.1.304.7763 (https://citeseerx.ist.psu.edu/viewdo\nc/summary?doi=10.1.1.304.7763). doi:10.1007/s11023-007-\n9060-8 (https://doi.org/10.1007%2Fs11023-007-9060-8).\nS2CID\u00a03023076 (https://api.semanticscholar.org/CorpusID:30230\n76). Archived from the original (http://www.eden-study.org/article\ns/2007/three_paradigms_of_computer_science.pdf) (PDF) on\nFebruary 15, 2016.\n55.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2725, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4bf61569-c869-4660-8c66-46cf601a2bf4": {"__data__": {"id_": "4bf61569-c869-4660-8c66-46cf601a2bf4", "embedding": null, "metadata": {"page_label": "6", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "89762987-2cc0-4698-9236-4da8f4837395", "node_type": "4", "metadata": {"page_label": "6", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "bfbcde953a8aaf8fd2bdb7e340bc687c73315b38f8a828a79b00fa7b83ef4784", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ccf5fe2a-5363-49c3-a0b8-d343a7ad2590", "node_type": "1", "metadata": {"page_label": "6", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "1ff902b42d67830cf0d2da7e64536d3b29d18f12c53efce72d3a6360d4be405b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bc8126b3-ce29-489b-b5ba-2a7197ba5b4e", "node_type": "1", "metadata": {}, "hash": "11332abe708fecc94ef03c86588c1869171a4582b2dd1de3ce58ec7a690c189d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Minds and Machines. 17 (2): 135\u2013167.\nCiteSeerX\u00a010.1.1.304.7763 (https://citeseerx.ist.psu.edu/viewdo\nc/summary?doi=10.1.1.304.7763). doi:10.1007/s11023-007-\n9060-8 (https://doi.org/10.1007%2Fs11023-007-9060-8).\nS2CID\u00a03023076 (https://api.semanticscholar.org/CorpusID:30230\n76). Archived from the original (http://www.eden-study.org/article\ns/2007/three_paradigms_of_computer_science.pdf) (PDF) on\nFebruary 15, 2016.\n55. Turner, Raymond; Angius, Nicola (2019). \"The Philosophy of\nComputer Science\" (https://plato.stanford.edu/archives/spr2019/\nentries/computer-science/). In Zalta, Edward N. (ed.). The\nStanford Encyclopedia of Philosophy. Archived (https://web.archi\nve.org/web/20191014101624/https://plato.stanford.edu/archives/\nspr2019/entries/computer-science/) from the original on October\n14, 2019. Retrieved October 14, 2019.\n56. \"Computer Science as a Profession\" (https://web.archive.org/we\nb/20080617030847/http://www.csab.org/comp_sci_profession.ht\nml). Computing Sciences Accreditation Board. May 28, 1997.\nArchived from the original (http://www.csab.org/comp_sci_profes\nsion.html) on June 17, 2008. Retrieved May 23, 2010.\n57. Committee on the Fundamentals of Computer Science:\nChallenges and Opportunities, National Research Council\n(2004). Computer Science: Re\ufb02ections on the Field, Re\ufb02ections\nfrom the Field (http://www.nap.edu/catalog.php?record_id=11106\n#toc). National Academies Press. ISBN\u00a0978-0-309-09301-9.\nArchived (https://web.archive.org/web/20110218122042/http://w\nww.nap.edu/catalog.php?record_id=11106#toc) from the original\non February 18, 2011. Retrieved August 31, 2008.\n58. \"CSAB Leading Computer Education\" (http://www.csab.org/).\nCSAB. August 3, 2011. Archived (https://web.archive.org/web/20\n190120190336/http://www.csab.org/) from the original on\nJanuary 20, 2019. Retrieved November 19, 2011.\n59. Clay Mathematics Institute (http://www.claymath.org/millennium/\nP_vs_NP/) P = NP Archived (https://web.archive.org/web/201310\n14194456/http://www.claymath.org/millennium/P_vs_NP/)\nOctober 14, 2013, at the Wayback Machine\n60. P. Collins, Graham (October 14, 2002). \"Claude E. Shannon:\nFounder of Information Theory\" (http://www.scienti\ufb01camerican.co\nm/article.cfm?id=claude-e-shannon-founder). Scienti\ufb01c\nAmerican. Archived (https://web.archive.org/web/2014011618355\n8/http://www.scienti\ufb01camerican.com/article.cfm?id=claude-e-sha\nnnon-founder) from the original on January 16, 2014. Retrieved\nDecember 12, 2014.\n61. Van-Nam Huynh; Vladik Kreinovich; Songsak Sriboonchitta;\n2012. Uncertainty Analysis in Econometrics with Applications.\nSpringer Science & Business Media. p. 63. ISBN\u00a0978-3-642-\n35443-4.\n62. Phillip A. Laplante, (2010). Encyclopedia of Software Engineering\nThree-Volume Set (Print). CRC Press. p. 309. ISBN\u00a0978-1-351-\n24926-3.\n63. Muhammad H. Rashid, (2016). SPICE for Power Electronics and\nElectric Power. CRC Press. p. 6.", "mimetype": "text/plain", "start_char_idx": 2306, "end_char_idx": 5174, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bc8126b3-ce29-489b-b5ba-2a7197ba5b4e": {"__data__": {"id_": "bc8126b3-ce29-489b-b5ba-2a7197ba5b4e", "embedding": null, "metadata": {"page_label": "6", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "89762987-2cc0-4698-9236-4da8f4837395", "node_type": "4", "metadata": {"page_label": "6", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "bfbcde953a8aaf8fd2bdb7e340bc687c73315b38f8a828a79b00fa7b83ef4784", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4bf61569-c869-4660-8c66-46cf601a2bf4", "node_type": "1", "metadata": {"page_label": "6", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "3a9945e55b0f3f0667a1c09c2cea0fcbabb64b5e812ec81670c056a30d7a02e1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4f04a498-9128-43a7-abcd-ff11209c959c", "node_type": "1", "metadata": {}, "hash": "863f2dd2fd7df06071e1cb9422f5fc2543c3a443bd5b66cbd209637b01400de8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Retrieved\nDecember 12, 2014.\n61. Van-Nam Huynh; Vladik Kreinovich; Songsak Sriboonchitta;\n2012. Uncertainty Analysis in Econometrics with Applications.\nSpringer Science & Business Media. p. 63. ISBN\u00a0978-3-642-\n35443-4.\n62. Phillip A. Laplante, (2010). Encyclopedia of Software Engineering\nThree-Volume Set (Print). CRC Press. p. 309. ISBN\u00a0978-1-351-\n24926-3.\n63. Muhammad H. Rashid, (2016). SPICE for Power Electronics and\nElectric Power. CRC Press. p. 6. ISBN\u00a0978-1-4398-6047-2.\n64. \"What is an integrated circuit (IC)? A vital component of modern\nelectronics\" (https://whatis.techtarget.com/de\ufb01nition/integrated-ci\nrcuit-IC). WhatIs.com. Archived (https://web.archive.org/web/202\n11115153823/https://whatis.techtarget.com/de\ufb01nition/integrated-c\nircuit-IC) from the original on November 15, 2021. Retrieved\nNovember 15, 2021.\n65. A. Thisted, Ronald (April 7, 1997). \"Computer Architecture\" (htt\np://galton.uchicago.edu/~thisted/Distribute/comparch.pdf) (PDF).\nThe University of Chicago. Archived (https://ghostarchive.org/arc\nhive/20221009/http://galton.uchicago.edu/~thisted/Distribute/com\nparch.pdf) (PDF) from the original on October 9, 2022.\n66. Jiacun Wang, (2017). Real-Time Embedded Systems. Wiley. p.\n12. ISBN\u00a0978-1-119-42070-5.\n67. Gordana Dodig-Crnkovic; Raffaela Giovagnoli, (2013).\nComputing Nature: Turing Centenary Perspective. Springer\nScience & Business Media. p. 247. ISBN\u00a0978-3-642-37225-4.\n68. Simon Elias Bibri (2018). Smart Sustainable Cities of the Future:\nThe Untapped Potential of Big Data Analytics and Context-Aware\nComputing for Advancing Sustainability. Springer. p. 74.\nISBN\u00a0978-3-319-73981-6.\n69. Peterson, Larry; Davie, Bruce (2000). Computer Networks: A\nSystems Approach (https://book.systemsapproach.org/index.htm\nl). Singapore: Harcourt Asia. ISBN\u00a09789814066433. Retrieved\nMay 24, 2025.\n70. Katz, Jonathan (2008). Introduction to modern cryptography (http\ns://www.worldcat.org/oclc/137325053). Yehuda Lindell. Boca\nRaton: Chapman & Hall/CRC. ISBN\u00a0978-1-58488-551-1.\nOCLC\u00a0137325053 (https://search.worldcat.org/oclc/137325053).\nArchived (https://web.archive.org/web/20220506003141/http://w\nww.worldcat.org/oclc/137325053) from the original on May 6,\n2022. Retrieved November 17, 2021.\n71. Rapaport, William J. (September 20, 2013). \"What Is\nComputation?\" (http://www.cse.buffalo.edu/~rapaport/computatio\nn.html). State University of New York at Buffalo. Archived (https://\nweb.archive.org/web/20010214002845/http://www.cse.buffalo.ed\nu/~rapaport/computation.html) from the original on February 14,\n2001. Retrieved August 31, 2013.\n72. B. Jack Copeland, (2012). Alan Turing's Electronic Brain: The\nStruggle to Build the ACE, the World's Fastest Computer. OUP\nOxford. p. 107. ISBN\u00a0978-0-19-960915-4.\n73. Charles W. Herbert, (2010). An Introduction to Programming\nUsing Alice 2.2. Cengage Learning. p. 122. ISBN\u00a00-538-47866-7.\n74.", "mimetype": "text/plain", "start_char_idx": 4719, "end_char_idx": 7580, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4f04a498-9128-43a7-abcd-ff11209c959c": {"__data__": {"id_": "4f04a498-9128-43a7-abcd-ff11209c959c", "embedding": null, "metadata": {"page_label": "6", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "89762987-2cc0-4698-9236-4da8f4837395", "node_type": "4", "metadata": {"page_label": "6", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "bfbcde953a8aaf8fd2bdb7e340bc687c73315b38f8a828a79b00fa7b83ef4784", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bc8126b3-ce29-489b-b5ba-2a7197ba5b4e", "node_type": "1", "metadata": {"page_label": "6", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "aac66e051b49285c57ac702ccdcd09e6b0a8a600bb35adffe5ca2b4ec2ad6002", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8172f5bf-f46a-4011-97d0-480744433c64", "node_type": "1", "metadata": {}, "hash": "f5d9f3267c925eb40068ace2e23d87c123f3849605e25de7f520eca7e01bb5f6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "State University of New York at Buffalo. Archived (https://\nweb.archive.org/web/20010214002845/http://www.cse.buffalo.ed\nu/~rapaport/computation.html) from the original on February 14,\n2001. Retrieved August 31, 2013.\n72. B. Jack Copeland, (2012). Alan Turing's Electronic Brain: The\nStruggle to Build the ACE, the World's Fastest Computer. OUP\nOxford. p. 107. ISBN\u00a0978-0-19-960915-4.\n73. Charles W. Herbert, (2010). An Introduction to Programming\nUsing Alice 2.2. Cengage Learning. p. 122. ISBN\u00a00-538-47866-7.\n74. Md. Rezaul Karim; Sridhar Alla, (2017). Scala and Spark for Big\nData Analytics: Explore the concepts of functional programming,\ndata streaming, and machine learning. Packt Publishing Ltd. p.\n87. ISBN\u00a0978-1-78355-050-0.\n75. Lex Sheehan, (2017). Learning Functional Programming in Go:\nChange the way you approach your applications using functional\nprogramming in Go. Packt Publishing Ltd. p. 16. ISBN\u00a0978-1-\n78728-604-7.\n76. Evelio Padilla, (2015). Substation Automation Systems: Design\nand Implementation. Wiley. p. 245. ISBN\u00a0978-1-118-98730-8.\n77. \"Multi-Paradigm Programming Language\" (https://web.archive.or\ng/web/20130821052407/https://developer.mozilla.org/en-US/doc\ns/multiparadigmlanguage.html). MDN Web Docs. Mozilla\nFoundation. Archived from the original (https://developer.mozilla.\norg/en-US/docs/multiparadigmlanguage.html) on August 21,\n2013.\n78. Meyer, Bertrand (April 2009). \"Viewpoint: Research evaluation\nfor computer science\" (https://pure.itu.dk/portal/da/publications/b\n474cea0-8288-11dd-b116-000ea68e967b). Communications of\nthe ACM. 25 (4): 31\u201334. doi:10.1145/1498765.1498780 (https://d\noi.org/10.1145%2F1498765.1498780). S2CID\u00a08625066 (https://a\npi.semanticscholar.org/CorpusID:8625066).\n79. Patterson, David (August 1999). \"Evaluating Computer Scientists\nand Engineers For Promotion and Tenure\" (http://cra.org/resourc\nes/bp-view/evaluating_computer_scientists_and_engineers_for_\npromotion_and_tenure/). Computing Research Association.\nArchived (https://web.archive.org/web/20150722020941/http://cr\na.org/resources/bp-view/evaluating_computer_scientists_and_en\ngineers_for_promotion_and_tenure/) from the original on July 22,\n2015. Retrieved July 19, 2015.\n80. Fortnow, Lance (August 2009). \"Viewpoint: Time for Computer\nScience to Grow Up\" (https://doi.org/10.1145%2F1536616.15366\n31). Communications of the ACM. 52 (8): 33\u201335.\ndoi:10.1145/1536616.1536631 (https://doi.org/10.1145%2F15366\n16.1536631).\nTucker, Allen B. (2004). Computer Science Handbook (2nd\u00a0ed.). Chapman and Hall/CRC. ISBN\u00a0978-1-58488-360-9.\nRalston, Anthony; Reilly, Edwin D.; Hemmendinger, David (2000). Encyclopedia of Computer Science (http://portal.acm.org/ralston.cfm) (4th\u00a0ed.). Grove's Dictionaries. ISBN\u00a0978-1-56159-248-7. Archived (http\ns://web.archive.org/web/20200608005417/https://dl.acm.org/doi/book/10.5555/1074100) from the original on June 8, 2020.", "mimetype": "text/plain", "start_char_idx": 7066, "end_char_idx": 9937, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8172f5bf-f46a-4011-97d0-480744433c64": {"__data__": {"id_": "8172f5bf-f46a-4011-97d0-480744433c64", "embedding": null, "metadata": {"page_label": "6", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "89762987-2cc0-4698-9236-4da8f4837395", "node_type": "4", "metadata": {"page_label": "6", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "bfbcde953a8aaf8fd2bdb7e340bc687c73315b38f8a828a79b00fa7b83ef4784", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4f04a498-9128-43a7-abcd-ff11209c959c", "node_type": "1", "metadata": {"page_label": "6", "file_name": "Computer science - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Computer science - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2906239, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "06ff28315e7de91d55d88bd33b849fdd61fa6dff7495abee2065ec26f92da3cf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "doi:10.1145/1536616.1536631 (https://doi.org/10.1145%2F15366\n16.1536631).\nTucker, Allen B. (2004). Computer Science Handbook (2nd\u00a0ed.). Chapman and Hall/CRC. ISBN\u00a0978-1-58488-360-9.\nRalston, Anthony; Reilly, Edwin D.; Hemmendinger, David (2000). Encyclopedia of Computer Science (http://portal.acm.org/ralston.cfm) (4th\u00a0ed.). Grove's Dictionaries. ISBN\u00a0978-1-56159-248-7. Archived (http\ns://web.archive.org/web/20200608005417/https://dl.acm.org/doi/book/10.5555/1074100) from the original on June 8, 2020. Retrieved February 6, 2011.\nEdwin D. Reilly (2003). Milestones in Computer Science and Information Technology (https://archive.org/details/milestonesincomp0000reil). Greenwood Publishing Group. ISBN\u00a0978-1-57356-521-9.\nKnuth, Donald E. (1996). Selected Papers on Computer Science. CSLI Publications, Cambridge University Press.\nCollier, Bruce (1990). The little engine that could've: The calculating machines of Charles Babbage (http://robroy.dyndns.info/collier/index.html). Garland Publishing Inc. ISBN\u00a0978-0-8240-0043-1. Archived (htt\nps://web.archive.org/web/20070120190231/http://robroy.dyndns.info/collier/index.html) from the original on January 20, 2007. Retrieved May 4, 2013.\nCohen, Bernard (2000). Howard Aiken, Portrait of a computer pioneer. The MIT press. ISBN\u00a0978-0-262-53179-5.\nTedre, Matti (2014). The Science of Computing: Shaping a Discipline. CRC Press, Taylor & Francis.\nRandell, Brian (1973). The origins of Digital computers, Selected Papers. Springer-Verlag. ISBN\u00a0978-3-540-06169-4.\nRandell, Brian (October\u2013December 1982). \"From Analytical Engine to Electronic Digital Computer: The Contributions of Ludgate, Torres, and Bush\" (https://web.archive.org/web/20130921055055/http://www.c\ns.ncl.ac.uk/publications/articles/papers/398.pdf) (PDF). IEEE Annals of the History of Computing. 4 (4): 327\u2013341. doi:10.1109/mahc.1982.10042 (https://doi.org/10.1109%2Fmahc.1982.10042).\nS2CID\u00a01737953 (https://api.semanticscholar.org/CorpusID:1737953). Archived from the original (http://www.cs.ncl.ac.uk/research/pubs/articles/papers/398.pdf) (PDF) on September 21, 2013.\nPeter J. Denning. Is computer science science? (http://portal.acm.org/citation.cfm?id=1053309&coll=&dl=ACM&CFID=15151515&CFTOKEN=6184618), Communications of the ACM, April 2005.\nPeter J. Denning, Great principles in computing curricula (http://portal.acm.org/citation.cfm?id=971303&dl=ACM&coll=&CFID=15151515&CFTOKEN=6184618), Technical Symposium on Computer Science\nEducation, 2004.\nDBLP Computer Science Bibliography (http://dblp.uni-trier.de/)\nAssociation for Computing Machinery (http://www.acm.org/)\nInstitute of Electrical and Electronics Engineers (https://www.ieee.org/)\nRetrieved from \"https://en.wikipedia.org/w/index.php?title=Computer_science&oldid=1292786046\"\nFurther reading\nExternal links\n6/7/25, 7:30 PM Computer science - Wikipedia\nhttps://en.wikipedia.org/wiki/Computer_science 6/6", "mimetype": "text/plain", "start_char_idx": 9432, "end_char_idx": 12317, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7548c7e9-18bc-4c9b-b37a-5064cbbfe002": {"__data__": {"id_": "7548c7e9-18bc-4c9b-b37a-5064cbbfe002", "embedding": null, "metadata": {"page_label": "1", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a93eea08-e93f-4f53-91f3-854e1e351f91", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "d8e865c508e18e2c05e99c8e2fd316ad5c429fc72bb7e632456dbf6f9f3d0850", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "18b4a453-dc7d-4100-9371-a7cb0022e15e", "node_type": "1", "metadata": {}, "hash": "052ddf6d7310714de9731924947b867e35427b591a73b8f8d90dc844780e8db7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "An embedded system on a plug-in card\nwith processor, memory, power supply,\nand external interfaces\nEmbedded Computer Sub-Assembly for\nAccupoll Electronic Voting Machine[7]\nEmbedded system\nAn embedded system is a specialized computer system\u2014a combination of a computer processor, computer memory, and input/output peripheral devices\u2014that has a\ndedicated function within a larger mechanical or electronic system.[1][2] It is embedded as part of a complete device often including electrical or electronic hardware and\nmechanical parts. Because an embedded system typically controls physical operations of the machine that it is embedded within, it often has real-time computing\nconstraints. Embedded systems control many devices in common use.[3] In 2009, it was estimated that ninety-eight percent of all microprocessors manufactured were used\nin embedded systems.[4]\nModern embedded systems are often based on microcontrollers (i.e. microprocessors with integrated memory and peripheral interfaces), but ordinary microprocessors\n(using external chips for memory and peripheral interface circuits) are also common, especially in more complex systems. In either case, the processor(s) used may be types\nranging from general purpose to those specialized in a certain class of computations, or even custom designed for the application at hand. A common standard class of\ndedicated processors is the digital signal processor (DSP).\nSince the embedded system is dedicated to specific tasks, design engineers can optimize it to reduce the size and cost of the product and increase its reliability and\nperformance. Some embedded systems are mass-produced, benefiting from economies of scale.\nEmbedded systems range in size from portable personal devices such as digital watches and MP3 players to bigger machines like home appliances, industrial assembly lines, robots, transport vehicles, traffic light\ncontrollers, and medical imaging systems. Often they constitute subsystems of other machines like avionics in aircraft and astrionics in spacecraft. Large installations like factories, pipelines, and electrical grids\nrely on multiple embedded systems networked together. Generalized through software customization, embedded systems such as programmable logic controllers frequently comprise their functional units.\nEmbedded systems range from those low in complexity, with a single microcontroller chip, to very high with multiple units, peripherals and networks, which may reside in equipment racks or across large\ngeographical areas connected via long-distance communications lines.\nThe origins of the microprocessor and the microcontroller can be traced back to the MOS integrated circuit, which is an integrated circuit chip fabricated from MOSFETs (metal\u2013oxide\u2013semiconductor field-effect\ntransistors) and was developed in the early 1960s. By 1964, MOS chips had reached higher transistor density and lower manufacturing costs than bipolar chips. MOS chips further increased in complexity at a rate\npredicted by Moore's law, leading to large-scale integration (LSI) with hundreds of transistors on a single MOS chip by the late 1960s. The application of MOS LSI chips to computing was the basis for the first\nmicroprocessors, as engineers began recognizing that a complete computer processor system could be contained on several MOS LSI chips.[5]\nThe first multi-chip microprocessors, the Four-Phase Systems AL1 in 1969 and the Garrett AiResearch MP944 in 1970, were developed with multiple MOS LSI chips. The first single-chip microprocessor was the\nIntel 4004, released in 1971. It was developed by Federico Faggin, using his silicon-gate MOS technology, along with Intel engineers Marcian Hoff and Stan Mazor, and Busicom engineer Masatoshi Shima.[6]\nOne of the first recognizably modern embedded systems was the Apollo Guidance Computer, developed ca. 1965 by Charles Stark Draper at the MIT Instrumentation Laboratory. At the project's inception, the\nApollo guidance computer was considered the riskiest item in the Apollo project as it employed the then newly developed monolithic integrated circuits to reduce the computer's size and weight.\nAn early mass-produced embedded system was the Autonetics D-17 guidance computer for the Minuteman missile, released in 1961. When the Minuteman II went into production in 1966, the D-17 was replaced\nwith a new computer that represented the first high-volume use of integrated circuits.\nSince these early applications in the 1960s, embedded systems have come down in price and there has been a dramatic rise in processing power and functionality. An early microprocessor, the Intel 4004 (released\nin 1971), was designed for calculators and other small systems but still required external memory and support chips.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4761, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "18b4a453-dc7d-4100-9371-a7cb0022e15e": {"__data__": {"id_": "18b4a453-dc7d-4100-9371-a7cb0022e15e", "embedding": null, "metadata": {"page_label": "1", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a93eea08-e93f-4f53-91f3-854e1e351f91", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "d8e865c508e18e2c05e99c8e2fd316ad5c429fc72bb7e632456dbf6f9f3d0850", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7548c7e9-18bc-4c9b-b37a-5064cbbfe002", "node_type": "1", "metadata": {"page_label": "1", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "224cc7d3ca6efbd19abc7656177250652e51762c6b34f7f66116c8aa973147fe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e1e1ba4f-f7a7-4526-9deb-23d878a613ba", "node_type": "1", "metadata": {}, "hash": "5a19138d2f1cebb79d2b6f83fa9ec42f3a17b7c55a4f9468ea8dfd2a835dd02f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1965 by Charles Stark Draper at the MIT Instrumentation Laboratory. At the project's inception, the\nApollo guidance computer was considered the riskiest item in the Apollo project as it employed the then newly developed monolithic integrated circuits to reduce the computer's size and weight.\nAn early mass-produced embedded system was the Autonetics D-17 guidance computer for the Minuteman missile, released in 1961. When the Minuteman II went into production in 1966, the D-17 was replaced\nwith a new computer that represented the first high-volume use of integrated circuits.\nSince these early applications in the 1960s, embedded systems have come down in price and there has been a dramatic rise in processing power and functionality. An early microprocessor, the Intel 4004 (released\nin 1971), was designed for calculators and other small systems but still required external memory and support chips. By the early 1980s, memory, input and output system components had been integrated into the\nsame chip as the processor forming a microcontroller. Microcontrollers find applications where a general-purpose computer would be too costly. As the cost of microprocessors and microcontrollers fell, the\nprevalence of embedded systems increased.\nA comparatively low-cost microcontroller may be programmed to fulfill the same role as a large number of separate components. With microcontrollers, it became feasible to replace, even in consumer products,\nexpensive knob-based analog components such as potentiometers and variable capacitors with up/down buttons or knobs read out by a microprocessor. Although in this context an embedded system is usually\nmore complex than a traditional solution, most of the complexity is contained within the microcontroller itself. Very few additional components may be needed and most of the design effort is in the software.\nSoftware prototype and test can be quicker compared with the design and construction of a new circuit not using an embedded processor.\nEmbedded systems are commonly found in consumer, industrial, automotive, home appliances, medical, telecommunication, commercial, aerospace and military\napplications.\nTelecommunications systems employ numerous embedded systems from telephone switches for the network to cell phones at the end user. Computer networking uses\ndedicated routers and network bridges to route data.\nConsumer electronics include MP3 players, television sets, mobile phones, video game consoles, digital cameras, GPS receivers, and printers. Household appliances, such as\nmicrowave ovens, washing machines and dishwashers, include embedded systems to provide flexibility, efficiency and features. Advanced heating, ventilation, and air\nconditioning (HVAC) systems use networked thermostats to more accurately and efficiently control temperature that can change by time of day and season. Home\nautomation uses wired and wireless networking that can be used to control lights, climate, security, audio/visual, surveillance, etc., all of which use embedded devices for\nsensing and controlling.\nTransportation systems from flight to automobiles increasingly use embedded systems. New airplanes contain advanced avionics such as inertial guidance systems and GPS\nreceivers that also have considerable safety requirements. Spacecraft rely on astrionics systems for trajectory correction. Various electric motors \u2014 brushless DC motors,\ninduction motors and DC motors \u2014 use electronic motor controllers. Automobiles, electric vehicles, and hybrid vehicles increasingly use embedded systems to maximize\nefficiency and reduce pollution. Other automotive safety systems using embedded systems include anti-lock braking system (ABS), electronic stability control (ESC/ESP),\ntraction control (TCS) and automatic four-wheel drive.\nMedical equipment uses embedded systems for monitoring, and various medical imaging (positron emission tomography (PET), single-photon emission computed tomography (SPECT), computed tomography\n(CT), and magnetic resonance imaging (MRI) for non-invasive internal inspections. Embedded systems within medical equipment are often powered by industrial computers.[8]\nEmbedded systems are used for safety-critical systems in aerospace and defense industries. Unless connected to wired or wireless networks via on-chip 3G cellular or other methods for IoT monitoring and control\npurposes, these systems can be isolated from hacking and thus be more secure. For fire safety, the systems can be designed to have a greater ability to handle higher temperatures and continue to operate. In\ndealing with security, the embedded systems can be self-sufficient and be able to deal with cut electrical and communication systems.\nMiniature wireless devices called motes are networked wireless sensors. Wireless sensor networking makes use of miniaturization made possible by advanced integrated circuit (IC) design to couple full wireless\nsubsystems to sophisticated sensors, enabling people and companies to measure a myriad of things in the physical world and act on this information through monitoring and control systems.", "mimetype": "text/plain", "start_char_idx": 3855, "end_char_idx": 8954, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e1e1ba4f-f7a7-4526-9deb-23d878a613ba": {"__data__": {"id_": "e1e1ba4f-f7a7-4526-9deb-23d878a613ba", "embedding": null, "metadata": {"page_label": "1", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a93eea08-e93f-4f53-91f3-854e1e351f91", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "d8e865c508e18e2c05e99c8e2fd316ad5c429fc72bb7e632456dbf6f9f3d0850", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "18b4a453-dc7d-4100-9371-a7cb0022e15e", "node_type": "1", "metadata": {"page_label": "1", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "ff9af65dc9f163173a7b9c6d1f70509bf073e97b2280f65b58df381fe95d2b35", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Embedded systems within medical equipment are often powered by industrial computers.[8]\nEmbedded systems are used for safety-critical systems in aerospace and defense industries. Unless connected to wired or wireless networks via on-chip 3G cellular or other methods for IoT monitoring and control\npurposes, these systems can be isolated from hacking and thus be more secure. For fire safety, the systems can be designed to have a greater ability to handle higher temperatures and continue to operate. In\ndealing with security, the embedded systems can be self-sufficient and be able to deal with cut electrical and communication systems.\nMiniature wireless devices called motes are networked wireless sensors. Wireless sensor networking makes use of miniaturization made possible by advanced integrated circuit (IC) design to couple full wireless\nsubsystems to sophisticated sensors, enabling people and companies to measure a myriad of things in the physical world and act on this information through monitoring and control systems. These motes are\ncompletely self-contained and will typically run off a battery source for years before the batteries need to be changed or charged.\nEmbedded systems are designed to perform a specific task, in contrast with general-purpose computers designed for multiple tasks. Some have real-time performance constraints that must be met, for reasons\nsuch as safety and usability; others may have low or no performance requirements, allowing the system hardware to be simplified to reduce costs.\nEmbedded systems are not always standalone devices. Many embedded systems are a small part within a larger device that serves a more general purpose. For example, the Gibson Robot Guitar features an\nembedded system for tuning the strings, but the overall purpose of the Robot Guitar is to play music.[9] Similarly, an embedded system in an automobile provides a specific function as a subsystem of the car itself.\nThe program instructions written for embedded systems are referred to as firmware, and are stored in read-only memory or flash memory chips. They run with limited computer hardware resources: little\nmemory, small or non-existent keyboard or screen.\nHistory\nBackground\nDevelopment\nApplications\nCharacteristics\n6/7/25, 7:32 PM Embedded system - Wikipedia\nhttps://en.wikipedia.org/wiki/Embedded_system 1/4", "mimetype": "text/plain", "start_char_idx": 7920, "end_char_idx": 10268, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "42b5b13b-3022-4d92-a7b2-c2338f638567": {"__data__": {"id_": "42b5b13b-3022-4d92-a7b2-c2338f638567", "embedding": null, "metadata": {"page_label": "2", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2124450a-bae9-44d8-8f95-286e98fd4c9a", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "f8e28700bde96222a37601122a90163be1aad5ae31ff858a0285725dd56bb5c3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d6d81e84-2514-4b63-9256-49aa1d68cc78", "node_type": "1", "metadata": {}, "hash": "a8f90ec302a404c32aab6bd3396941dbeecbb0c7062171d0016f22a0753b8f2a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "e-con Systems eSOM270 & eSOM300\nComputer on Modules\nEmbedded system text user interface\nusing MicroVGA[nb 1]\nA close-up of the SMSC LAN91C110\n(SMSC 91x) chip, an embedded Ethernet\nchip\nEmbedded systems range from no user interface at all, in systems dedicated to one task, to complex graphical user interfaces that resemble modern computer desktop\noperating systems. Simple embedded devices use buttons, light-emitting diodes (LED), graphic or character liquid-crystal displays (LCD) with a simple menu system. More\nsophisticated devices that use a graphical screen with touch sensing or screen-edge soft keys provide flexibility while minimizing space used: the meaning of the buttons can\nchange with the screen, and selection involves the natural behavior of pointing at what is desired.\nSome systems provide user interface remotely with the help of a serial (e.g. RS-232) or network (e.g. Ethernet) connection. This approach extends the capabilities of the\nembedded system, avoids the cost of a display, simplifies the board support package (BSP) and allows designers to build a rich user interface on the PC. A good example of\nthis is the combination of an embedded HTTP server running on an embedded device (such as an IP camera or a network router). The user interface is displayed in a web\nbrowser on a PC connected to the device.\nExamples of properties of typical embedded computers when compared with general-purpose counterparts, are low power consumption, small size, rugged operating\nranges, and low per-unit cost. This comes at the expense of limited processing resources.\nNumerous microcontrollers have been developed for embedded systems use. General-purpose microprocessors are also used in embedded systems, but generally, require\nmore support circuitry than microcontrollers.\nPC/104 and PC/104+ are examples of standards for ready-made computer boards intended for small, low-volume embedded and ruggedized systems. These are mostly\nx86-based and often physically small compared to a standard PC, although still quite large compared to most simple (8/16-bit) embedded systems. They may use DOS,\nFreeBSD, Linux, NetBSD, OpenHarmony or an embedded real-time operating system (RTOS) such as MicroC/OS-II, QNX or VxWorks.\nIn certain applications, where small size or power efficiency are not primary concerns, the components used may be compatible with those used in general-purpose x86\npersonal computers. Boards such as the VIA EPIA range help to bridge the gap by being PC-compatible but highly integrated, physically smaller or have other attributes\nmaking them attractive to embedded engineers. The advantage of this approach is that low-cost commodity components may be used along with the same software development tools used for general software\ndevelopment. Systems built in this way are still regarded as embedded since they are integrated into larger devices and fulfill a single role. Examples of devices that may adopt this approach are automated teller\nmachines (ATM) and arcade machines, which contain code specific to the application.\nHowever, most ready-made embedded systems boards are not PC-centered and do not use the ISA or PCI busses. When a system-on-a-chip processor is involved, there may be little benefit to having a\nstandardized bus connecting discrete components, and the environment for both hardware and software tools may be very different.\nOne common design style uses a small system module, perhaps the size of a business card, holding high density BGA chips such as an ARM-based system-on-a-chip processor and peripherals, external flash\nmemory for storage, and DRAM for runtime memory. The module vendor will usually provide boot software and make sure there is a selection of operating systems, usually including Linux and some real-time\nchoices. These modules can be manufactured in high volume, by organizations familiar with their specialized testing issues, and combined with much lower volume custom mainboards with application-specific\nexternal peripherals. Prominent examples of this approach include Arduino and Raspberry Pi.\nA system on a chip (SoC) contains a complete system - consisting of multiple processors, multipliers, caches, even different types of memory and commonly various peripherals like interfaces for wired or wireless\ncommunication on a single chip. Often graphics processing units (GPU) and DSPs are included such chips. SoCs can be implemented as an application-specific integrated circuit (ASIC) or using a field-\nprogrammable gate array (FPGA) which typically can be reconfigured.\nASIC implementations are common for very-high-volume embedded systems like mobile phones and smartphones. ASIC or FPGA implementations may be used for not-so-high-volume embedded systems with\nspecial needs in kind of signal processing performance, interfaces and reliability, like in avionics.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4858, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d6d81e84-2514-4b63-9256-49aa1d68cc78": {"__data__": {"id_": "d6d81e84-2514-4b63-9256-49aa1d68cc78", "embedding": null, "metadata": {"page_label": "2", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2124450a-bae9-44d8-8f95-286e98fd4c9a", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "f8e28700bde96222a37601122a90163be1aad5ae31ff858a0285725dd56bb5c3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "42b5b13b-3022-4d92-a7b2-c2338f638567", "node_type": "1", "metadata": {"page_label": "2", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "fd1d20d7437db6eebbc631cc8cd9c58e6f7db6e0d85bca73fe1582ad2d1b877a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a014e101-75bc-4aae-9898-8f7cb001c4db", "node_type": "1", "metadata": {}, "hash": "244bb0657d5ca2356c124d88c92a1ed350ae0f4c2d106952a4170839f6d15621", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "These modules can be manufactured in high volume, by organizations familiar with their specialized testing issues, and combined with much lower volume custom mainboards with application-specific\nexternal peripherals. Prominent examples of this approach include Arduino and Raspberry Pi.\nA system on a chip (SoC) contains a complete system - consisting of multiple processors, multipliers, caches, even different types of memory and commonly various peripherals like interfaces for wired or wireless\ncommunication on a single chip. Often graphics processing units (GPU) and DSPs are included such chips. SoCs can be implemented as an application-specific integrated circuit (ASIC) or using a field-\nprogrammable gate array (FPGA) which typically can be reconfigured.\nASIC implementations are common for very-high-volume embedded systems like mobile phones and smartphones. ASIC or FPGA implementations may be used for not-so-high-volume embedded systems with\nspecial needs in kind of signal processing performance, interfaces and reliability, like in avionics.\nEmbedded systems talk with the outside world via peripherals, such as:\nSerial communication interfaces (SCI): RS-232, RS-422, RS-485, etc.\nSynchronous Serial Interface: I2C, SPI, SSC and ESSI (Enhanced Synchronous Serial Interface)\nUniversal Serial Bus (USB)\nMedia cards (SD cards, CompactFlash, etc.)\nNetwork interface controller: Ethernet, WiFi, etc.\nFieldbuses: CAN bus, LIN-Bus, PROFIBUS, etc.\nTimers: Phase-locked loops, programmable interval timers\nGeneral Purpose Input/Output (GPIO)\nAnalog-to-digital and digital-to-analog converters\nDebugging: JTAG, In-system programming, background debug mode interface port, BITP, and DB9 ports.\nAs with other software, embedded system designers use compilers, assemblers, and debuggers to develop embedded system software. However, they may also use more specific tools:\nIn circuit debuggers or emulators (see next section).\nUtilities to add a checksum or CRC to a program, so the embedded system can check if the program is valid.\nFor systems using digital signal processing, developers may use a computational notebook to simulate the mathematics.\nSystem-level modeling and simulation tools help designers to construct simulation models of a system with hardware components such as processors, memories, DMA, interfaces, buses and software\nbehavior \ufb02ow as a state diagram or \ufb02ow diagram using con\ufb01gurable library blocks. Simulation is conducted to select the right components by performing power vs. performance trade-offs, reliability analysis\nand bottleneck analysis. Typical reports that help a designer to make architecture decisions include application latency, device throughput, device utilization, power consumption of the full system as well as\ndevice-level power consumption.\nA model-based development tool creates and simulates graphical data \ufb02ow and UML state chart diagrams of components like digital \ufb01lters, motor controllers, communication protocol decoding and multi-rate\ntasks.\nCustom compilers and linkers may be used to optimize specialized hardware.\nAn embedded system may have its own special language or design tool, or add enhancements to an existing language such as Forth or Basic.\nAnother alternative is to add a RTOS or embedded operating system\nModeling and code generating tools often based on state machines\nSoftware tools can come from several sources:\nSoftware companies that specialize in the embedded market\nPorted from the GNU software development tools\nSometimes, development tools for a personal computer can be used if the embedded processor is a close relative to a common PC processor\nEmbedded software often requires a variety of development tools, including programming languages such as C++, Rust, or Python, and frameworks like Qt for graphical interfaces. These tools enable developers\nto create efficient, scalable, and feature-rich applications tailored to the specific requirements of embedded systems. The choice of tools is driven by factors such as real-time performance, integration with\nhardware, or energy efficiency.\nAs the complexity of embedded systems grows, higher-level tools and operating systems are migrating into machinery where it makes sense. For example, cellphones, personal digital assistants and other\nconsumer computers often need significant software that is purchased or provided by a person other than the manufacturer of the electronics. In these systems, an open programming environment such as Linux,\nNetBSD, FreeBSD, OSGi or Embedded Java is required so that the third-party software provider can sell to a large market.\nEmbedded debugging may be performed at different levels, depending on the facilities available.", "mimetype": "text/plain", "start_char_idx": 3799, "end_char_idx": 8501, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a014e101-75bc-4aae-9898-8f7cb001c4db": {"__data__": {"id_": "a014e101-75bc-4aae-9898-8f7cb001c4db", "embedding": null, "metadata": {"page_label": "2", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2124450a-bae9-44d8-8f95-286e98fd4c9a", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "f8e28700bde96222a37601122a90163be1aad5ae31ff858a0285725dd56bb5c3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d6d81e84-2514-4b63-9256-49aa1d68cc78", "node_type": "1", "metadata": {"page_label": "2", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "e5925f8f50c7202b4e58a4b9f5b50d8d6666e6525233342d3629fa1c0eb05ffc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "These tools enable developers\nto create efficient, scalable, and feature-rich applications tailored to the specific requirements of embedded systems. The choice of tools is driven by factors such as real-time performance, integration with\nhardware, or energy efficiency.\nAs the complexity of embedded systems grows, higher-level tools and operating systems are migrating into machinery where it makes sense. For example, cellphones, personal digital assistants and other\nconsumer computers often need significant software that is purchased or provided by a person other than the manufacturer of the electronics. In these systems, an open programming environment such as Linux,\nNetBSD, FreeBSD, OSGi or Embedded Java is required so that the third-party software provider can sell to a large market.\nEmbedded debugging may be performed at different levels, depending on the facilities available. Considerations include: does it slow down the main application, how close is the debugged system or application to\nthe actual system or application, how expressive are the triggers that can be set for debugging (e.g., inspecting the memory when a particular program counter value is reached), and what can be inspected in the\ndebugging process (such as, only memory, or memory and registers, etc.).\nFrom simplest to most sophisticated debugging techniques and systems are roughly grouped into the following areas:\nInteractive resident debugging, using the simple shell provided by the embedded operating system (e.g. Forth and Basic)\nSoftware-only debuggers have the bene\ufb01t that they do not need any hardware modi\ufb01cation but have to carefully control what they record in order to conserve time and storage space.[ 1 0 ] \nUser interfaces\nProcessors in embedded systems\nReady-made computer boards\nASIC and FPGA SoC solutions\nPeripherals\nTools\nDebugging\n6/7/25, 7:32 PM Embedded system - Wikipedia\nhttps://en.wikipedia.org/wiki/Embedded_system 2/4", "mimetype": "text/plain", "start_char_idx": 7608, "end_char_idx": 9546, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6b72caa8-8f6d-41c5-9235-2e74ad2cbe8b": {"__data__": {"id_": "6b72caa8-8f6d-41c5-9235-2e74ad2cbe8b", "embedding": null, "metadata": {"page_label": "3", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a78fbb5-bd04-4b9c-995a-4631842b06be", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "de994296b964f697759185c8e82cca1e044bb27141a1b6d38f6713674b038fc5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b2fb9369-fb01-45b4-ae35-5f679bb855fb", "node_type": "1", "metadata": {}, "hash": "2803cf483307141240e83c149600f3a113100c0903d593cc86f65189483dc77d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "External debugging using logging or serial port output to trace operation using either a monitor in \ufb02ash or using a debug server like the Remedy Debugger that even works for heterogeneous multicore\nsystems.\nAn in-circuit debugger (ICD), a hardware device that connects to the microprocessor via a JTAG or Nexus interface.[ 1 1 ]  This allows the operation of the microprocessor to be controlled externally, but is\ntypically restricted to speci\ufb01c debugging capabilities in the processor.\nAn in-circuit emulator (ICE) replaces the microprocessor with a simulated equivalent, providing full control over all aspects of the microprocessor.\nA complete emulator provides a simulation of all aspects of the hardware, allowing all of it to be controlled and modi\ufb01ed, and allowing debugging on a normal PC. The downsides are expense and slow\noperation, in some cases up to 100 times slower than the \ufb01nal system.\nFor SoC designs, the typical approach is to verify and debug the design on an FPGA prototype board. Tools such as Certus[ 1 2 ]  are used to insert probes in the FPGA implementation that make signals\navailable for observation. This is used to debug hardware, \ufb01rmware and software interactions across multiple FPGAs in an implementation with capabilities similar to a logic analyzer.\nUnless restricted to external debugging, the programmer can typically load and run software through the tools, view the code running in the processor, and start or stop its operation. The view of the code may be\nas high-level programming language, assembly code or mixture of both.\nReal-time operating systems often support tracing of operating system events. A graphical view is presented by a host PC tool, based on a recording of the system behavior. The trace recording can be performed in\nsoftware, by the RTOS, or by special tracing hardware. RTOS tracing allows developers to understand timing and performance issues of the software system and gives a good understanding of the high-level\nsystem behaviors. Trace recording in embedded systems can be achieved using hardware or software solutions. Software-based trace recording does not require specialized debugging hardware and can be used to\nrecord traces in deployed devices, but it can have an impact on CPU and RAM usage.[13] One example of a software-based tracing method used in RTOS environments is the use of empty macros which are invoked\nby the operating system at strategic places in the code, and can be implemented to serve as hooks.\nEmbedded systems often reside in machines that are expected to run continuously for years without error, and in some cases recover by themselves if an error occurs. Therefore, the software is usually developed\nand tested more carefully than that for personal computers, and unreliable mechanical moving parts such as disk drives, switches or buttons are avoided.\nSpecific reliability issues may include:\nThe system cannot safely be shut down for repair, or it is too inaccessible to repair. Examples include space systems, undersea cables, navigational beacons, bore-hole systems, and automobiles.\nThe system must be kept running for safety reasons. Reduced functionality in the event of failure may be intolerable. Often backups are selected by an operator. Examples include aircraft navigation, reactor\ncontrol systems, safety-critical chemical factory controls, train signals.\nThe system will lose large amounts of money when shut down: Telephone switches, factory controls, bridge and elevator controls, funds transfer and market making, automated sales and service.\nA variety of techniques are used, sometimes in combination, to recover from errors\u2014both software bugs such as memory leaks, and also soft errors in the hardware:\nwatchdog timer that resets and restarts the system unless the software periodically noti\ufb01es the watchdog subsystems\nDesigning with a trusted computing base (TCB) architecture ensures a highly secure and reliable system environment[ 1 4 ] \nA hypervisor designed for embedded systems is able to provide secure encapsulation for any subsystem component so that a compromised software component cannot interfere with other subsystems, or\nprivileged-level system software.[ 1 5 ]  This encapsulation keeps faults from propagating from one subsystem to another, thereby improving reliability. This may also allow a subsystem to be automatically shut\ndown and restarted on fault detection.\nImmunity-aware programming can help engineers produce more reliable embedded systems code.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4498, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b2fb9369-fb01-45b4-ae35-5f679bb855fb": {"__data__": {"id_": "b2fb9369-fb01-45b4-ae35-5f679bb855fb", "embedding": null, "metadata": {"page_label": "3", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a78fbb5-bd04-4b9c-995a-4631842b06be", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "de994296b964f697759185c8e82cca1e044bb27141a1b6d38f6713674b038fc5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6b72caa8-8f6d-41c5-9235-2e74ad2cbe8b", "node_type": "1", "metadata": {"page_label": "3", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "0cc1fd68acb19d95527903d589cce13675c9851c427b2f5eb2dcf74b80a6b9e6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "34811cb1-4ea9-439e-b895-ac80eb51048e", "node_type": "1", "metadata": {}, "hash": "1467f27ea35e5bdd6e468f3827e59386831973b415a990d991420487dc0e0c01", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "A variety of techniques are used, sometimes in combination, to recover from errors\u2014both software bugs such as memory leaks, and also soft errors in the hardware:\nwatchdog timer that resets and restarts the system unless the software periodically noti\ufb01es the watchdog subsystems\nDesigning with a trusted computing base (TCB) architecture ensures a highly secure and reliable system environment[ 1 4 ] \nA hypervisor designed for embedded systems is able to provide secure encapsulation for any subsystem component so that a compromised software component cannot interfere with other subsystems, or\nprivileged-level system software.[ 1 5 ]  This encapsulation keeps faults from propagating from one subsystem to another, thereby improving reliability. This may also allow a subsystem to be automatically shut\ndown and restarted on fault detection.\nImmunity-aware programming can help engineers produce more reliable embedded systems code.[ 1 6 ] [ 1 7 ]  Guidelines and coding rules such as MISRA C/C++ aim to assist developers produce reliable, portable\n\ufb01rmware in a number of different ways: typically by advising or mandating against coding practices which may lead to run-time errors (memory leaks, invalid pointer uses), use of run-time checks and\nexception handling (range/sanity checks, divide-by-zero and buffer index validity checks, default cases in logic checks), loop bounding, production of human-readable, well commented and well structured\ncode, and avoiding language ambiguities which may lead to compiler-induced inconsistencies or side-effects (expression evaluation ordering, recursion, certain types of macro). These rules can often be used\nin conjunction with code static checkers or bounded model checking for functional veri\ufb01cation purposes, and also assist in determination of code timing properties.[ 1 6 ] \nFor high-volume systems such as mobile phones, minimizing cost is usually the primary design consideration. Engineers typically select hardware that is just good enough to implement the necessary functions.\nFor low-volume or prototype embedded systems, general-purpose computers may be adapted by limiting the programs or by replacing the operating system with an RTOS.\nIn 1978 National Electrical Manufacturers Association released ICS\u00a03-1978, a standard for programmable microcontrollers,[18] including almost any computer-based controllers, such as single-board computers,\nnumerical, and event-based controllers.\nThere are several different types of software architecture in common use.\nIn this design, the software simply has a loop which monitors the input devices. The loop calls subroutines, each of which manages a part of the hardware or software. Hence it is called a simple control loop or\nprogrammed input-output.\nSome embedded systems are predominantly controlled by interrupts. This means that tasks performed by the system are triggered by different kinds of events; an interrupt could be generated, for example, by a\ntimer at a predefined interval, or by a serial port controller receiving data.\nThis architecture is used if event handlers need low latency, and the event handlers are short and simple. These systems run a simple task in a main loop also, but this task is not very sensitive to unexpected\ndelays. Sometimes the interrupt handler will add longer tasks to a queue structure. Later, after the interrupt handler has finished, these tasks are executed by the main loop. This method brings the system close to\na multitasking kernel with discrete processes.\nCooperative multitasking is very similar to the simple control loop scheme, except that the loop is hidden in an API.[3][1] The programmer defines a series of tasks, and each task gets its own environment to run in.\nWhen a task is idle, it calls an idle routine which passes control to another task.\nThe advantages and disadvantages are similar to that of the control loop, except that adding new software is easier, by simply writing a new task, or adding to the queue.\nIn this type of system, a low-level piece of code switches between tasks or threads based on a timer invoking an interrupt. This is the level at which the system is generally considered to have an operating system\nkernel. Depending on how much functionality is required, it introduces more or less of the complexities of managing multiple tasks running conceptually in parallel.\nAs any code can potentially damage the data of another task (except in systems using a memory management unit) programs must be carefully designed and tested, and access to shared data must be controlled by\nsome synchronization strategy such as message queues, semaphores or a non-blocking synchronization scheme.\nBecause of these complexities, it is common for organizations to use an off-the-shelf RTOS, allowing the application programmers to concentrate on device functionality rather than operating system services. The\nchoice to include an RTOS brings in its own issues, however, as the selection must be made prior to starting the application development process.", "mimetype": "text/plain", "start_char_idx": 3563, "end_char_idx": 8597, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "34811cb1-4ea9-439e-b895-ac80eb51048e": {"__data__": {"id_": "34811cb1-4ea9-439e-b895-ac80eb51048e", "embedding": null, "metadata": {"page_label": "3", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a78fbb5-bd04-4b9c-995a-4631842b06be", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "de994296b964f697759185c8e82cca1e044bb27141a1b6d38f6713674b038fc5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b2fb9369-fb01-45b4-ae35-5f679bb855fb", "node_type": "1", "metadata": {"page_label": "3", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "41a45cc9e3f88300f5fc3866c32c3f474aaf6a404c1a09efd0d04fc51350754c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "In this type of system, a low-level piece of code switches between tasks or threads based on a timer invoking an interrupt. This is the level at which the system is generally considered to have an operating system\nkernel. Depending on how much functionality is required, it introduces more or less of the complexities of managing multiple tasks running conceptually in parallel.\nAs any code can potentially damage the data of another task (except in systems using a memory management unit) programs must be carefully designed and tested, and access to shared data must be controlled by\nsome synchronization strategy such as message queues, semaphores or a non-blocking synchronization scheme.\nBecause of these complexities, it is common for organizations to use an off-the-shelf RTOS, allowing the application programmers to concentrate on device functionality rather than operating system services. The\nchoice to include an RTOS brings in its own issues, however, as the selection must be made prior to starting the application development process. This timing forces developers to choose the embedded operating\nsystem for their device based on current requirements and so restricts future options to a large extent.[19]\nThe level of complexity in embedded systems is continuously growing as devices are required to manage peripherals and tasks such as serial, USB, TCP/IP, Bluetooth, Wireless LAN, trunk radio, multiple\nchannels, data and voice, enhanced graphics, multiple states, multiple threads, numerous wait states and so on. These trends are leading to the uptake of embedded middleware in addition to an RTOS.\nA microkernel allocates memory and switches the CPU to different threads of execution. User-mode processes implement major functions such as file systems, network interfaces, etc.\nExokernels communicate efficiently by normal subroutine calls. The hardware and all the software in the system are available to and extensible by application programmers.\nA monolithic kernel is a relatively large kernel with sophisticated capabilities adapted to suit an embedded environment. This gives programmers an environment similar to a desktop operating system like Linux\nor Microsoft Windows, and is therefore very productive for development. On the downside, it requires considerably more hardware resources, is often more expensive, and, because of the complexity of these\nkernels, can be less predictable and reliable.\nTracing\nReliability\nHigh vs. low volume\nEmbedded software architectures\nSimple control loop\nInterrupt-controlled system\nCooperative multitasking\nPreemptive multitasking or multi-threading\nMicrokernels and exokernels\nMonolithic kernels\n6/7/25, 7:32 PM Embedded system - Wikipedia\nhttps://en.wikipedia.org/wiki/Embedded_system 3/4", "mimetype": "text/plain", "start_char_idx": 7548, "end_char_idx": 10307, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "39476b22-6a00-4c08-9943-8720369367c4": {"__data__": {"id_": "39476b22-6a00-4c08-9943-8720369367c4", "embedding": null, "metadata": {"page_label": "4", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c7a2e0e1-7d0b-4fd6-8433-ca219cf26399", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "503e047697aeaed5e1bbd019196f229d2b1f2c1cb74610686aab56099ba848a0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fc883f8d-5328-4795-88b8-4799d9f7c2ed", "node_type": "1", "metadata": {}, "hash": "22acf7df69c727f59da07d75bff587ad1226a1fb67e60a43d235fa383dfbbdbd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Electronics portal\nCommon examples of embedded monolithic kernels are embedded Linux, VXWorks and Windows CE.\nDespite the increased cost in hardware, this type of embedded system is increasing in popularity, especially on the more powerful embedded devices such as wireless routers and GPS navigation systems.\nIn addition to the core operating system, many embedded systems have additional upper-layer software components. These components include networking protocol stacks like CAN, TCP/IP, FTP, HTTP, and\nHTTPS, and storage capabilities like FAT and flash memory management systems. If the embedded device has audio and video capabilities, then the appropriate drivers and codecs will be present in the system.\nIn the case of the monolithic kernels, many of these software layers may be included in the kernel. In the RTOS category, the availability of additional software components depends upon the commercial offering.\nIn the automotive sector, AUTOSAR is a standard architecture for embedded software.\nCommunications server\nCyber-physical system\nElectronic control unit\nInformation appliance\nIntegrated development environment\nPhotonically Optimized Embedded Microprocessors\nSilicon compiler\nSoftware engineering\nSystem on module\nUbiquitous computing\n1. For more details of MicroVGA see this PDF (http://www.microvga.com/pdf/uvga-text-ds.pdf).\n1. Michael Barr. \"Embedded Systems Glossary\" (http://www.netrino.\ncom/Embedded-Systems/Glossary). Neutrino Technical Library.\nRetrieved 2007-04-21.\n2. Heath, Steve (2003). Embedded systems design (https://archive.\norg/details/embeddedsystemsd0000heat). EDN series for design\nengineers (2\u00a0ed.). Newnes. p.\u00a02 (https://archive.org/details/embe\nddedsystemsd0000heat/page/2). ISBN\u00a0978-0-7506-5546-0. \"An\nembedded system is a microprocessor based system that is built\nto control a function or a range of functions.\"\n3. Michael Barr; Anthony J. Massa (2006). \"Introduction\" (https://bo\noks.google.com/books?id=nPZaPJrw_L0C&pg=PA1).\nProgramming embedded systems: with C and GNU development\ntools. O'Reilly. pp.\u00a01\u20132. ISBN\u00a0978-0-596-00983-0.\n4. Barr, Michael (1 August 2009). \"Real men program in C\" (https://\nwww.embedded.com/electronics-blogs/barr-code/4027479/Real-\nmen-program-in-C). Embedded Systems Design. TechInsights\n(United Business Media). p.\u00a02. Retrieved 2009-12-23.\n5. Shirriff, Ken (30 August 2016). \"The Surprising Story of the First\nMicroprocessors\" (https://spectrum.ieee.org/the-surprising-story-\nof-the-\ufb01rst-microprocessors). IEEE Spectrum. 53 (9). Institute of\nElectrical and Electronics Engineers: 48\u201354.\ndoi:10.1109/MSPEC.2016.7551353 (https://doi.org/10.1109%2F\nMSPEC.2016.7551353). S2CID\u00a032003640 (https://api.semantics\ncholar.org/CorpusID:32003640). Retrieved 13 October 2019.\n6. \"1971: Microprocessor Integrates CPU Function onto a Single\nChip\" (https://www.computerhistory.org/siliconengine/microproce\nssor-integrates-cpu-function-onto-a-single-chip/). The Silicon\nEngine. Computer History Museum. Retrieved 22 July 2019.\n7. \"Electronic Frontier Foundation\" (https://www.eff.org/). Electronic\nFrontier Foundation.\n8. Embedded Systems Dell OEM Solutions | Dell (http://content.del\nl.com/us/en/enterprise/oem-industry-solutions-build-your-product\n-with-dell) Archived (https://web.archive.org/web/2013012708073\n4/http://content.dell.com/us/en/enterprise/oem-industry-solutions-\nbuild-your-product-with-dell) 2013-01-27 at the Wayback\nMachine. Content.dell.com (2011-01-04). Retrieved on 2013-02-\n06.\n9. David Carey (2008-04-22).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3494, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fc883f8d-5328-4795-88b8-4799d9f7c2ed": {"__data__": {"id_": "fc883f8d-5328-4795-88b8-4799d9f7c2ed", "embedding": null, "metadata": {"page_label": "4", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c7a2e0e1-7d0b-4fd6-8433-ca219cf26399", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "503e047697aeaed5e1bbd019196f229d2b1f2c1cb74610686aab56099ba848a0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "39476b22-6a00-4c08-9943-8720369367c4", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "33dec57346adea4a84871099c7db8505e1657b641056e142a5162be19e61f02e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "52b4cfaa-24f9-4176-bf97-023a5ec00204", "node_type": "1", "metadata": {}, "hash": "99251355513ccf78ea6eed2e26eee0143fff53651856cb172d3163db74516c65", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The Silicon\nEngine. Computer History Museum. Retrieved 22 July 2019.\n7. \"Electronic Frontier Foundation\" (https://www.eff.org/). Electronic\nFrontier Foundation.\n8. Embedded Systems Dell OEM Solutions | Dell (http://content.del\nl.com/us/en/enterprise/oem-industry-solutions-build-your-product\n-with-dell) Archived (https://web.archive.org/web/2013012708073\n4/http://content.dell.com/us/en/enterprise/oem-industry-solutions-\nbuild-your-product-with-dell) 2013-01-27 at the Wayback\nMachine. Content.dell.com (2011-01-04). Retrieved on 2013-02-\n06.\n9. David Carey (2008-04-22). \"Under the Hood: Robot Guitar\nembeds autotuning\" (https://web.archive.org/web/200807081953\n11/http://embedded.com/underthehood/207401418). Embedded\nSystems Design. Archived from the original (https://www.embedd\ned.com/underthehood/207401418) on 2008-07-08.\n10. Tancreti, Matthew; Sundaram, Vinaitheerthan; Bagchi, Saurabh;\nEugster, Patrick (2015). \"TARDIS\". Proceedings of the 14th\nInternational Conference on Information Processing in Sensor\nNetworks. IPSN '15. New York, NY, USA: ACM. pp.\u00a0286\u2013297.\ndoi:10.1145/2737095.2737096 (https://doi.org/10.1145%2F27370\n95.2737096). ISBN\u00a09781450334754. S2CID\u00a010120929 (https://a\npi.semanticscholar.org/CorpusID:10120929).\n11. Tancreti, Matthew; Hossain, Mohammad Sajjad; Bagchi,\nSaurabh; Raghunathan, Vijay (2011). \"Aveksha\". Proceedings of\nthe 9th ACM Conference on Embedded Networked Sensor\nSystems. SenSys '11. New York, NY, USA: ACM. pp.\u00a0288\u2013301.\ndoi:10.1145/2070942.2070972 (https://doi.org/10.1145%2F20709\n42.2070972). ISBN\u00a09781450307185. S2CID\u00a014769602 (https://a\npi.semanticscholar.org/CorpusID:14769602).\n12. \"Tektronix Shakes Up Prototyping, Embedded Instrumentation\nBoosts Boards to Emulator Status\" (http://www.eejournal.com/arc\nhives/articles/20121030-tektronix/). Electronic Engineering\nJournal. 2012-10-30. Retrieved 2012-10-30.\n13. Kraft, Johan; Wall, Anders; Kienle, Holger (2010), Barringer,\nHoward; Falcone, Ylies; Finkbeiner, Bernd; Havelund, Klaus\n(eds.), \"Trace Recording for Embedded Systems: Lessons\nLearned from Five Industrial Projects\" (http://link.springer.com/1\n0.1007/978-3-642-16612-9_24), Runtime Veri\ufb01cation, vol.\u00a06418,\nBerlin, Heidelberg: Springer Berlin Heidelberg, pp.\u00a0315\u2013329,\ndoi:10.1007/978-3-642-16612-9_24 (https://doi.org/10.1007%2F\n978-3-642-16612-9_24), ISBN\u00a0978-3-642-16611-2, retrieved\n2022-08-16\n14. Heiser, Gernot (December 2007). \"Your System is secure? Prove\nit!\" (http://c59951.r51.cf2.rackcdn.com/5557-528-heiser.pdf)\n(PDF). ;login:. 2 (6): 35\u20138. Archived (https://web.archive.org/web/\n20141129070740/http://c59951.r51.cf2.rackcdn.com/5557-528-h\neiser.pdf) (PDF) from the original on 2014-11-29.\n15. Moratelli, C; Johann, S; Neves, M; Hessel, F (2016).", "mimetype": "text/plain", "start_char_idx": 2921, "end_char_idx": 5640, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "52b4cfaa-24f9-4176-bf97-023a5ec00204": {"__data__": {"id_": "52b4cfaa-24f9-4176-bf97-023a5ec00204", "embedding": null, "metadata": {"page_label": "4", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c7a2e0e1-7d0b-4fd6-8433-ca219cf26399", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "503e047697aeaed5e1bbd019196f229d2b1f2c1cb74610686aab56099ba848a0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fc883f8d-5328-4795-88b8-4799d9f7c2ed", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "d6f0d0833046dfb406ff8da47ddfbb62e5fa1988307077656d4cbe9436efe849", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9b5e2ee9-494a-4d97-917d-6d8c76ffe6c1", "node_type": "1", "metadata": {}, "hash": "45a1a80dafbf8ef2676565351d3b2dbd73af8486af3dcf8c27ad9f5ca9fc5f1c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Heiser, Gernot (December 2007). \"Your System is secure? Prove\nit!\" (http://c59951.r51.cf2.rackcdn.com/5557-528-heiser.pdf)\n(PDF). ;login:. 2 (6): 35\u20138. Archived (https://web.archive.org/web/\n20141129070740/http://c59951.r51.cf2.rackcdn.com/5557-528-h\neiser.pdf) (PDF) from the original on 2014-11-29.\n15. Moratelli, C; Johann, S; Neves, M; Hessel, F (2016). \"Embedded\nvirtualization for the design of secure IoT applications\" (https://iee\nexplore.ieee.org/document/7909116). Proceedings of the 27th\nInternational Symposium on Rapid System Prototyping:\nShortening the Path from Speci\ufb01cation to Prototype. pp.\u00a02\u20136.\ndoi:10.1145/2990299.2990301 (https://doi.org/10.1145%2F29902\n99.2990301). ISBN\u00a09781450345354. S2CID\u00a017466572 (https://a\npi.semanticscholar.org/CorpusID:17466572). Retrieved\n2 February 2018.\n16. Short, Michael (March 2008). \"Development guidelines for\ndependable real-time embedded systems\" (https://ieeexplore.iee\ne.org/document/4493674). 2008 IEEE/ACS International\nConference on Computer Systems and Applications (https://\ufb01gsh\nare.com/articles/conference_contribution/Development_Guidelin\nes_for_Dependable_Real-Time_Embedded_Systems_/1008327\n2). pp.\u00a01032\u20131039. doi:10.1109/AICCSA.2008.4493674 (https://d\noi.org/10.1109%2FAICCSA.2008.4493674). ISBN\u00a0978-1-4244-\n1967-8. S2CID\u00a014163138 (https://api.semanticscholar.org/Corpu\nsID:14163138).\n17. Motor Industry Software Reliability Association. \"MISRA C:2012\nThird Edition, First Revision\" (https://www.misra.org.uk/product/m\nisra-c2012-third-edition-\ufb01rst-revision/). Retrieved 2022-02-03.\n18. \"FAQs: Programmable Controllers\" (https://www.nema.org/docs/\ndefault-source/standards-document-library/faq-programmable-co\nntrollers.pdf?sfvrsn=a03312d_2) (PDF). Retrieved 2020-01-10.\n19. \"Working across Multiple Embedded Platforms\" (http://www.clarin\nox.com/docs/whitepapers/Whitepaper_06_CrossPlatformDiscuss\nion.pdf) (PDF). clarinox. Archived (https://web.archive.org/web/20\n110219200027/http://www.clarinox.com/docs/whitepapers/Whitep\naper_06_CrossPlatformDiscussion.pdf) (PDF) from the original\non 2011-02-19. Retrieved 2010-08-17.\nJohn Catsoulis (May 2005). Designing Embedded Hardware, 2nd Edition. O'Reilly. ISBN\u00a00-596-00755-8.\nJames M. Conrad; Alexander G. Dean (September 2011). Embedded Systems, An Introduction Using the Renesas RX62N Microcontroller. Micrium. ISBN\u00a0978-1935-7729-96.\nKlaus Elk (August 2016). Embedded Software Development for the Internet Of Things, The Basics, The Technologies and Best Practices. CreateSpace Independent Publishing Platform. ISBN\u00a0978-\n1534602533.", "mimetype": "text/plain", "start_char_idx": 5283, "end_char_idx": 7832, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9b5e2ee9-494a-4d97-917d-6d8c76ffe6c1": {"__data__": {"id_": "9b5e2ee9-494a-4d97-917d-6d8c76ffe6c1", "embedding": null, "metadata": {"page_label": "4", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c7a2e0e1-7d0b-4fd6-8433-ca219cf26399", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "503e047697aeaed5e1bbd019196f229d2b1f2c1cb74610686aab56099ba848a0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "52b4cfaa-24f9-4176-bf97-023a5ec00204", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Embedded system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Embedded system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 859911, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "e4dca88ba43959db679e4f6f0bdb237b80c5e12114d5a0377a1f1e5e6ad67b4e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Archived (https://web.archive.org/web/20\n110219200027/http://www.clarinox.com/docs/whitepapers/Whitep\naper_06_CrossPlatformDiscussion.pdf) (PDF) from the original\non 2011-02-19. Retrieved 2010-08-17.\nJohn Catsoulis (May 2005). Designing Embedded Hardware, 2nd Edition. O'Reilly. ISBN\u00a00-596-00755-8.\nJames M. Conrad; Alexander G. Dean (September 2011). Embedded Systems, An Introduction Using the Renesas RX62N Microcontroller. Micrium. ISBN\u00a0978-1935-7729-96.\nKlaus Elk (August 2016). Embedded Software Development for the Internet Of Things, The Basics, The Technologies and Best Practices. CreateSpace Independent Publishing Platform. ISBN\u00a0978-\n1534602533.\nEmbedded Systems course with mbed (https://www.youtube.com/watch?v=H-OKGOMoCSI&list=PLo7bVbJhQ6qwlDa-R6pz7tA7kPzn1s5Ae) YouTube, ongoing from 2015\nTrends in Cyber Security and Embedded Systems (http://geer.tinho.net/geer.nro.6xi13.txt) Dan Geer, November 2013\nModern Embedded Systems Programming Video Course (https://www.youtube.com/playlist?list=PLPW8O6W-1chwyTzI3BHwBLbGQoPFxPAPM) YouTube, ongoing from 2013\nEmbedded Systems Week (ESWEEK) (http://www.esweek.org/) yearly event with conferences, workshops and tutorials covering all aspects of embedded systems and software\nWorkshop on Embedded and Cyber-Physical Systems Education (https://web.archive.org/web/20180211173413/http://www.emsig.net/conf/2015/wese/) at the Wayback Machine (archived 2018-02-11),\nworkshop covering educational aspects of embedded systems\nDeveloping Embedded Systems - A Tools Introduction (https://microcontrollershop.com/An%20Embedded%20Tools%20Introduction.php)\nRetrieved from \"https://en.wikipedia.org/w/index.php?title=Embedded_system&oldid=1293359661\"\nAdditional software components\nDomain-speci\ufb01c architectures\nSee also\nNotes\nReferences\nFurther reading\nExternal links\n6/7/25, 7:32 PM Embedded system - Wikipedia\nhttps://en.wikipedia.org/wiki/Embedded_system 4/4", "mimetype": "text/plain", "start_char_idx": 7175, "end_char_idx": 9082, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fa879162-ce18-461a-b007-cdf8b40eeb04": {"__data__": {"id_": "fa879162-ce18-461a-b007-cdf8b40eeb04", "embedding": null, "metadata": {"page_label": "1", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3306a846-7489-4569-9981-e51cc70c1c67", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "748b737d56d1330e1c01bc533d13e3aeb02630b367a97f423581e99d1261ae81", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "42d8104f-79d6-40fd-975d-90eb288ba01e", "node_type": "1", "metadata": {}, "hash": "c2120bb7d059123476283f30a2ec787faaec3f1cd58a23d8613e9064d8336234", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "A computer monitor provides a visual\ninterface between the machine and the\nuser.\nHuman\u2013computer interaction\nHuman\u2013computer interaction (HCI) is the process through which people operate and engage with computer systems. Research in HCI covers the design and the use\nof computer technology, which focuses on the interfaces between people (users) and computers. HCI researchers observe the ways humans interact with computers and\ndesign technologies that allow humans to interact with computers in novel ways.[1] These include visual, auditory, and tactile (haptic) feedback systems, which serve as\nchannels for interaction in both traditional interfaces and mobile computing contexts.[2] A device that allows interaction between human being and a computer is known as\na \"human\u2013computer interface\".\nAs a field of research, human\u2013computer interaction is situated at the intersection of computer science, behavioral sciences, design, media studies, and several other fields of\nstudy. The term was popularized by Stuart K. Card, Allen Newell, and Thomas P. Moran in their 1983 book, The Psychology of Human\u2013Computer Interaction. The first\nknown use was in 1975 by Carlisle.[3] The term is intended to convey that, unlike other tools with specific and limited uses, computers have many uses which often involve\nan open-ended dialogue between the user and the computer. The notion of dialogue likens human\u2013computer interaction to human-to-human interaction: an analogy that is\ncrucial to theoretical considerations in the field.[4][5]\nHumans interact with computers in many ways, and the interface between the two is crucial to facilitating this interaction. HCI is also sometimes termed human\u2013machine interaction (HMI), man-machine\ninteraction (MMI) or computer-human interaction (CHI). Desktop applications, web browsers, handheld computers, and computer kiosks make use of the prevalent graphical user interfaces (GUI) of today.[6]\nVoice user interfaces (VUIs) are used for speech recognition and synthesizing systems, and the emerging multi-modal and Graphical user interfaces (GUI) allow humans to engage with embodied character agents\nin a way that cannot be achieved with other interface paradigms.\nThe Association for Computing Machinery (ACM) defines human\u2013computer interaction as \"a discipline that is concerned with the design, evaluation, and implementation of interactive computing systems for\nhuman use and with the study of major phenomena surrounding them\".[6] A key aspect of HCI is user satisfaction, also referred to as End-User Computing Satisfaction. It goes on to say:\n\"Because human\u2013computer interaction studies a human and a machine in communication, it draws from supporting knowledge on both the machine and the human side. On the machine side, techniques in\ncomputer graphics, operating systems, programming languages, and development environments are relevant. On the human side, communication theory, graphic and industrial design disciplines, linguistics,\nsocial sciences, cognitive psychology, social psychology, and human factors such as computer user satisfaction are relevant. And, of course, engineering and design methods are relevant.\"[6] HCI ensures that\nhumans can safely and efficiently interact with complex technologies in fields like aviation and healthcare.[7]\nDue to the multidisciplinary nature of HCI, people with different backgrounds contribute to its success.\nPoorly designed human-machine interfaces can lead to many unexpected problems. A classic example is the Three Mile Island accident, a nuclear meltdown accident, where investigations concluded that the\ndesign of the human-machine interface was at least partly responsible for the disaster.[8][9][10] Similarly, some accidents in aviation have resulted from manufacturers' decisions to use non-standard flight\ninstruments or throttle quadrant layouts: even though the new designs were proposed to be superior in basic human-machine interaction, pilots had already ingrained the \"standard\" layout. Thus, the\nconceptually good idea had unintended results.[11]\nA human\u2013computer interface can be described as the interface of communication between a human user and a computer.[12] The flow of information between the human and computer is defined as the loop of\ninteraction.[13] The loop of interaction has several aspects to it, including:\nVisual based: The visual-based human\u2013computer interaction is probably the most widespread human\u2013computer interaction (HCI) research area.\nAudio-based: The audio-based interaction between a computer and a human is another important area of HCI systems. This area deals with information acquired by different audio signals.\nFeedback : Loops through the interface that evaluate, moderate, and con\ufb01rm processes as they pass from the human through the interface to the computer and back.\nFit : This matches the computer design, the user, and the task to optimize the human resources needed to accomplish the task.\nVisual-based HCI\u00a0\u2013\n1.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4967, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "42d8104f-79d6-40fd-975d-90eb288ba01e": {"__data__": {"id_": "42d8104f-79d6-40fd-975d-90eb288ba01e", "embedding": null, "metadata": {"page_label": "1", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3306a846-7489-4569-9981-e51cc70c1c67", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "748b737d56d1330e1c01bc533d13e3aeb02630b367a97f423581e99d1261ae81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fa879162-ce18-461a-b007-cdf8b40eeb04", "node_type": "1", "metadata": {"page_label": "1", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "dd6953ff4a2f716862823dcb5a4d45a8df00b0e0ba576ac67b67860918482b78", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "743195f7-220a-4fa5-83a3-9a5b09aa69ec", "node_type": "1", "metadata": {}, "hash": "a6a0cf073ab9748a47e1b6a94458c3db16612b9323160d37565a1984bdc24909", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Thus, the\nconceptually good idea had unintended results.[11]\nA human\u2013computer interface can be described as the interface of communication between a human user and a computer.[12] The flow of information between the human and computer is defined as the loop of\ninteraction.[13] The loop of interaction has several aspects to it, including:\nVisual based: The visual-based human\u2013computer interaction is probably the most widespread human\u2013computer interaction (HCI) research area.\nAudio-based: The audio-based interaction between a computer and a human is another important area of HCI systems. This area deals with information acquired by different audio signals.\nFeedback : Loops through the interface that evaluate, moderate, and con\ufb01rm processes as they pass from the human through the interface to the computer and back.\nFit : This matches the computer design, the user, and the task to optimize the human resources needed to accomplish the task.\nVisual-based HCI\u00a0\u2013\n1. Facial expression analysis: This area focuses on visually recognizing and analyzing emotions through facial expressions.\n2. Body movement tracking (large-scale): Researchers in this area concentrate on tracking and analyzing large-scale body movements.\n3. Gesture recognition: Gesture recognition involves identifying and interpreting gestures made by users, often used for direct interaction with computers in command and action scenarios.\n4. Gaze detection (eye-movement tracking): Gaze detection involves tracking the movement of a user's eyes and is primarily used to better understand the user's attention, intent, or focus in context-\nsensitive situations.\nWhile the speci\ufb01c goals of each area vary based on applications, they collectively contribute to enhancing human-computer interaction. Notably, visual approaches have been explored as alternatives\nor aids to other types of interactions, such as audio- and sensor-based methods. For example, lip reading or lip movement tracking has proven in\ufb02uential in correcting speech recognition errors.\nAudio-based HCI\u00a0\u2013 Audio-based interaction in human-computer interaction (HCI) is a crucial \ufb01eld focused on processing information acquired through various audio signals. While the nature of audio\nsignals may be less diverse compared to visual signals, the information they provide can be highly reliable, valuable, and sometimes uniquely informative. The research areas within this domain include:\n1. Speech recognition: This area centers on the recognition and interpretation of spoken language.\n2. Speaker recognition: Researchers in this area concentrate on identifying and distinguishing different speakers.\n3. Auditory emotion analysis: Efforts have been made to incorporate human emotions into intelligent human-computer interaction by analyzing emotional cues in audio signals.\n4. Human-made noise/sign detections: This involves recognizing typical human auditory signs like sighs, gasps, laughs, cries, etc., which contribute to emotion analysis and the design of more intelligent\nHCI systems.\n5. Musical interaction: A relatively new area in HCI, it involves generating and interacting with music, with applications in the art industry. This \ufb01eld is studied in both audio- and visual-based HCI systems.\nSensor-based HCI\u00a0\u2013 This section encompasses a diverse range of areas with broad applications, all of which involve the use of physical sensors to facilitate interaction between users and machines.\nThese sensors can range from basic to highly sophisticated. The speci\ufb01c areas include:\n1. Pen-based interaction: Particularly relevant in mobile devices, focusing on pen gestures and handwriting recognition.\n2. Mouse & keyboard: Well-established input devices discussed in Section 3.1, commonly used in computing.\n3. Joysticks: Another established input device for interactive control, commonly used in gaming and simulations.\n4. Motion-tracking sensors and digitizers: Cutting-edge technology that has revolutionized industries like \ufb01lm, animation, art, and gaming. These sensors, in forms like wearable cloth or joint sensors,\nenable more immersive interactions between computers and reality.\n5. Haptic sensors: Particularly signi\ufb01cant in applications related to robotics and virtual reality, providing feedback based on touch. They play a crucial role in enhancing sensitivity and awareness in\nhumanoid robots, as well as in medical surgery applications.\n6. Pressure sensors: Also important in robotics, virtual reality, and medical applications, providing information based on pressure exerted on a surface.\n7. Taste/smell sensors: Although less popular compared to other areas, research has been conducted in the \ufb01eld of sensors for taste and smell. These sensors vary in their level of maturity, with some\nbeing well-established and others representing cutting-edge technologies.\nHuman\u2013computer interaction involves the ways in which humans make\u2014or do not make\u2014use of computational artifacts, systems, and infrastructures. Much of the research in this field seeks to improve the\nhuman\u2013computer interaction by improving the usability of computer interfaces.", "mimetype": "text/plain", "start_char_idx": 3997, "end_char_idx": 9093, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "743195f7-220a-4fa5-83a3-9a5b09aa69ec": {"__data__": {"id_": "743195f7-220a-4fa5-83a3-9a5b09aa69ec", "embedding": null, "metadata": {"page_label": "1", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3306a846-7489-4569-9981-e51cc70c1c67", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "748b737d56d1330e1c01bc533d13e3aeb02630b367a97f423581e99d1261ae81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "42d8104f-79d6-40fd-975d-90eb288ba01e", "node_type": "1", "metadata": {"page_label": "1", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "aa8cbc9afe0c67935898789b002f668937787aa0060d33a3632a6ee9f35bfc26", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5. Haptic sensors: Particularly signi\ufb01cant in applications related to robotics and virtual reality, providing feedback based on touch. They play a crucial role in enhancing sensitivity and awareness in\nhumanoid robots, as well as in medical surgery applications.\n6. Pressure sensors: Also important in robotics, virtual reality, and medical applications, providing information based on pressure exerted on a surface.\n7. Taste/smell sensors: Although less popular compared to other areas, research has been conducted in the \ufb01eld of sensors for taste and smell. These sensors vary in their level of maturity, with some\nbeing well-established and others representing cutting-edge technologies.\nHuman\u2013computer interaction involves the ways in which humans make\u2014or do not make\u2014use of computational artifacts, systems, and infrastructures. Much of the research in this field seeks to improve the\nhuman\u2013computer interaction by improving the usability of computer interfaces.[14] How usability is to be precisely understood, how it relates to other social and cultural values, and when it is, and when it may\nnot be a desirable property of computer interfaces is increasingly debated.[15][16]\nMuch of the research in the field of human\u2013computer interaction takes an interest in:\nMethods for designing new computer interfaces, thereby optimizing a design for a desired property such as learnability, \ufb01ndability, the ef\ufb01ciency of use.\nMethods for implementing interfaces, e.g., by means of software libraries.\nMethods for evaluating and comparing interfaces with respect to their usability and other desirable properties.\nMethods for studying human\u2013computer use and its sociocultural implications more broadly.\nMethods for determining whether or not the user is human or computer.\nModels and theories of human\u2013computer use as well as conceptual frameworks for the design of computer interfaces, such as cognitivist user models, Activity Theory, or ethnomethodological accounts of\nhuman\u2013computer use.[ 1 7 ] \nPerspectives that critically re\ufb02ect upon the values that underlie computational design, computer use, and HCI research practice.[ 1 8 ] \nVisions of what researchers in the field seek to achieve might vary. When pursuing a cognitivist perspective, researchers of HCI may seek to align computer interfaces with the mental model that humans have of\ntheir activities. When pursuing a post-cognitivist perspective, researchers of HCI may seek to align computer interfaces with existing social practices or existing sociocultural values.\nResearchers in HCI are interested in developing design methodologies, experimenting with devices, prototyping software, and hardware systems, exploring interaction paradigms, and developing models and\ntheories of interaction.\nIntroduction\nHuman\u2013computer interface\nGoals for computers\n6/7/25, 7:32 PM Human\u2013computer interaction - Wikipedia\nhttps://en.wikipedia.org/wiki/Human\u2013computer_interaction 1/5", "mimetype": "text/plain", "start_char_idx": 8126, "end_char_idx": 11055, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "91c78055-c457-4dd0-b4f7-a6ecb88b5047": {"__data__": {"id_": "91c78055-c457-4dd0-b4f7-a6ecb88b5047", "embedding": null, "metadata": {"page_label": "2", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fd027ff0-c338-453a-8d1f-1d7abc054f0a", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b30f459e79a672487124ba7c13277cbef9d3dbca8396936b5462ff9e62ea3dd5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "46151b60-b8bf-4fa7-99ff-fb489d6bcb79", "node_type": "1", "metadata": {}, "hash": "b64e15ca2d718328c084acd3ab206d3d8722ebf2119b2956e3bd5d7de042f326", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The user interacts directly with hardware for the\nhuman input and output such as displays, e.g.\nthrough a graphical user interface. The user\ninteracts with the computer over this software\ninterface using the given input and output (I/O)\nhardware.\nSoftware and hardware are matched so that the\nprocessing of the user input is fast enough, and\nthe latency of the computer output is not\ndisruptive to the work\ufb02ow.\nThe following experimental design principles are considered, when evaluating a current user interface, or designing a new user interface:\nEarly focus is placed on the user(s) and task(s): How many users are needed to perform the task(s) is established and who the appropriate users should be is\ndetermined (someone who has never used the interface, and will not use the interface in the future, is most likely not a valid user). In addition, the task(s) the\nusers will be performing and how often the task(s) need to be performed is de\ufb01ned.\nEmpirical measurement: the interface is tested with real users who come in contact with the interface daily. The results can vary with the performance level of the\nuser and the typical human\u2013computer interaction may not always be represented. Quantitative usability speci\ufb01cs, such as the number of users performing the\ntask(s), the time to complete the task(s), and the number of errors made during the task(s) are determined.\nIterative design: After determining what users, tasks, and empirical measurements to include, the following iterative design steps are performed:\n1. Design the user interface\n2. Test\n3. Analyze results\n4. Repeat\nThe iterative design process is repeated until a sensible, user-friendly interface is created.[19]\nVarious strategies delineating methods for human\u2013PC interaction design have developed since the conception of the field during the 1980s. Most plan philosophies\ncome from a model for how clients, originators, and specialized frameworks interface. Early techniques treated clients' psychological procedures as unsurprising and\nquantifiable and urged plan specialists to look at subjective science to establish zones, (for example, memory and consideration) when structuring UIs. Present-day models, in general, center around a steady input\nand discussion between clients, creators, and specialists and push for specialized frameworks to be folded with the sorts of encounters clients need to have, as opposed to wrapping user experience around a\nfinished framework.\nActivity theory: utilized in HCI to characterize and consider the setting where human cooperations with PCs occur. Action hypothesis gives a structure for reasoning about activities in these speci\ufb01c\ncircumstances and illuminates the design of interactions from an action-driven perspective.[ 2 0 ] \nUser-centered design (UCD): a cutting-edge, broadly-rehearsed plan theory established on the possibility that clients must become the overwhelming focus in the plan of any PC framework. Clients,\narchitects, and specialized experts cooperate to determine the requirements and restrictions of the client and make a framework to support these components. Frequently, client-focused plans are informed by\nethnographic investigations of situations in which clients will associate with the framework. This training is like participatory design, which underscores the likelihood for end-clients to contribute effectively\nthrough shared plan sessions and workshops.\nPrinciples of UI design: these standards may be considered during the design of a client interface: resistance, effortlessness, permeability, affordance, consistency, structure, and feedback.[ 2 1 ] \nValue sensitive design (VSD): a technique for building innovation that accounts for the individuals who utilize the design straightforwardly, and just as well for those who the design in\ufb02uences, either directly or\nindirectly. VSD utilizes an iterative planning process that includes three kinds of examinations: theoretical, exact, and specialized. Applied examinations target the understanding and articulation of the different\nparts of the design, and its qualities or any clashes that may emerge for the users of the design. Exact examinations are subjective or quantitative plans to explore things used to advise the creators'\nunderstanding regarding the clients' qualities, needs, and practices. Specialized examinations can include either investigation of how individuals use related advances or the framework plans.[ 2 2 ] \nTopics in human\u2013computer interaction include the following:\nHuman-AI Interaction explores how users engage with artificial intelligence systems, particularly focusing on usability, trust, and interpretability. The research mainly aims to design AI-driven interfaces that are\ntransparent, explainable, and ethically responsible.[23] Studies highlight the importance of explainable AI (XAI) and human-in-the-loop decision-making, ensuring that AI outputs are understandable and\ntrustworthy.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4931, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "46151b60-b8bf-4fa7-99ff-fb489d6bcb79": {"__data__": {"id_": "46151b60-b8bf-4fa7-99ff-fb489d6bcb79", "embedding": null, "metadata": {"page_label": "2", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fd027ff0-c338-453a-8d1f-1d7abc054f0a", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b30f459e79a672487124ba7c13277cbef9d3dbca8396936b5462ff9e62ea3dd5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "91c78055-c457-4dd0-b4f7-a6ecb88b5047", "node_type": "1", "metadata": {"page_label": "2", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "2f16cb2d083f3da2ce799386aaba4730d43be08089e315dff5bea808e1a0fa8f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d7cf6818-ae82-42a9-86a3-efe42d70c8b6", "node_type": "1", "metadata": {}, "hash": "05e34f0c433a12a700d199472aa04e314d0b38ad6c25e909621a63711fbd868e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Applied examinations target the understanding and articulation of the different\nparts of the design, and its qualities or any clashes that may emerge for the users of the design. Exact examinations are subjective or quantitative plans to explore things used to advise the creators'\nunderstanding regarding the clients' qualities, needs, and practices. Specialized examinations can include either investigation of how individuals use related advances or the framework plans.[ 2 2 ] \nTopics in human\u2013computer interaction include the following:\nHuman-AI Interaction explores how users engage with artificial intelligence systems, particularly focusing on usability, trust, and interpretability. The research mainly aims to design AI-driven interfaces that are\ntransparent, explainable, and ethically responsible.[23] Studies highlight the importance of explainable AI (XAI) and human-in-the-loop decision-making, ensuring that AI outputs are understandable and\ntrustworthy.[24] Researchers also develop design guidelines for human-AI interaction, improving the collaboration between users and AI systems.[25]\nAugmented reality (AR) integrates digital content with the real world. It enhances human perception and interaction with physical environments. AR research mainly focuses on adaptive user interfaces,\nmultimodal input techniques, and real-world object interaction.[26] Advances in wearable AR technology improve usability, enabling more natural interaction with AR applications.[27]\nVirtual reality (VR) creates a fully immersive digital environment, allowing users to interact with computer-generated worlds through sensory input devices. Research focuses on user presence, interaction\ntechniques, and cognitive effects of immersion.[28] A key area of study is the impact of VR on cognitive load and user adaptability, influencing how users process information in virtual spaces.[29]\nMixed reality (MR) blends elements of both augmented reality (AR) and virtual reality (VR). It enables real-time interaction with both physical and digital objects. HCI research in MR concentrates on spatial\ncomputing, real-world object interaction, and context-aware adaptive interfaces.[30] MR technologies are increasingly applied in education, training simulations, and healthcare, enhancing learning outcomes and\nuser engagement.[31]\nExtended reality (XR) is an umbrella term encompassing AR, VR, and MR, offering a continuum between real and virtual environments. Research investigates user adaptability, interaction paradigms, and ethical\nimplications of immersive technologies.[32] Recent studies highlight how AI-driven personalization and adaptive interfaces improve the usability of XR applications.[33]\nAccessibility in human\u2013computer interaction (HCI) focuses on designing inclusive digital experiences, ensuring usability for people with diverse abilities. Research in this area is related to assistive technologies,\nadaptive interfaces, and universal design principles.[34] Studies indicate that accessible design benefits not only people with disabilities but also enhances usability for all users.[35]\nSocial computing is an interactive and collaborative behavior considered between technology and people. In recent years, there has been an explosion of social science research focusing on interactions as the unit\nof analysis, as there are a lot of social computing technologies that include blogs, emails, social networking, quick messaging, and various others. Much of this research draws from psychology, social psychology,\nand sociology. For example, one study found out that people expected a computer with a man's name to cost more than a machine with a woman's name.[36] Other research finds that individuals perceive their\ninteractions with computers more negatively than humans, despite behaving the same way towards these machines.[37]\nIn human and computer interactions, a semantic gap usually exists between human and computer's understandings towards mutual behaviors. Ontology, as a formal representation of domain-specific knowledge,\ncan be used to address this problem by solving the semantic ambiguities between the two parties.[38]\nIn the interaction of humans and computers, research has studied how computers can detect, process, and react to human emotions to develop emotionally intelligent information systems. Researchers have\nsuggested several 'affect-detection channels'. The potential of telling human emotions in an automated and digital fashion lies in improvements to the effectiveness of human\u2013computer interaction. The influence\nof emotions in human\u2013computer interaction has been studied in fields such as financial decision-making using ECG and organizational knowledge sharing using eye-tracking and face readers as affect-detection\nchannels. In these fields, it has been shown that affect-detection channels have the potential to detect human emotions and those information systems can incorporate the data obtained from affect-detection\nchannels to improve decision models.\nA brain\u2013computer interface (BCI), is a direct communication pathway between an enhanced or wired brain and an external device. BCI differs from neuromodulation in that it allows for bidirectional information\nflow.", "mimetype": "text/plain", "start_char_idx": 3961, "end_char_idx": 9192, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d7cf6818-ae82-42a9-86a3-efe42d70c8b6": {"__data__": {"id_": "d7cf6818-ae82-42a9-86a3-efe42d70c8b6", "embedding": null, "metadata": {"page_label": "2", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fd027ff0-c338-453a-8d1f-1d7abc054f0a", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b30f459e79a672487124ba7c13277cbef9d3dbca8396936b5462ff9e62ea3dd5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "46151b60-b8bf-4fa7-99ff-fb489d6bcb79", "node_type": "1", "metadata": {"page_label": "2", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "0fcac047a180ae89b956b95c9e4a0587171fc37400131870ff73fbfdd6532ec8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "[38]\nIn the interaction of humans and computers, research has studied how computers can detect, process, and react to human emotions to develop emotionally intelligent information systems. Researchers have\nsuggested several 'affect-detection channels'. The potential of telling human emotions in an automated and digital fashion lies in improvements to the effectiveness of human\u2013computer interaction. The influence\nof emotions in human\u2013computer interaction has been studied in fields such as financial decision-making using ECG and organizational knowledge sharing using eye-tracking and face readers as affect-detection\nchannels. In these fields, it has been shown that affect-detection channels have the potential to detect human emotions and those information systems can incorporate the data obtained from affect-detection\nchannels to improve decision models.\nA brain\u2013computer interface (BCI), is a direct communication pathway between an enhanced or wired brain and an external device. BCI differs from neuromodulation in that it allows for bidirectional information\nflow. BCIs are often directed at researching, mapping, assisting, augmenting, or repairing human cognitive or sensory-motor functions.[39]\nDesign\nPrinciples\nMethodologies\nCurrent research\nHuman\u2013AI Interaction\nAugmented reality (AR)\nVirtual reality (VR)\nMixed reality (MR)\nExtended reality (XR)\nAccessibility\nSocial computing\nKnowledge-driven human\u2013computer interaction\nEmotions and human\u2013computer interaction\nBrain\u2013computer interfaces\n6/7/25, 7:32 PM Human\u2013computer interaction - Wikipedia\nhttps://en.wikipedia.org/wiki/Human\u2013computer_interaction 2/5", "mimetype": "text/plain", "start_char_idx": 8114, "end_char_idx": 9737, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "62515493-7ca0-4efe-bab8-ce000f6ca3e0": {"__data__": {"id_": "62515493-7ca0-4efe-bab8-ce000f6ca3e0", "embedding": null, "metadata": {"page_label": "3", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6ea1defb-ef98-4293-aae5-55e98fb8a821", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "94f2ef539f1e095be6eb036f80dfad6f538585967249cccec7c7c73afa200fdd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6076f9ef-ec88-48db-8b5d-a6fd5f84e4e5", "node_type": "1", "metadata": {}, "hash": "5175f087597d6385d1ce07fc141d932da586d64b7f7b811ff7aff357ec1e2841", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Security interactions are the study of interaction between humans and computers specifically as it pertains to information security. Its aim, in plain terms, is to improve the usability of security features in end user\napplications.\nUnlike HCI, which has roots in the early days of Xerox PARC during the 1970s, HCISec is a nascent field of study by comparison. Interest in this topic tracks with that of Internet security, which has become an\narea of broad public concern only in very recent years.\nWhen security features exhibit poor usability, the following are common reasons:\nthey were added in casual afterthought\nthey were hastily patched in to address newly discovered security bugs\nthey address very complex use cases without the bene\ufb01t of a software wizard\ntheir interface designers lacked understanding of related security concepts\ntheir interface designers were not usability experts (often meaning they were the application developers themselves)\nTraditionally, computer use was modeled as a human\u2013computer dyad in which the two were connected by a narrow explicit communication channel, such as text-based terminals. Much work has been done to\nmake the interaction between a computing system and a human more reflective of the multidimensional nature of everyday communication. Because of potential issues, human\u2013computer interaction shifted focus\nbeyond the interface to respond to observations as articulated by Douglas Engelbart: \"If ease of use were the only valid criterion, people would stick to tricycles and never try bicycles.\"[40]\nHow humans interact with computers continues to evolve rapidly. Human\u2013computer interaction is affected by developments in computing. These forces include:\nDecreasing hardware costs leading to larger memory and faster systems\nMiniaturization of hardware leading to portability\nReduction in power requirements leading to portability\nNew display technologies leading to the packaging of computational devices in new forms\nSpecialized hardware leading to new functions\nIncreased development of network communication and distributed computing\nIncreasingly widespread use of computers, especially by people who are outside of the computing profession\nIncreasing innovation in input techniques (e.g., voice, gesture, pen), combined with lowering cost, leading to rapid computerization by people formerly left out of the computer revolution.\nWider social concerns leading to improved access to computers by currently disadvantaged groups\nAs of 2010 the future for HCI is expected[41] to include the following characteristics:\nUbiquitous computing and communication. Computers are expected to communicate through high-speed local networks, nationally over wide-area networks, and portably via infrared, ultrasonic, cellular, and\nother technologies. Data and computational services will be portably accessible from many if not most locations to which a user travels.\nHigh-functionality systems. Systems can have large numbers of functions associated with them. There are so many systems that most users, technical or non-technical, do not have time to learn about\ntraditionally (e.g., through thick user manuals).\nThe mass availability of computer graphics. Computer graphics capabilities such as image processing, graphics transformations, rendering, and interactive animation become widespread as inexpensive chips\nbecome available for inclusion in general workstations and mobile devices.\nMixed media. Commercial systems can handle images, voice, sounds, video, text, formatted data. These are exchangeable over communication links among users. The separate consumer electronics \ufb01elds\n(e.g., stereo sets, DVD players, televisions) and computers are beginning to merge. Computer and print \ufb01elds are expected to cross-assimilate.\nHigh-bandwidth interaction. The rate at which humans and machines interact is expected to increase substantially due to the changes in speed, computer graphics, new media, and new input/output devices.\nThis can lead to qualitatively different interfaces, such as virtual reality or computational video.\nLarge and thin displays. New display technologies are maturing, enabling huge displays and displays that are thin, lightweight, and low in power use. This has large effects on portability and will likely enable\ndeveloping paper-like, pen-based computer interaction systems very different in feel from present desktop workstations.\nInformation utilities. Public information utilities (such as home banking and shopping) and specialized industry services (e.g., weather for pilots) are expected to proliferate. The proliferation rate can accelerate\nwith the introduction of high-bandwidth interaction and the improvement in the quality of interfaces.\nOne of the main conferences for new research in human\u2013computer interaction is the annually held Association for Computing Machinery's (ACM) Conference on Human Factors in Computing Systems, usually\nreferred to by its short name CHI (pronounced kai, or Khai). CHI is organized by ACM Special Interest Group on Computer-Human Interaction (SIGCHI). CHI is a large conference, with thousands of attendants,\nand is quite broad in scope.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 5158, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6076f9ef-ec88-48db-8b5d-a6fd5f84e4e5": {"__data__": {"id_": "6076f9ef-ec88-48db-8b5d-a6fd5f84e4e5", "embedding": null, "metadata": {"page_label": "3", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6ea1defb-ef98-4293-aae5-55e98fb8a821", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "94f2ef539f1e095be6eb036f80dfad6f538585967249cccec7c7c73afa200fdd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "62515493-7ca0-4efe-bab8-ce000f6ca3e0", "node_type": "1", "metadata": {"page_label": "3", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "e127cabd25790223e959ee5045fe221ca1844d877dad8d310eb0be69ff29fbcd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "deb17177-b41f-4f9e-a7c5-2d7b3ef1d677", "node_type": "1", "metadata": {}, "hash": "579ff1a76c6bb42096a443ed4a8c7ff3b714766831f238968e843fa6b761a42a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "This has large effects on portability and will likely enable\ndeveloping paper-like, pen-based computer interaction systems very different in feel from present desktop workstations.\nInformation utilities. Public information utilities (such as home banking and shopping) and specialized industry services (e.g., weather for pilots) are expected to proliferate. The proliferation rate can accelerate\nwith the introduction of high-bandwidth interaction and the improvement in the quality of interfaces.\nOne of the main conferences for new research in human\u2013computer interaction is the annually held Association for Computing Machinery's (ACM) Conference on Human Factors in Computing Systems, usually\nreferred to by its short name CHI (pronounced kai, or Khai). CHI is organized by ACM Special Interest Group on Computer-Human Interaction (SIGCHI). CHI is a large conference, with thousands of attendants,\nand is quite broad in scope. It is attended by academics, practitioners, and industry people, with company sponsors such as Google, Microsoft, and PayPal.\nThere are also dozens of other smaller, regional, or specialized HCI-related conferences held around the world each year, including:[42]\nACEICFAASRS: ACE \u2013 International Conference on Future\nApplications of AI, Sensors, and Robotics in Society\nASSETS: ACM International Conference on Computers and\nAccessibility\nCSCW: ACM conference on Computer Supported Cooperative\nWork\nCUI: ACM conference on Conversational User Interfaces\nDIS: ACM conference on Designing Interactive Systems\nECSCW: European Conference on Computer-Supported\nCooperative Work\nGROUP: ACM conference on supporting group work\nHRI: ACM/IEEE International Conference on Human\u2013robot\ninteraction\nHCII: Human\u2013Computer Interaction International\nICMI: International Conference on Multimodal Interfaces\nITS: ACM conference on Interactive Tabletops and Surfaces\nMobileHCI: International Conference on Human\u2013Computer\nInteraction with Mobile Devices and Services\nNIME: International Conference on New Interfaces for Musical\nExpression\nOzCHI: Australian Conference on Human\u2013Computer Interaction\nTEI: International Conference on Tangible, Embedded and\nEmbodied Interaction\nUbicomp: International Conference on Ubiquitous computing\nUIST: ACM Symposium on User Interface Software and\nTechnology\ni-USEr: International Conference on User Science and\nEngineering\nINTERACT: IFIP TC13 Conference on Human\u2013Computer\nInteraction\nIHCI: International Conference on Intelligent Human\u2013Computer\nInteraction\nCAPTCHA\nDigital Live Art\nText-based user interface\nHCI Bibliography, a web-based project to provide a bibliography of Human Computer Interaction literature\nInformation architecture\nInformation design\nIntelligence ampli\ufb01cation\nMindfulness and technology\nOutline of human\u2013computer interaction\nTuring test\nUser experience design\nHuman City Interaction\n1. Helander, M. G. (2014-06-28). Handbook of Human-Computer\nInteraction (https://books.google.com/books?id=6vnSAwAAQBA\nJ&dq=what+is+human+computer+interaction&pg=PP1). Elsevier.\nISBN\u00a0978-1-4832-9513-8.\n2. Hampton, W. H. (2025). \"Haptic Rewards: How Mobile Vibrations\nShape Reward Response and Consumer Choice\" (https://doi.or\ng/10.1093/jcr/ucaf025). Journal of Consumer Research.\ndoi:10.1093/jcr/ucaf025 (https://doi.org/10.1093%2Fjcr%2Fucaf0\n25).\n3. Carlisle, James H. (June 1976). \"Evaluating the impact of of\ufb01ce\nautomation on top management communication\". Proceedings of\nthe June 7-10, 1976, national computer conference and\nexposition on - AFIPS '76. Proceedings of the June 7\u201310, 1976,\nNational Computer Conference and Exposition. pp.\u00a0611\u2013616.\ndoi:10.1145/1499799.1499885 (https://doi.org/10.1145%2F14997\n99.1499885). S2CID\u00a018471644 (https://api.semanticscholar.org/\nCorpusID:18471644). \"Use of 'human\u2013computer interaction'\nappears in references\"\n4. Suchman, Lucy (1987). Plans and Situated Action. The Problem\nof Human-Machine Communication (https://books.google.com/bo\noks?id=AJ_eBJtHxmsC&q=suchman+situated+action&pg=PR7).\nNew York, Cambridge: Cambridge University Press.", "mimetype": "text/plain", "start_char_idx": 4228, "end_char_idx": 8259, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "deb17177-b41f-4f9e-a7c5-2d7b3ef1d677": {"__data__": {"id_": "deb17177-b41f-4f9e-a7c5-2d7b3ef1d677", "embedding": null, "metadata": {"page_label": "3", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6ea1defb-ef98-4293-aae5-55e98fb8a821", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "94f2ef539f1e095be6eb036f80dfad6f538585967249cccec7c7c73afa200fdd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6076f9ef-ec88-48db-8b5d-a6fd5f84e4e5", "node_type": "1", "metadata": {"page_label": "3", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "6ce0961a72976db4e6391121e8fbd2a2d036ceec70d6b5de1620480ce3287902", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Proceedings of the June 7\u201310, 1976,\nNational Computer Conference and Exposition. pp.\u00a0611\u2013616.\ndoi:10.1145/1499799.1499885 (https://doi.org/10.1145%2F14997\n99.1499885). S2CID\u00a018471644 (https://api.semanticscholar.org/\nCorpusID:18471644). \"Use of 'human\u2013computer interaction'\nappears in references\"\n4. Suchman, Lucy (1987). Plans and Situated Action. The Problem\nof Human-Machine Communication (https://books.google.com/bo\noks?id=AJ_eBJtHxmsC&q=suchman+situated+action&pg=PR7).\nNew York, Cambridge: Cambridge University Press.\nISBN\u00a09780521337397. Retrieved 7 March 2015.\n5. Dourish, Paul (2001). Where the Action Is: The Foundations of\nEmbodied Interaction (https://books.google.com/books?id=DCIy2\nzxrCqcC&q=Dourish+where+the+action+is&pg=PR7).\nCambridge, MA: MIT Press. ISBN\u00a09780262541787.\n6. Hewett; Baecker; Card; Carey; Gasen; Mantei; Perlman; Strong;\nVerplank. \"ACM SIGCHI Curricula for Human\u2013Computer\nInteraction\" (https://web.archive.org/web/20140817165957/http://\nold.sigchi.org/cdg/cdg2.html#2_1). ACM SIGCHI. Archived from\nthe original (http://old.sigchi.org/cdg/cdg2.html#2_1) on 17\nAugust 2014. Retrieved 15 July 2014.\n7. Carroll, Meredith; Dahlstrom, Nicklas (2021-04-21). \"Human\nComputer Interaction on the Modern Flight Deck\" (https://www.ta\nndfonline.com/doi/full/10.1080/10447318.2021.1890495).\nInternational Journal of Human\u2013Computer Interaction. 37 (7):\n585\u2013587. doi:10.1080/10447318.2021.1890495 (https://doi.org/1\n0.1080%2F10447318.2021.1890495). ISSN\u00a01044-7318 (https://s\nearch.worldcat.org/issn/1044-7318).\n8. Ergoweb. \"What is Cognitive Ergonomics?\" (https://web.archive.\norg/web/20110928150026/http://www.ergoweb.com/news/detail.c\nfm?id=352). Ergoweb.com. Archived from the original (http://ww\nw.ergoweb.com/news/detail.cfm?id=352) on September 28,\n2011. Retrieved August 29, 2011.\n9. \"NRC: Backgrounder on the Three Mile Island Accident\" (https://\nwww.nrc.gov/reading-rm/doc-collections/fact-sheets/3mile-isle.ht\nml). Nrc.gov. Archived (https://web.archive.org/web/2019082420\n3624/https://www.nrc.gov/reading-rm/doc-collections/fact-sheets/\n3mile-isle.html) from the original on August 24, 2019. Retrieved\nAugust 29, 2011.\nSecurity interactions\nFactors of change\nScientific conferences\nSee also\nFootnotes\n6/7/25, 7:32 PM Human\u2013computer interaction - Wikipedia\nhttps://en.wikipedia.org/wiki/Human\u2013computer_interaction 3/5", "mimetype": "text/plain", "start_char_idx": 7735, "end_char_idx": 10079, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1073e176-fb40-4243-b17f-ce6693713409": {"__data__": {"id_": "1073e176-fb40-4243-b17f-ce6693713409", "embedding": null, "metadata": {"page_label": "4", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "57f96dae-6255-48a6-951c-114fb8502003", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "dc621feac30a2cda9516a5644d6ca036063d78825ff047170d357770ebc7f34b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3d93edf4-1735-40f5-b485-921fad429741", "node_type": "1", "metadata": {}, "hash": "bc5e9ba455f6e67b2f3885405f2a97f14d1820e99501942c145a4de3f38b9ffe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "10. \"Report of the President's Commission on the Accident at Three\nMiles Island\" (https://web.archive.org/web/20110409064628/htt\np://www.threemileisland.org/downloads/188.pdf) (PDF). 2019-03-\n14. Archived from the original on 2011-04-09. Retrieved\n2011-08-17.\n11. \"Bonanza Safety Review\" (https://www.aopa.org/news-and-medi\na/all-news/1994/february/pilot/bonanza-safety-review).\nwww.aopa.org. 1994-05-02. Retrieved 2025-05-12.\n12. Hartson, H. Rex; Hix, Deborah (1989-03-01). \"Human-computer\ninterface development: concepts and systems for its\nmanagement\" (https://dl.acm.org/doi/10.1145/62029.62031).\nACM Comput. Surv. 21 (1): 5\u201392. doi:10.1145/62029.62031 (http\ns://doi.org/10.1145%2F62029.62031). ISSN\u00a00360-0300 (https://s\nearch.worldcat.org/issn/0360-0300).\n13. Costa, Pedro Maur\u00edcio; Galv\u00e3o, Teresa; Falc\u00e3o e Cunha, Jo\u00e3o;\nPitt, Jeremy (June 2015). \"How to support the design and\ndevelopment of interactive pervasive environments\" (https://ieee\nxplore.ieee.org/document/7170680). 2015 8th International\nConference on Human System Interaction (HSI). pp.\u00a0278\u2013284.\ndoi:10.1109/HSI.2015.7170680 (https://doi.org/10.1109%2FHSI.2\n015.7170680). ISBN\u00a0978-1-4673-6936-7.\n14. Grudin, Jonathan (1992). \"Utility and usability: research issues\nand development contexts\". Interacting with Computers. 4 (2):\n209\u2013217. doi:10.1016/0953-5438(92)90005-z (https://doi.org/10.\n1016%2F0953-5438%2892%2990005-z).\n15. Chalmers, Matthew; Galani, Areti (2004). \"Seamful\ninterweaving\". Proceedings of the 5th conference on Designing\ninteractive systems: Processes, practices, methods, and\ntechniques (http://eprints.gla.ac.uk/3457/1/Seamful_Interweavin\ng.pdf) (PDF). pp.\u00a0243\u2013252. doi:10.1145/1013115.1013149 (http\ns://doi.org/10.1145%2F1013115.1013149). ISBN\u00a0978-\n1581137873. S2CID\u00a012500442 (https://api.semanticscholar.org/C\norpusID:12500442). Archived (https://web.archive.org/web/20200\n801180740/http://eprints.gla.ac.uk/3457/1/Seamful_Interweaving.\npdf) (PDF) from the original on 2020-08-01. Retrieved\n2019-10-04.\n16. Barkhuus, Louise; Polichar, Valerie E. (2011). \"Empowerment\nthrough seamfulness: smart phones in everyday life\" (https://doi.\norg/10.1007%2Fs00779-010-0342-4). Personal and Ubiquitous\nComputing. 15 (6): 629\u2013639. doi:10.1007/s00779-010-0342-4 (ht\ntps://doi.org/10.1007%2Fs00779-010-0342-4).\n17. Rogers, Yvonne (2012). \"HCI Theory: Classical, Modern, and\nContemporary\". Synthesis Lectures on Human-Centered\nInformatics. 5 (2): 1\u2013129.\ndoi:10.2200/S00418ED1V01Y201205HCI014 (https://doi.org/10.\n2200%2FS00418ED1V01Y201205HCI014).\n18.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2528, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3d93edf4-1735-40f5-b485-921fad429741": {"__data__": {"id_": "3d93edf4-1735-40f5-b485-921fad429741", "embedding": null, "metadata": {"page_label": "4", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "57f96dae-6255-48a6-951c-114fb8502003", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "dc621feac30a2cda9516a5644d6ca036063d78825ff047170d357770ebc7f34b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1073e176-fb40-4243-b17f-ce6693713409", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "12404564839e439ee1780a5ed25c1bc211f1af73c6d5ab5409d9372026794fed", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a130913d-297f-4640-a6f0-ad4f19039482", "node_type": "1", "metadata": {}, "hash": "b8fcd0ec7c5c3c316fbe809863c19f580fcaa35d6037382bc062d0650d86df6e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\"Empowerment\nthrough seamfulness: smart phones in everyday life\" (https://doi.\norg/10.1007%2Fs00779-010-0342-4). Personal and Ubiquitous\nComputing. 15 (6): 629\u2013639. doi:10.1007/s00779-010-0342-4 (ht\ntps://doi.org/10.1007%2Fs00779-010-0342-4).\n17. Rogers, Yvonne (2012). \"HCI Theory: Classical, Modern, and\nContemporary\". Synthesis Lectures on Human-Centered\nInformatics. 5 (2): 1\u2013129.\ndoi:10.2200/S00418ED1V01Y201205HCI014 (https://doi.org/10.\n2200%2FS00418ED1V01Y201205HCI014).\n18. Sengers, Phoebe; Boehner, Kirsten; David, Shay; Joseph, Kaye\n(2005). \"Re\ufb02ective design\". Proceedings of the 4th decennial\nconference on Critical computing: Between sense and sensibility.\nVol.\u00a05. pp.\u00a049\u201358. doi:10.1145/1094562.1094569 (https://doi.org/\n10.1145%2F1094562.1094569). ISBN\u00a0978-1595932037.\nS2CID\u00a09029682 (https://api.semanticscholar.org/CorpusID:90296\n82).\n19. Green, Paul (2008). Iterative Design. Lecture presented in\nIndustrial and Operations Engineering 436 (Human Factors in\nComputer Systems, University of Michigan, Ann Arbor, MI,\nFebruary 4, 2008.\n20. Kaptelinin, Victor (2012): Activity Theory. In: Soegaard, Mads\nand Dam, Rikke Friis (eds.). \"Encyclopedia of Human\u2013Computer\nInteraction\". The Interaction-Design.org Foundation. Available\nonline at http://www.interaction-\ndesign.org/encyclopedia/activity_theory.html (http://www.interacti\non-design.org/encyclopedia/activity_theory.html) Archived (http\ns://web.archive.org/web/20120323212118/http://www.interaction-\ndesign.org/encyclopedia/activity_theory.html) 2012-03-23 at the\nWayback Machine\n21. \"The Case for HCI Design Patterns\" (https://www.mit.edu/~jtidwel\nl/common_ground_one\ufb01le.html). Archived (https://web.archive.or\ng/web/20190928001239/http://www.mit.edu/~jtidwell/common_gr\nound_one\ufb01le.html) from the original on 2019-09-28. Retrieved\n2019-08-26.\n22. Friedman, B., Kahn Jr, P. H., Borning, A., & Kahn, P. H. (2006).\nValue Sensitive Design and information systems. Human\u2013\nComputer Interaction and Management Information Systems:\nFoundations. ME Sharpe, New York, 348\u2013372.\n23. Shneiderman, Ben (2022). Human-Centered AI. Oxford\nUniversity Press. ISBN\u00a0978-0192845290.\n24. Doshi-Velez, Finale; Kim, Been (2017). \"Towards a rigorous\nscience of interpretable machine learning\". arXiv:1702.08608 (htt\nps://arxiv.org/abs/1702.08608) [stat.ML (https://arxiv.org/archive/\nstat.ML)].\n25. Amershi, Saleema (2019). \"Guidelines for Human-AI Interaction\".\nProceedings of the 2019 CHI Conference on Human Factors in\nComputing Systems. pp.\u00a01\u201313. doi:10.1145/3290605.3300233 (h\nttps://doi.org/10.1145%2F3290605.3300233). ISBN\u00a0978-1-4503-\n5970-2.\n26. Azuma, Ronald T. (1997). \"A Survey of Augmented Reality\" (htt\np://elartu.tntu.edu.ua/handle/lib/46680). Presence: Teleoperators\n& Virtual Environments. 6 (4): 355\u2013385.", "mimetype": "text/plain", "start_char_idx": 2046, "end_char_idx": 4811, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a130913d-297f-4640-a6f0-ad4f19039482": {"__data__": {"id_": "a130913d-297f-4640-a6f0-ad4f19039482", "embedding": null, "metadata": {"page_label": "4", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "57f96dae-6255-48a6-951c-114fb8502003", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "dc621feac30a2cda9516a5644d6ca036063d78825ff047170d357770ebc7f34b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3d93edf4-1735-40f5-b485-921fad429741", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "a10876b5275af57f057fd40885164abf290104d9859d5dd8448ca3d12f55a6d8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "53183fae-307b-4460-8618-05d57de7e38e", "node_type": "1", "metadata": {}, "hash": "1fb1179489d498b05a1de2c159e27fb46b9812785224d3591520174e21e1fba8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "25. Amershi, Saleema (2019). \"Guidelines for Human-AI Interaction\".\nProceedings of the 2019 CHI Conference on Human Factors in\nComputing Systems. pp.\u00a01\u201313. doi:10.1145/3290605.3300233 (h\nttps://doi.org/10.1145%2F3290605.3300233). ISBN\u00a0978-1-4503-\n5970-2.\n26. Azuma, Ronald T. (1997). \"A Survey of Augmented Reality\" (htt\np://elartu.tntu.edu.ua/handle/lib/46680). Presence: Teleoperators\n& Virtual Environments. 6 (4): 355\u2013385.\ndoi:10.1162/pres.1997.6.4.355 (https://doi.org/10.1162%2Fpres.1\n997.6.4.355).\n27. Billinghurst, Mark; Clark, Andrew; Lee, Gun (2015). \"A survey of\naugmented reality\". Foundations and Trends in Human-\nComputer Interaction. 8 (2\u20133): 73\u2013272. doi:10.1561/1100000049\n(https://doi.org/10.1561%2F1100000049).\n28. Slater, Mel (2009). \"Place Illusion and Plausibility Can Lead to\nRealistic Behavior in Immersive Virtual Environments\" (https://ww\nw.ncbi.nlm.nih.gov/pmc/articles/PMC2781884). Philosophical\nTransactions of the Royal Society B. 364 (1535): 3549\u20133557.\ndoi:10.1098/rstb.2009.0138 (https://doi.org/10.1098%2Frstb.200\n9.0138). hdl:2445/53086 (https://hdl.handle.net/2445%2F53086).\nPMC\u00a02781884 (https://www.ncbi.nlm.nih.gov/pmc/articles/PMC27\n81884). PMID\u00a019884149 (https://pubmed.ncbi.nlm.nih.gov/19884\n149).\n29. Cummings, James J.; Bailenson, Jeremy N. (2016). \"How\nimmersive is enough? A meta-analysis of the effect of immersive\ntechnology on user presence\". Media Psychology. 19 (2): 272\u2013\n309. doi:10.1080/15213269.2015.1015740 (https://doi.org/10.10\n80%2F15213269.2015.1015740).\n30. Milgram, Paul; Takemura, Haruo; Utsumi, Akira; Kishino, Fumio\n(1995). \"Augmented reality: a class of displays on the reality-\nvirtuality continuum\" (https://www.researchgate.net/publication/2\n28537162). Telemanipulator and Telepresence Technologies.\n2351: 282. Bibcode:1995SPIE.2351..282M (https://ui.adsabs.har\nvard.edu/abs/1995SPIE.2351..282M). doi:10.1117/12.197321 (htt\nps://doi.org/10.1117%2F12.197321).\n31. Speiginer, Grant (2015). \"Mixed reality in education: A review of\ncurrent and future trends\". Educational Technology Research &\nDevelopment. 63 (6): 855\u2013873. doi:10.1007/s11423-015-9381-7\n(https://doi.org/10.1007%2Fs11423-015-9381-7) (inactive 14\nApril 2025).\n32. Milgram, Paul (1994). \"A Taxonomy of Mixed Reality Visual\nDisplays\". IEICE Transactions on Information and Systems. 77\n(12): 1321\u20131329.\n33. Buhalis, Dimitrios; Karatay, Natali (2022). \"Extended reality (XR)\nand arti\ufb01cial intelligence (AI) revolutionizing the hospitality\nindustry\". Journal of Hospitality & Tourism Research. 46 (3):\n489\u2013508. doi:10.1177/10963480211037322 (https://doi.org/10.11\n77%2F10963480211037322) (inactive 14 April 2025).\n34. Lazar, Jonathan (2017).", "mimetype": "text/plain", "start_char_idx": 4385, "end_char_idx": 7049, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "53183fae-307b-4460-8618-05d57de7e38e": {"__data__": {"id_": "53183fae-307b-4460-8618-05d57de7e38e", "embedding": null, "metadata": {"page_label": "4", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "57f96dae-6255-48a6-951c-114fb8502003", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "dc621feac30a2cda9516a5644d6ca036063d78825ff047170d357770ebc7f34b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a130913d-297f-4640-a6f0-ad4f19039482", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "25053fd5d398b78d06740febed9ce38d46068e70a2080ca148d3be19f2d2ebdf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "94a9a4c5-8883-48a6-838f-0d97cb868afa", "node_type": "1", "metadata": {}, "hash": "017aece507994cdea5abeedda3bc9c5762463b0938f09539863a253feb70242f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "32. Milgram, Paul (1994). \"A Taxonomy of Mixed Reality Visual\nDisplays\". IEICE Transactions on Information and Systems. 77\n(12): 1321\u20131329.\n33. Buhalis, Dimitrios; Karatay, Natali (2022). \"Extended reality (XR)\nand arti\ufb01cial intelligence (AI) revolutionizing the hospitality\nindustry\". Journal of Hospitality & Tourism Research. 46 (3):\n489\u2013508. doi:10.1177/10963480211037322 (https://doi.org/10.11\n77%2F10963480211037322) (inactive 14 April 2025).\n34. Lazar, Jonathan (2017). Research Methods in Human-Computer\nInteraction. Morgan Kaufmann. ISBN\u00a0978-0128053904.\n35. Shinohara, Kristen; Wobbrock, Jacob O. (2011). \"In the shadow\nof misperception: Assistive technology use and social\ninteractions\". Proceedings of the SIGCHI Conference on Human\nFactors in Computing Systems. pp.\u00a0705\u2013714.\ndoi:10.1145/1978942.1979044 (https://doi.org/10.1145%2F19789\n42.1979044). ISBN\u00a0978-1-4503-0228-9.\n36. Posard, Marek (2014). \"Status processes in human\u2013computer\ninteractions: Does gender matter?\". Computers in Human\nBehavior. 37 (37): 189\u2013195. doi:10.1016/j.chb.2014.04.025 (http\ns://doi.org/10.1016%2Fj.chb.2014.04.025).\n37. Posard, Marek; Rinderknecht, R. Gordon (2015). \"Do people like\nworking with computers more than human beings?\" (https://doi.or\ng/10.1016%2Fj.chb.2015.04.057). Computers in Human\nBehavior. 51: 232\u2013238. doi:10.1016/j.chb.2015.04.057 (https://do\ni.org/10.1016%2Fj.chb.2015.04.057).\n38. Dong, Hai; Hussain, Farookh; Elizabeth, Chang (2010). \"A\nhuman-centered semantic service platform for the digital\necosystems environment\" (https://www.researchgate.net/publicat\nion/220301904). World Wide Web. 13 (1\u20132): 75\u2013103.\ndoi:10.1007/s11280-009-0081-5 (https://doi.org/10.1007%2Fs11\n280-009-0081-5). hdl:20.500.11937/29660 (https://hdl.handle.ne\nt/20.500.11937%2F29660). S2CID\u00a010746264 (https://api.semanti\ncscholar.org/CorpusID:10746264).\n39. Krucoff, Max O.; Rahimpour, Shervin; Slutzky, Marc W.;\nEdgerton, V. Reggie; Turner, Dennis A. (2016-01-01). \"Enhancing\nNervous System Recovery through Neurobiologics, Neural\nInterface Training, and Neurorehabilitation\" (https://www.ncbi.nl\nm.nih.gov/pmc/articles/PMC5186786). Frontiers in\nNeuroscience. 10: 584. doi:10.3389/fnins.2016.00584 (https://do\ni.org/10.3389%2Ffnins.2016.00584). PMC\u00a05186786 (https://www.\nncbi.nlm.nih.gov/pmc/articles/PMC5186786). PMID\u00a028082858 (ht\ntps://pubmed.ncbi.nlm.nih.gov/28082858).\n40. Fischer, Gerhard (1 May 2000). \"User Modeling in Human\u2013\nComputer Interaction\" (https://doi.org/10.1023%2FA%3A1011145\n532042). User Modeling and User-Adapted Interaction. 11 (1\u20132):\n65\u201386.", "mimetype": "text/plain", "start_char_idx": 6573, "end_char_idx": 9123, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "94a9a4c5-8883-48a6-838f-0d97cb868afa": {"__data__": {"id_": "94a9a4c5-8883-48a6-838f-0d97cb868afa", "embedding": null, "metadata": {"page_label": "4", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "57f96dae-6255-48a6-951c-114fb8502003", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "dc621feac30a2cda9516a5644d6ca036063d78825ff047170d357770ebc7f34b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "53183fae-307b-4460-8618-05d57de7e38e", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "3fa800d29c3279aea6c1fc2d80069772910d97507ba29130334d413734f5b281", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a4174597-323d-4c5f-b92e-2dca78cda41f", "node_type": "1", "metadata": {}, "hash": "6013808abe3e7e8261f21e5f6a5f3a2c1f8a87a2522226950954b2f3d3856beb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Frontiers in\nNeuroscience. 10: 584. doi:10.3389/fnins.2016.00584 (https://do\ni.org/10.3389%2Ffnins.2016.00584). PMC\u00a05186786 (https://www.\nncbi.nlm.nih.gov/pmc/articles/PMC5186786). PMID\u00a028082858 (ht\ntps://pubmed.ncbi.nlm.nih.gov/28082858).\n40. Fischer, Gerhard (1 May 2000). \"User Modeling in Human\u2013\nComputer Interaction\" (https://doi.org/10.1023%2FA%3A1011145\n532042). User Modeling and User-Adapted Interaction. 11 (1\u20132):\n65\u201386. doi:10.1023/A:1011145532042 (https://doi.org/10.1023%\n2FA%3A1011145532042).\n41. SINHA, Gaurav; SHAHI, Rahul; SHANKAR, Mani. Human\u2013\nComputer Interaction. In: Emerging Trends in Engineering and\nTechnology (ICETET), 2010 3rd International Conference on.\nIEEE, 2010. p. 1\u20134.\n42. \"Conference Search: hci\" (http://www.confsearch.org/confsearch/\nfaces/pages/topic.jsp?topic=hci&sortMode=1&graphicView=tru\ne). www.confsearch.org. Archived (https://web.archive.org/web/2\n0090820005758/http://www.confsearch.org/confsearch/faces/pag\nes/topic.jsp?topic=hci&sortMode=1&graphicView=true) from the\noriginal on 2009-08-20. Retrieved 2009-05-15.\nAcademic overviews of the \ufb01eld\nJulie A. Jacko (Ed.). (2012). Human\u2013Computer Interaction Handbook (3rd Edition). CRC Press. ISBN\u00a01-4398-2943-8\nAndrew Sears and Julie A. Jacko (Eds.). (2007). Human\u2013Computer Interaction Handbook (2nd Edition). CRC Press. ISBN\u00a00-8058-5870-9\nJulie A. Jacko and Andrew Sears (Eds.). (2003). Human\u2013Computer Interaction Handbook. Mahwah: Lawrence Erlbaum & Associates. ISBN\u00a00-8058-4468-6\nDix, A. (2004). Human\u2013computer interaction (3rd ed.). Pearson Education. ISBN\u00a00-1304-6109-1\nHistorically important classic\nStuart K. Card, Thomas P. Moran, Allen Newell (1983): The Psychology of Human\u2013Computer Interaction. Erlbaum, Hillsdale 1983 ISBN\u00a00-89859-243-7\nOverviews of history of the \ufb01eld\nJonathan Grudin: A moving target: The evolution of human\u2013computer interaction. In Andrew Sears and Julie A. Jacko (Eds.). (2007). Human\u2013Computer Interaction Handbook (2nd Edition). CRC Press.\nISBN\u00a00-8058-5870-9\nMyers, Brad (1998). \"A brief history of human\u2013computer interaction technology\". Interactions. 5 (2): 44\u201354. CiteSeerX\u00a010.1.1.23.2422 (https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.23.2422).\ndoi:10.1145/274430.274436 (https://doi.org/10.1145%2F274430.274436). S2CID\u00a08278771 (https://api.semanticscholar.org/CorpusID:8278771).\nJohn M. Carroll: Human\u2013Computer Interaction: History and Status. (http://www.interaction-design.org/encyclopedia/human_computer_interaction_hci.html) Encyclopedia Entry at Interaction-Design.org\nCarroll, John M. (2010). \"Conceptualizing a possible discipline of human\u2013computer interaction\". Interacting with Computers. 22 (1): 3\u201312. doi:10.1016/j.intcom.2009.11.008 (https://doi.org/10.1016%2Fj.intco\nm.2009.11.008).", "mimetype": "text/plain", "start_char_idx": 8693, "end_char_idx": 11430, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a4174597-323d-4c5f-b92e-2dca78cda41f": {"__data__": {"id_": "a4174597-323d-4c5f-b92e-2dca78cda41f", "embedding": null, "metadata": {"page_label": "4", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "57f96dae-6255-48a6-951c-114fb8502003", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "dc621feac30a2cda9516a5644d6ca036063d78825ff047170d357770ebc7f34b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "94a9a4c5-8883-48a6-838f-0d97cb868afa", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "fe18c287b4c5d6f30b6f933d95179772d2defda801f35f3160d3a956f5155cab", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "doi:10.1145/274430.274436 (https://doi.org/10.1145%2F274430.274436). S2CID\u00a08278771 (https://api.semanticscholar.org/CorpusID:8278771).\nJohn M. Carroll: Human\u2013Computer Interaction: History and Status. (http://www.interaction-design.org/encyclopedia/human_computer_interaction_hci.html) Encyclopedia Entry at Interaction-Design.org\nCarroll, John M. (2010). \"Conceptualizing a possible discipline of human\u2013computer interaction\". Interacting with Computers. 22 (1): 3\u201312. doi:10.1016/j.intcom.2009.11.008 (https://doi.org/10.1016%2Fj.intco\nm.2009.11.008).\nSara Candeias, S. and A. Veiga The dialogue between man and machine: the role of language theory and technology, Sandra M. Alu\u00edsio & Stella E. O. Tagnin, New Language Technologies, and Linguistic\nResearch, A Two-Way Road: cap. 11. Cambridge Scholars Publishing. (ISBN\u00a0978-1-4438-5377-4)\nSocial science and HCI\nNass, Clifford; Fogg, B. J.; Moon, Youngme (1996). \"Can computers be teammates?\" (https://doi.org/10.1006%2Fijhc.1996.0073). International Journal of Human-Computer Studies. 45 (6): 669\u2013678.\ndoi:10.1006/ijhc.1996.0073 (https://doi.org/10.1006%2Fijhc.1996.0073).\nNass, Clifford; Moon, Youngme (2000). \"Machines and mindlessness: Social responses to computers\". Journal of Social Issues. 56 (1): 81\u2013103. doi:10.1111/0022-4537.00153 (https://doi.org/10.1111%2F0022\n-4537.00153). S2CID\u00a015851410 (https://api.semanticscholar.org/CorpusID:15851410).\nPosard, Marek N (2014). \"Status processes in human\u2013computer interactions: Does gender matter?\". Computers in Human Behavior. 37: 189\u2013195. doi:10.1016/j.chb.2014.04.025 (https://doi.org/10.1016%2Fj.\nchb.2014.04.025).\nPosard, Marek N.; Rinderknecht, R. Gordon (2015). \"Do people like working with computers more than human beings?\" (https://doi.org/10.1016%2Fj.chb.2015.04.057). Computers in Human Behavior. 51:\n232\u2013238. doi:10.1016/j.chb.2015.04.057 (https://doi.org/10.1016%2Fj.chb.2015.04.057).\nAcademic journals\nACM Transactions on Computer-Human Interaction\nBehaviour & Information Technology [1] (http://www.informaworld.com/bit)\nInteracting with Computers\nInternational Journal of Human-Computer Interaction\nInternational Journal of Human-Computer Studies\nHuman\u2013Computer Interaction [2] (http://hci-journal.com/) [3] (http://www.tandf.co.uk/journals/titles/07370024.asp)\nCollection of papers\nRonald M. Baecker, Jonathan Grudin, William A. S. Buxton, Saul Greenberg (Eds.) (1995): Readings in human\u2013computer interaction. Toward the Year 2000. 2. ed. Morgan Kaufmann, San Francisco 1995\nISBN\u00a01-55860-246-1\nFurther reading\n6/7/25, 7:32 PM Human\u2013computer interaction - Wikipedia\nhttps://en.wikipedia.org/wiki/Human\u2013computer_interaction 4/5", "mimetype": "text/plain", "start_char_idx": 10879, "end_char_idx": 13525, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "83cd90d3-bc96-45ae-9aa6-689ce85850b7": {"__data__": {"id_": "83cd90d3-bc96-45ae-9aa6-689ce85850b7", "embedding": null, "metadata": {"page_label": "5", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "371cfb89-a0eb-4d3f-9ec1-432e47970e44", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Human\u2013computer interaction - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Human\u2013computer interaction - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 844228, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "1addfee69c746a55f4e602939e8508d7f6af1080c7d91e3fa87c38c39581c261", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Mithun Ahamed, Developing a Message Interface Architecture for Android Operating Systems, (2015). [4] (http://asrjetsjournal.org/index.php/American_Scienti\ufb01c_Journal/article/view/1067/622)\nTreatments by one or few authors, often aimed at a more general audience\nJakob Nielsen: Usability Engineering. Academic Press, Boston 1993 ISBN\u00a00-12-518405-0\nDonald A. Norman: The Psychology of Everyday Things. Basic Books, New York 1988 ISBN\u00a00-465-06709-3\nJef Raskin: The Humane Interface. New directions for designing interactive systems. Addison-Wesley, Boston 2000 ISBN\u00a00-201-37937-6\nBruce Tognazzini: Tog on Interface. Addison-Wesley, Reading 1991 ISBN\u00a00-201-60842-1\nTextbooks\nAlan Dix, Janet Finlay, Gregory Abowd, and Russell Beale (2003): Human\u2013Computer Interaction. 3rd Edition. Prentice Hall, 2003. http://hcibook.com/e3/ ISBN\u00a00-13-046109-1\nYvonne Rogers, Helen Sharp & Jenny Preece: Interaction Design: Beyond Human\u2013Computer Interaction, 3rd ed. John Wiley & Sons Ltd., 2011 ISBN\u00a00-470-66576-9\nHelen Sharp, Yvonne Rogers & Jenny Preece: Interaction Design: Beyond Human\u2013Computer Interaction, 2nd ed. John Wiley & Sons Ltd., 2007 ISBN\u00a00-470-01866-6\nMatt Jones (interaction designer) and Gary Marsden (2006). Mobile Interaction Design, John Wiley and Sons Ltd.\nBad Human Factors Designs (http://www.baddesigns.com)\nThe HCI Wiki Bibliography (http://www.interaction-design.org/references/) with over 100,000 publications.\nThe HCI Bibliography (http://hcibib.org/) Over 100,000 publications about HCI.\nHuman-Centered Computing Education Digital Library (https://web.archive.org/web/20110817181257/http://hccedl.cc.gatech.edu/)\nHCI Webliography (http://hcibib.org/hci-sites/organizations)\nRetrieved from \"https://en.wikipedia.org/w/index.php?title=Human\u2013computer_interaction&oldid=1292945116\"\nExternal links\n6/7/25, 7:32 PM Human\u2013computer interaction - Wikipedia\nhttps://en.wikipedia.org/wiki/Human\u2013computer_interaction 5/5", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1918, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2b85ec23-f6b5-4d2c-8ee4-7b5a048c09ec": {"__data__": {"id_": "2b85ec23-f6b5-4d2c-8ee4-7b5a048c09ec", "embedding": null, "metadata": {"page_label": "1", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5deb23ed-42a3-4596-b3db-53e2507ba468", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "a545dda11471ca0f70a918f6c9f22f528e639be483332952a66c16ab9f87ed84", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "45402de1-5965-4a5d-98af-4bb16241d530", "node_type": "1", "metadata": {}, "hash": "7d2c96f1f9d960121574dbe11dacd775958fac666f88125607efc3848ea10a76", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Machine learning as sub\ufb01eld of AI[ 2 1 ] \nMachine learning\nMachine learning (ML) is a field of study in artificial intelligence concerned with the development and study of statistical algorithms that can learn from data and generalise to unseen data, and thus perform\ntasks without explicit instructions.[1] Within a subdiscipline in machine learning, advances in the field of deep learning have allowed neural networks, a class of statistical algorithms, to surpass many previous\nmachine learning approaches in performance.[2]\nML finds application in many fields, including natural language processing, computer vision, speech recognition, email filtering, agriculture, and medicine.[3][4] The application of ML to business problems is\nknown as predictive analytics.\nStatistics and mathematical optimisation (mathematical programming) methods comprise the foundations of machine learning. Data mining is a related field of study, focusing on exploratory data analysis (EDA)\nvia unsupervised learning.[6][7]\nFrom a theoretical viewpoint, probably approximately correct learning provides a framework for describing machine learning.\nThe term machine learning was coined in 1959 by Arthur Samuel, an IBM employee and pioneer in the field of computer gaming and artificial intelligence.[8][9] The synonym self-teaching computers was also\nused in this time period.[10][11]\nAlthough the earliest machine learning model was introduced in the 1950s when Arthur Samuel invented a program that calculated the winning chance in checkers for each side, the history of machine learning\nroots back to decades of human desire and effort to study human cognitive processes.[12] In 1949, Canadian psychologist Donald Hebb published the book The Organization of Behavior, in which he introduced a\ntheoretical neural structure formed by certain interactions among nerve cells.[13] Hebb's model of neurons interacting with one another set a groundwork for how AIs and machine learning algorithms work under\nnodes, or artificial neurons used by computers to communicate data.[12] Other researchers who have studied human cognitive systems contributed to the modern machine learning technologies as well, including\nlogician Walter Pitts and Warren McCulloch, who proposed the early mathematical models of neural networks to come up with algorithms that mirror human thought processes.[12]\nBy the early 1960s, an experimental \"learning machine\" with punched tape memory, called Cybertron, had been developed by Raytheon Company to analyse sonar signals, electrocardiograms, and speech patterns\nusing rudimentary reinforcement learning. It was repetitively \"trained\" by a human operator/teacher to recognise patterns and equipped with a \"goof\" button to cause it to reevaluate incorrect decisions.[14] A\nrepresentative book on research into machine learning during the 1960s was Nilsson's book on Learning Machines, dealing mostly with machine learning for pattern classification.[15] Interest related to pattern\nrecognition continued into the 1970s, as described by Duda and Hart in 1973.[16] In 1981 a report was given on using teaching strategies so that an artificial neural network learns to recognise 40 characters (26\nletters, 10 digits, and 4 special symbols) from a computer terminal.[17]\nTom M. Mitchell provided a widely quoted, more formal definition of the algorithms studied in the machine learning field: \"A computer program is said to learn from experience E with respect to some class of\ntasks T and performance measure P if its performance at tasks in T, as measured by P, improves with experience E.\"[18] This definition of the tasks in which machine learning is concerned offers a fundamentally\noperational definition rather than defining the field in cognitive terms. This follows Alan Turing's proposal in his paper \"Computing Machinery and Intelligence\", in which the question \"Can machines think?\" is\nreplaced with the question \"Can machines do what we (as thinking entities) can do?\".[19]\nModern-day machine learning has two objectives. One is to classify data based on models which have been developed; the other purpose is to make predictions for future outcomes based on these models. A\nhypothetical algorithm specific to classifying data may use computer vision of moles coupled with supervised learning in order to train it to classify the cancerous moles. A machine learning algorithm for stock\ntrading may inform the trader of future potential predictions.[20]\nAs a scientific endeavour, machine learning grew out of the quest for artificial intelligence (AI). In the early days of AI as an academic discipline, some researchers were\ninterested in having machines learn from data.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4689, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "45402de1-5965-4a5d-98af-4bb16241d530": {"__data__": {"id_": "45402de1-5965-4a5d-98af-4bb16241d530", "embedding": null, "metadata": {"page_label": "1", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5deb23ed-42a3-4596-b3db-53e2507ba468", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "a545dda11471ca0f70a918f6c9f22f528e639be483332952a66c16ab9f87ed84", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2b85ec23-f6b5-4d2c-8ee4-7b5a048c09ec", "node_type": "1", "metadata": {"page_label": "1", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "36954b42d0e003070ac6a2834941a7ba7ea036156aac53b43165a39659e2d374", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c849718b-5a9f-4308-ab05-a48f885add41", "node_type": "1", "metadata": {}, "hash": "05f8d7a61554d9dbdfdc17bafb6b00bf8be2ea9d1f24d5d26284fb36e1909111", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "This follows Alan Turing's proposal in his paper \"Computing Machinery and Intelligence\", in which the question \"Can machines think?\" is\nreplaced with the question \"Can machines do what we (as thinking entities) can do?\".[19]\nModern-day machine learning has two objectives. One is to classify data based on models which have been developed; the other purpose is to make predictions for future outcomes based on these models. A\nhypothetical algorithm specific to classifying data may use computer vision of moles coupled with supervised learning in order to train it to classify the cancerous moles. A machine learning algorithm for stock\ntrading may inform the trader of future potential predictions.[20]\nAs a scientific endeavour, machine learning grew out of the quest for artificial intelligence (AI). In the early days of AI as an academic discipline, some researchers were\ninterested in having machines learn from data. They attempted to approach the problem with various symbolic methods, as well as what were then termed \"neural\nnetworks\"; these were mostly perceptrons and other models that were later found to be reinventions of the generalised linear models of statistics.[22] Probabilistic reasoning\nwas also employed, especially in automated medical diagnosis.[23]: 488 \nHowever, an increasing emphasis on the logical, knowledge-based approach caused a rift between AI and machine learning. Probabilistic systems were plagued by\ntheoretical and practical problems of data acquisition and representation.[23]: 488  By 1980, expert systems had come to dominate AI, and statistics was out of favour.[24]\nWork on symbolic/knowledge-based learning did continue within AI, leading to inductive logic programming(ILP), but the more statistical line of research was now outside\nthe field of AI proper, in pattern recognition and information retrieval.[23]: 708\u2013710, 755  Neural networks research had been abandoned by AI and computer science around\nthe same time. This line, too, was continued outside the AI/CS field, as \"connectionism\", by researchers from other disciplines including John Hopfield, David Rumelhart,\nand Geoffrey Hinton. Their main success came in the mid-1980s with the reinvention of backpropagation.[23]: 25 \nMachine learning (ML), reorganised and recognised as its own field, started to flourish in the 1990s. The field changed its goal from achieving artificial intelligence to\ntackling solvable problems of a practical nature. It shifted focus away from the symbolic approaches it had inherited from AI, and toward methods and models borrowed\nfrom statistics, fuzzy logic, and probability theory.[24]\nThere is a close connection between machine learning and compression. A system that predicts the posterior probabilities of a sequence given its entire history can be used for optimal data compression (by using\narithmetic coding on the output distribution). Conversely, an optimal compressor can be used for prediction (by finding the symbol that compresses best, given the previous history). This equivalence has been\nused as a justification for using data compression as a benchmark for \"general intelligence\".[25][26][27]\nAn alternative view can show compression algorithms implicitly map strings into implicit feature space vectors, and compression-based similarity measures compute similarity within these feature spaces. For\neach compressor C(.) we define an associated vector space \u2135 , such that C(.) maps an input string x, corresponding to the vector norm ||~x||. An exhaustive examination of the feature spaces underlying all\ncompression algorithms is precluded by space; instead, feature vectors chooses to examine three representative lossless compression methods, LZW, LZ77, and PPM.[28]\nAccording to AIXI theory, a connection more directly explained in Hutter Prize, the best possible compression of x is the smallest possible software that generates x. For example, in that model, a zip file's\ncompressed size includes both the zip file and the unzipping software, since you can not unzip it without both, but there may be an even smaller combined form.\nExamples of AI-powered audio/video compression software include NVIDIA Maxine, AIVC.[29] Examples of software that can perform AI-powered image compression include OpenCV, TensorFlow, MATLAB's\nImage Processing Toolbox (IPT) and High-Fidelity Generative Image Compression.[30]\nIn unsupervised machine learning, k-means clustering can be utilized to compress data by grouping similar data points into clusters. This technique simplifies handling extensive datasets that lack predefined\nlabels and finds widespread use in fields such as image compression.[31]\nData compression aims to reduce the size of data files, enhancing storage efficiency and speeding up data transmission.", "mimetype": "text/plain", "start_char_idx": 3766, "end_char_idx": 8540, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c849718b-5a9f-4308-ab05-a48f885add41": {"__data__": {"id_": "c849718b-5a9f-4308-ab05-a48f885add41", "embedding": null, "metadata": {"page_label": "1", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5deb23ed-42a3-4596-b3db-53e2507ba468", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "a545dda11471ca0f70a918f6c9f22f528e639be483332952a66c16ab9f87ed84", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "45402de1-5965-4a5d-98af-4bb16241d530", "node_type": "1", "metadata": {"page_label": "1", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "08dd36c57eea3bf2452ae50da7cd498219f5d5b53250a865a6c2a24bfecbf8d5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Examples of AI-powered audio/video compression software include NVIDIA Maxine, AIVC.[29] Examples of software that can perform AI-powered image compression include OpenCV, TensorFlow, MATLAB's\nImage Processing Toolbox (IPT) and High-Fidelity Generative Image Compression.[30]\nIn unsupervised machine learning, k-means clustering can be utilized to compress data by grouping similar data points into clusters. This technique simplifies handling extensive datasets that lack predefined\nlabels and finds widespread use in fields such as image compression.[31]\nData compression aims to reduce the size of data files, enhancing storage efficiency and speeding up data transmission. K-means clustering, an unsupervised machine learning algorithm, is employed to partition a\ndataset into a specified number of clusters, k, each represented by the centroid of its points. This process condenses extensive datasets into a more compact set of representative points. Particularly beneficial in\nimage and signal processing, k-means clustering aids in data reduction by replacing groups of data points with their centroids, thereby preserving the core information of the original data while significantly\ndecreasing the required storage space.[32]\nLarge language models (LLMs) are also efficient lossless data compressors on some data sets, as demonstrated by DeepMind's research with the Chinchilla 70B model. Developed by DeepMind, Chinchilla 70B\neffectively compressed data, outperforming conventional methods such as Portable Network Graphics (PNG) for images and Free Lossless Audio Codec (FLAC) for audio. It achieved compression of image and\naudio data to 43.4% and 16.4% of their original sizes, respectively. There is, however, some reason to be concerned that the data set used for testing overlaps the LLM training data set, making it possible that the\nChinchilla 70B model is only an efficient compression tool on data it has already been trained on.[33][34]\nMachine learning and data mining often employ the same methods and overlap significantly, but while machine learning focuses on prediction, based on known properties learned from the training data, data\nmining focuses on the discovery of (previously) unknown properties in the data (this is the analysis step of knowledge discovery in databases). Data mining uses many machine learning methods, but with\ndifferent goals; on the other hand, machine learning also employs data mining methods as \"unsupervised learning\" or as a preprocessing step to improve learner accuracy. Much of the confusion between these\ntwo research communities (which do often have separate conferences and separate journals, ECML PKDD being a major exception) comes from the basic assumptions they work with: in machine learning,\nperformance is usually evaluated with respect to the ability to reproduce known knowledge, while in knowledge discovery and data mining (KDD) the key task is the discovery of previously unknown knowledge.\nEvaluated with respect to known knowledge, an uninformed (unsupervised) method will easily be outperformed by other supervised methods, while in a typical KDD task, supervised methods cannot be used due\nto the unavailability of training data.\nHistory\nRelationships to other fields\nArti\ufb01cial intelligence\nData compression\nData mining\n6/7/25, 7:32 PM Machine learning - Wikipedia\nhttps://en.wikipedia.org/wiki/Machine_learning 1/11", "mimetype": "text/plain", "start_char_idx": 7864, "end_char_idx": 11260, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0c22dd55-2dc8-488d-b96e-4c6c74452fc5": {"__data__": {"id_": "0c22dd55-2dc8-488d-b96e-4c6c74452fc5", "embedding": null, "metadata": {"page_label": "2", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "515cd4d2-1a82-4adf-adec-6fbde7b97c91", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "35d30c2557ec9984d8e4da0c641a980c290c1fe82a98bc91dad7613fa432c698", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cec3b98a-ae4a-4b31-85db-53be43c8f6c2", "node_type": "1", "metadata": {}, "hash": "e73feb9b39f57dad215084348ce2ace6805b7666087625d50985a43c2f48f72a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "In supervised learning, the training data is labelled with\nthe expected answers, while in unsupervised learning,\nthe model identi\ufb01es patterns or structures in unlabelled\ndata.\nA support-vector machine is a supervised\nlearning model that divides the data into\nregions separated by a linear boundary.\nHere, the linear boundary divides the\nblack circles from the white.\nMachine learning also has intimate ties to optimisation: Many learning problems are formulated as minimisation of some loss function on a training set of examples. Loss functions express the discrepancy\nbetween the predictions of the model being trained and the actual problem instances (for example, in classification, one wants to assign a label to instances, and models are trained to correctly predict the\npreassigned labels of a set of examples).[35]\nCharacterizing the generalisation of various learning algorithms is an active topic of current research, especially for deep learning algorithms.\nMachine learning and statistics are closely related fields in terms of methods, but distinct in their principal goal: statistics draws population inferences from a sample, while machine learning finds generalisable\npredictive patterns.[36] According to Michael I. Jordan, the ideas of machine learning, from methodological principles to theoretical tools, have had a long pre-history in statistics.[37] He also suggested the term\ndata science as a placeholder to call the overall field.[37]\nConventional statistical analyses require the a priori selection of a model most suitable for the study data set. In addition, only significant or theoretically relevant variables based on previous experience are\nincluded for analysis. In contrast, machine learning is not built on a pre-structured model; rather, the data shape the model by detecting underlying patterns. The more variables (input) used to train the model,\nthe more accurate the ultimate model will be.[38]\nLeo Breiman distinguished two statistical modelling paradigms: data model and algorithmic model,[39] wherein \"algorithmic model\" means more or less the machine learning algorithms like Random Forest.\nSome statisticians have adopted methods from machine learning, leading to a combined field that they call statistical learning.[40]\nAnalytical and computational techniques derived from deep-rooted physics of disordered systems can be extended to large-scale problems, including machine learning, e.g., to analyse the weight space of deep\nneural networks.[41] Statistical physics is thus finding applications in the area of medical diagnostics.[42]\nA core objective of a learner is to generalise from its experience.[5][43] Generalisation in this context is the ability of a learning machine to perform accurately on new, unseen examples/tasks after having\nexperienced a learning data set. The training examples come from some generally unknown probability distribution (considered representative of the space of occurrences) and the learner has to build a general\nmodel about this space that enables it to produce sufficiently accurate predictions in new cases.\nThe computational analysis of machine learning algorithms and their performance is a branch of theoretical computer science known as computational learning theory via the probably approximately correct\nlearning model. Because training sets are finite and the future is uncertain, learning theory usually does not yield guarantees of the performance of algorithms. Instead, probabilistic bounds on the performance\nare quite common. The bias\u2013variance decomposition is one way to quantify generalisation error.\nFor the best performance in the context of generalisation, the complexity of the hypothesis should match the complexity of the function underlying the data. If the hypothesis is less complex than the function,\nthen the model has under fitted the data. If the complexity of the model is increased in response, then the training error decreases. But if the hypothesis is too complex, then the model is subject to overfitting and\ngeneralisation will be poorer.[44]\nIn addition to performance bounds, learning theorists study the time complexity and feasibility of learning. In computational learning theory, a computation is considered feasible if it can be done in polynomial\ntime. There are two kinds of time complexity results: Positive results show that a certain class of functions can be learned in polynomial time. Negative results show that certain classes cannot be learned in\npolynomial time.\nMachine learning approaches are traditionally divided into three broad categories, which correspond to learning paradigms, depending on the nature of the\n\"signal\" or \"feedback\" available to the learning system:\nSupervised learning: The computer is presented with example inputs and their desired outputs, given by a \"teacher\", and the goal is to learn a general rule\nthat maps inputs to outputs.\nUnsupervised learning: No labels are given to the learning algorithm, leaving it on its own to \ufb01nd structure in its input. Unsupervised learning can be a goal in\nitself (discovering hidden patterns in data) or a means towards an end (feature learning).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 5153, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cec3b98a-ae4a-4b31-85db-53be43c8f6c2": {"__data__": {"id_": "cec3b98a-ae4a-4b31-85db-53be43c8f6c2", "embedding": null, "metadata": {"page_label": "2", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "515cd4d2-1a82-4adf-adec-6fbde7b97c91", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "35d30c2557ec9984d8e4da0c641a980c290c1fe82a98bc91dad7613fa432c698", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0c22dd55-2dc8-488d-b96e-4c6c74452fc5", "node_type": "1", "metadata": {"page_label": "2", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "2c965893c53ff3c2b585cdd25f73dd59b8a92a44ac13f3c6dc2d8d1169331d68", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4f22c82d-7f24-4c51-8161-b7c824fb8ddf", "node_type": "1", "metadata": {}, "hash": "9049a14a8e18ddb80fdfc7678e123298a0eac51906f1c85da3fe68743b08e207", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "In computational learning theory, a computation is considered feasible if it can be done in polynomial\ntime. There are two kinds of time complexity results: Positive results show that a certain class of functions can be learned in polynomial time. Negative results show that certain classes cannot be learned in\npolynomial time.\nMachine learning approaches are traditionally divided into three broad categories, which correspond to learning paradigms, depending on the nature of the\n\"signal\" or \"feedback\" available to the learning system:\nSupervised learning: The computer is presented with example inputs and their desired outputs, given by a \"teacher\", and the goal is to learn a general rule\nthat maps inputs to outputs.\nUnsupervised learning: No labels are given to the learning algorithm, leaving it on its own to \ufb01nd structure in its input. Unsupervised learning can be a goal in\nitself (discovering hidden patterns in data) or a means towards an end (feature learning).\nReinforcement learning: A computer program interacts with a dynamic environment in which it must perform a certain goal (such as driving a vehicle or\nplaying a game against an opponent). As it navigates its problem space, the program is provided feedback that's analogous to rewards, which it tries to\nmaximise.[5]\nAlthough each algorithm has advantages and limitations, no single algorithm works for all problems.[45][46][47]\nSupervised learning algorithms build a mathematical model of a set of data that contains both the inputs and the desired outputs.[48] The data, known as training data,\nconsists of a set of training examples. Each training example has one or more inputs and the desired output, also known as a supervisory signal. In the mathematical model,\neach training example is represented by an array or vector, sometimes called a feature vector, and the training data is represented by a matrix. Through iterative\noptimisation of an objective function, supervised learning algorithms learn a function that can be used to predict the output associated with new inputs.[49] An optimal\nfunction allows the algorithm to correctly determine the output for inputs that were not a part of the training data. An algorithm that improves the accuracy of its outputs or\npredictions over time is said to have learned to perform that task.[18]\nTypes of supervised-learning algorithms include active learning, classification and regression.[50] Classification algorithms are used when the outputs are restricted to a\nlimited set of values, while regression algorithms are used when the outputs can take any numerical value within a range. For example, in a classification algorithm that\nfilters emails, the input is an incoming email, and the output is the folder in which to file the email. In contrast, regression is used for tasks such as predicting a person's\nheight based on factors like age and genetics or forecasting future temperatures based on historical data.[51]\nSimilarity learning is an area of supervised machine learning closely related to regression and classification, but the goal is to learn from examples using a similarity\nfunction that measures how similar or related two objects are. It has applications in ranking, recommendation systems, visual identity tracking, face verification, and\nspeaker verification.\nUnsupervised learning algorithms find structures in data that has not been labelled, classified or categorised. Instead of responding to feedback, unsupervised learning\nalgorithms identify commonalities in the data and react based on the presence or absence of such commonalities in each new piece of data. Central applications of\nunsupervised machine learning include clustering, dimensionality reduction,[7] and density estimation.[52]\nCluster analysis is the assignment of a set of observations into subsets (called clusters) so that observations within the same cluster are similar according to one or more predesignated criteria, while observations\ndrawn from different clusters are dissimilar. Different clustering techniques make different assumptions on the structure of the data, often defined by some similarity metric and evaluated, for example, by\ninternal compactness, or the similarity between members of the same cluster, and separation, the difference between clusters. Other methods are based on estimated density and graph connectivity.\nA special type of unsupervised learning called, self-supervised learning involves training a model by generating the supervisory signal from the data itself.[53][54]\nSemi-supervised learning falls between unsupervised learning (without any labelled training data) and supervised learning (with completely labelled training data). Some of the training examples are missing\ntraining labels, yet many machine-learning researchers have found that unlabelled data, when used in conjunction with a small amount of labelled data, can produce a considerable improvement in learning\naccuracy.\nIn weakly supervised learning, the training labels are noisy, limited, or imprecise; however, these labels are often cheaper to obtain, resulting in larger effective training sets.", "mimetype": "text/plain", "start_char_idx": 4176, "end_char_idx": 9310, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4f22c82d-7f24-4c51-8161-b7c824fb8ddf": {"__data__": {"id_": "4f22c82d-7f24-4c51-8161-b7c824fb8ddf", "embedding": null, "metadata": {"page_label": "2", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "515cd4d2-1a82-4adf-adec-6fbde7b97c91", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "35d30c2557ec9984d8e4da0c641a980c290c1fe82a98bc91dad7613fa432c698", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cec3b98a-ae4a-4b31-85db-53be43c8f6c2", "node_type": "1", "metadata": {"page_label": "2", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "71568f36382dd036d63e412c1f65e05d4ae982124f7c7c86437bf954017799f8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Other methods are based on estimated density and graph connectivity.\nA special type of unsupervised learning called, self-supervised learning involves training a model by generating the supervisory signal from the data itself.[53][54]\nSemi-supervised learning falls between unsupervised learning (without any labelled training data) and supervised learning (with completely labelled training data). Some of the training examples are missing\ntraining labels, yet many machine-learning researchers have found that unlabelled data, when used in conjunction with a small amount of labelled data, can produce a considerable improvement in learning\naccuracy.\nIn weakly supervised learning, the training labels are noisy, limited, or imprecise; however, these labels are often cheaper to obtain, resulting in larger effective training sets.[55]\nReinforcement learning is an area of machine learning concerned with how software agents ought to take actions in an environment so as to maximise some notion of cumulative reward. Due to its generality, the\nfield is studied in many other disciplines, such as game theory, control theory, operations research, information theory, simulation-based optimisation, multi-agent systems, swarm intelligence, statistics and\ngenetic algorithms. In reinforcement learning, the environment is typically represented as a Markov decision process (MDP). Many reinforcement learning algorithms use dynamic programming techniques.[56]\nGeneralization\nStatistics\nStatistical physics\nTheory\nApproaches\nSupervised learning\nUnsupervised learning\nSemi-supervised learning\nReinforcement learning\n6/7/25, 7:32 PM Machine learning - Wikipedia\nhttps://en.wikipedia.org/wiki/Machine_learning 2/11", "mimetype": "text/plain", "start_char_idx": 8477, "end_char_idx": 10185, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f194cb50-835a-416e-a27e-e5ff4b70f450": {"__data__": {"id_": "f194cb50-835a-416e-a27e-e5ff4b70f450", "embedding": null, "metadata": {"page_label": "3", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e95ed92-630a-4a37-a537-96f0770aa1c8", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "d344192a334af9b87774ccb5d6418de733f96422330a332a8738ad00f59f761c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "502b146c-6a8e-443b-bfc2-317f61305678", "node_type": "1", "metadata": {}, "hash": "ae007255802a7d972f3de87a6eb23b4220fd6c95d107d016eeca3084ad1dd851", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Reinforcement learning algorithms do not assume knowledge of an exact mathematical model of the MDP and are used when exact models are infeasible. Reinforcement\nlearning algorithms are used in autonomous vehicles or in learning to play a game against a human opponent.\nDimensionality reduction is a process of reducing the number of random variables under consideration by obtaining a set of principal variables.[57] In other words, it is a\nprocess of reducing the dimension of the feature set, also called the \"number of features\". Most of the dimensionality reduction techniques can be considered as either feature\nelimination or extraction. One of the popular methods of dimensionality reduction is principal component analysis (PCA). PCA involves changing higher-dimensional data\n(e.g., 3D) to a smaller space (e.g., 2D). The manifold hypothesis proposes that high-dimensional data sets lie along low-dimensional manifolds, and many dimensionality\nreduction techniques make this assumption, leading to the area of manifold learning and manifold regularisation.\nOther approaches have been developed which do not fit neatly into this three-fold categorisation, and sometimes more than one is used by the same machine learning system. For example, topic modelling, meta-\nlearning.[58]\nSelf-learning, as a machine learning paradigm was introduced in 1982 along with a neural network capable of self-learning, named crossbar adaptive array (CAA).[59][60] It gives a solution to the problem\nlearning without any external reward, by introducing emotion as an internal reward. Emotion is used as state evaluation of a self-learning agent. The CAA self-learning algorithm computes, in a crossbar fashion,\nboth decisions about actions and emotions (feelings) about consequence situations. The system is driven by the interaction between cognition and emotion.[61] The self-learning algorithm updates a memory\nmatrix W =||w(a,s)|| such that in each iteration executes the following machine learning routine:\n1. in situation s perform action a\n2. receive a consequence situation s'\n3. compute emotion of being in the consequence situation v(s')\n4. update crossbar memory w'(a,s) = w(a,s) + v(s')\nIt is a system with only one input, situation, and only one output, action (or behaviour) a. There is neither a separate reinforcement input nor an advice input from the environment. The backpropagated value\n(secondary reinforcement) is the emotion toward the consequence situation. The CAA exists in two environments, one is the behavioural environment where it behaves, and the other is the genetic environment,\nwherefrom it initially and only once receives initial emotions about situations to be encountered in the behavioural environment. After receiving the genome (species) vector from the genetic environment, the\nCAA learns a goal-seeking behaviour, in an environment that contains both desirable and undesirable situations.[62]\nSeveral learning algorithms aim at discovering better representations of the inputs provided during training.[63] Classic examples include principal component analysis and cluster analysis. Feature learning\nalgorithms, also called representation learning algorithms, often attempt to preserve the information in their input but also transform it in a way that makes it useful, often as a pre-processing step before\nperforming classification or predictions. This technique allows reconstruction of the inputs coming from the unknown data-generating distribution, while not being necessarily faithful to configurations that are\nimplausible under that distribution. This replaces manual feature engineering, and allows a machine to both learn the features and use them to perform a specific task.\nFeature learning can be either supervised or unsupervised. In supervised feature learning, features are learned using labelled input data. Examples include artificial neural networks, multilayer perceptrons, and\nsupervised dictionary learning. In unsupervised feature learning, features are learned with unlabelled input data. Examples include dictionary learning, independent component analysis, autoencoders, matrix\nfactorisation[64] and various forms of clustering.[65][66][67]\nManifold learning algorithms attempt to do so under the constraint that the learned representation is low-dimensional. Sparse coding algorithms attempt to do so under the constraint that the learned\nrepresentation is sparse, meaning that the mathematical model has many zeros. Multilinear subspace learning algorithms aim to learn low-dimensional representations directly from tensor representations for\nmultidimensional data, without reshaping them into higher-dimensional vectors.[68] Deep learning algorithms discover multiple levels of representation, or a hierarchy of features, with higher-level, more abstract\nfeatures defined in terms of (or generating) lower-level features. It has been argued that an intelligent machine is one that learns a representation that disentangles the underlying factors of variation that explain\nthe observed data.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 5053, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "502b146c-6a8e-443b-bfc2-317f61305678": {"__data__": {"id_": "502b146c-6a8e-443b-bfc2-317f61305678", "embedding": null, "metadata": {"page_label": "3", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e95ed92-630a-4a37-a537-96f0770aa1c8", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "d344192a334af9b87774ccb5d6418de733f96422330a332a8738ad00f59f761c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f194cb50-835a-416e-a27e-e5ff4b70f450", "node_type": "1", "metadata": {"page_label": "3", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "6efb6433b6593c27297c24c050eee07d0ba2207026dc8334abb84b0863dbec07", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b306cbed-521f-47bf-961a-1a4a174db777", "node_type": "1", "metadata": {}, "hash": "fb810e8691a7561c0818a32e734656b5c558e36624cb3484cae8f0d1825f4fa1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "In unsupervised feature learning, features are learned with unlabelled input data. Examples include dictionary learning, independent component analysis, autoencoders, matrix\nfactorisation[64] and various forms of clustering.[65][66][67]\nManifold learning algorithms attempt to do so under the constraint that the learned representation is low-dimensional. Sparse coding algorithms attempt to do so under the constraint that the learned\nrepresentation is sparse, meaning that the mathematical model has many zeros. Multilinear subspace learning algorithms aim to learn low-dimensional representations directly from tensor representations for\nmultidimensional data, without reshaping them into higher-dimensional vectors.[68] Deep learning algorithms discover multiple levels of representation, or a hierarchy of features, with higher-level, more abstract\nfeatures defined in terms of (or generating) lower-level features. It has been argued that an intelligent machine is one that learns a representation that disentangles the underlying factors of variation that explain\nthe observed data.[69]\nFeature learning is motivated by the fact that machine learning tasks such as classification often require input that is mathematically and computationally convenient to process. However, real-world data such as\nimages, video, and sensory data has not yielded attempts to algorithmically define specific features. An alternative is to discover such features or representations through examination, without relying on explicit\nalgorithms.\nSparse dictionary learning is a feature learning method where a training example is represented as a linear combination of basis functions and assumed to be a sparse matrix. The method is strongly NP-hard and\ndifficult to solve approximately.[70] A popular heuristic method for sparse dictionary learning is the k-SVD algorithm. Sparse dictionary learning has been applied in several contexts. In classification, the problem\nis to determine the class to which a previously unseen training example belongs. For a dictionary where each class has already been built, a new training example is associated with the class that is best sparsely\nrepresented by the corresponding dictionary. Sparse dictionary learning has also been applied in image de-noising. The key idea is that a clean image patch can be sparsely represented by an image dictionary, but\nthe noise cannot.[71]\nIn data mining, anomaly detection, also known as outlier detection, is the identification of rare items, events or observations which raise suspicions by differing significantly from the majority of the data.[72]\nTypically, the anomalous items represent an issue such as bank fraud, a structural defect, medical problems or errors in a text. Anomalies are referred to as outliers, novelties, noise, deviations and exceptions.[73]\nIn particular, in the context of abuse and network intrusion detection, the interesting objects are often not rare objects, but unexpected bursts of inactivity. This pattern does not adhere to the common statistical\ndefinition of an outlier as a rare object. Many outlier detection methods (in particular, unsupervised algorithms) will fail on such data unless aggregated appropriately. Instead, a cluster analysis algorithm may be\nable to detect the micro-clusters formed by these patterns.[74]\nThree broad categories of anomaly detection techniques exist.[75] Unsupervised anomaly detection techniques detect anomalies in an unlabelled test data set under the assumption that the majority of the\ninstances in the data set are normal, by looking for instances that seem to fit the least to the remainder of the data set. Supervised anomaly detection techniques require a data set that has been labelled as\n\"normal\" and \"abnormal\" and involves training a classifier (the key difference from many other statistical classification problems is the inherently unbalanced nature of outlier detection). Semi-supervised\nanomaly detection techniques construct a model representing normal behaviour from a given normal training data set and then test the likelihood of a test instance to be generated by the model.\nRobot learning is inspired by a multitude of machine learning methods, starting from supervised learning, reinforcement learning,[76][77] and finally meta-learning (e.g. MAML).\nAssociation rule learning is a rule-based machine learning method for discovering relationships between variables in large databases. It is intended to identify strong rules discovered in databases using some\nmeasure of \"interestingness\".[78]\nRule-based machine learning is a general term for any machine learning method that identifies, learns, or evolves \"rules\" to store, manipulate or apply knowledge. The defining characteristic of a rule-based\nmachine learning algorithm is the identification and utilisation of a set of relational rules that collectively represent the knowledge captured by the system. This is in contrast to other machine learning algorithms\nthat commonly identify a singular model that can be universally applied to any instance in order to make a prediction.[79] Rule-based machine learning approaches include learning classifier systems, association\nrule learning, and artificial immune systems.", "mimetype": "text/plain", "start_char_idx": 3964, "end_char_idx": 9204, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b306cbed-521f-47bf-961a-1a4a174db777": {"__data__": {"id_": "b306cbed-521f-47bf-961a-1a4a174db777", "embedding": null, "metadata": {"page_label": "3", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e95ed92-630a-4a37-a537-96f0770aa1c8", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "d344192a334af9b87774ccb5d6418de733f96422330a332a8738ad00f59f761c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "502b146c-6a8e-443b-bfc2-317f61305678", "node_type": "1", "metadata": {"page_label": "3", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "e00a7ece1e4e12a279aeb9bce10c01ff3a105c99229329481de73395b6f93baf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Robot learning is inspired by a multitude of machine learning methods, starting from supervised learning, reinforcement learning,[76][77] and finally meta-learning (e.g. MAML).\nAssociation rule learning is a rule-based machine learning method for discovering relationships between variables in large databases. It is intended to identify strong rules discovered in databases using some\nmeasure of \"interestingness\".[78]\nRule-based machine learning is a general term for any machine learning method that identifies, learns, or evolves \"rules\" to store, manipulate or apply knowledge. The defining characteristic of a rule-based\nmachine learning algorithm is the identification and utilisation of a set of relational rules that collectively represent the knowledge captured by the system. This is in contrast to other machine learning algorithms\nthat commonly identify a singular model that can be universally applied to any instance in order to make a prediction.[79] Rule-based machine learning approaches include learning classifier systems, association\nrule learning, and artificial immune systems.\nBased on the concept of strong rules, Rakesh Agrawal, Tomasz Imieli\u0144ski and Arun Swami introduced association rules for discovering regularities between products in large-scale transaction data recorded by\npoint-of-sale (POS) systems in supermarkets.[80] For example, the rule  found in the sales data of a supermarket would indicate that if a customer buys onions and potatoes\ntogether, they are likely to also buy hamburger meat. Such information can be used as the basis for decisions about marketing activities such as promotional pricing or product placements. In addition to market\nbasket analysis, association rules are employed today in application areas including Web usage mining, intrusion detection, continuous production, and bioinformatics. In contrast with sequence mining,\nassociation rule learning typically does not consider the order of items either within a transaction or across transactions.\nLearning classifier systems (LCS) are a family of rule-based machine learning algorithms that combine a discovery component, typically a genetic algorithm, with a learning component, performing either\nsupervised learning, reinforcement learning, or unsupervised learning. They seek to identify a set of context-dependent rules that collectively store and apply knowledge in a piecewise manner in order to make\npredictions.[81]\nInductive logic programming (ILP) is an approach to rule learning using logic programming as a uniform representation for input examples, background knowledge, and hypotheses. Given an encoding of the\nknown background knowledge and a set of examples represented as a logical database of facts, an ILP system will derive a hypothesized logic program that entails all positive and no negative examples. Inductive\nprogramming is a related field that considers any kind of programming language for representing hypotheses (and not only logic programming), such as functional programs.\nInductive logic programming is particularly useful in bioinformatics and natural language processing. Gordon Plotkin and Ehud Shapiro laid the initial theoretical foundation for inductive machine learning in a\nlogical setting.[82][83][84] Shapiro built their first implementation (Model Inference System) in 1981: a Prolog program that inductively inferred logic programs from positive and negative examples.[85] The term\ninductive here refers to philosophical induction, suggesting a theory to explain observed facts, rather than mathematical induction, proving a property for all members of a well-ordered set.\nDimensionality reduction\nOther types\nSelf-learning\nFeature learning\nSparse dictionary learning\nAnomaly detection\nRobot learning\nAssociation rules\n6/7/25, 7:32 PM Machine learning - Wikipedia\nhttps://en.wikipedia.org/wiki/Machine_learning 3/11", "mimetype": "text/plain", "start_char_idx": 8104, "end_char_idx": 11982, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a20fed4a-abb3-4881-bc16-0f6614b1441e": {"__data__": {"id_": "a20fed4a-abb3-4881-bc16-0f6614b1441e", "embedding": null, "metadata": {"page_label": "4", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "48570ac2-28e7-46d6-bb94-621c1404ba9e", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "37bdb9f1d8fca96b1ce761b61c7a461b6bf425131b8b6bd58c11913ffa078d16", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e5693ca5-ea84-43df-af5e-3bd349770c92", "node_type": "1", "metadata": {}, "hash": "9d8abdb56222b2b964146d0ec33e415e2c3f31e7ebf7c407485b5bd4a5bed0be", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "An arti\ufb01cial neural network is an interconnected\ngroup of nodes, akin to the vast network of\nneurons in a brain. Here, each circular node\nrepresents an arti\ufb01cial neuron and an arrow\nrepresents a connection from the output of one\narti\ufb01cial neuron to the input of another.\nA decision tree showing survival\nprobability of passengers on the Titanic\nIllustration of linear regression on a data set\nA simple Bayesian network. Rain\nin\ufb02uences whether the sprinkler is\nactivated, and both rain and the sprinkler\nin\ufb02uence whether the grass is wet.\nAn example of Gaussian Process\nRegression (prediction) compared with\nother regression models[ 9 4 ] \nA machine learning model is a type of mathematical model that, once \"trained\" on a given dataset, can be used to make predictions or classifications on new data. During training, a learning algorithm\niteratively adjusts the model's internal parameters to minimise errors in its predictions.[86] By extension, the term \"model\" can refer to several levels of specificity, from a general class of models and their\nassociated learning algorithms to a fully trained model with all its internal parameters tuned.[87]\nVarious types of models have been used and researched for machine learning systems, picking the best model for a task is called model selection.\nArtificial neural networks (ANNs), or connectionist systems, are computing systems vaguely inspired by the biological neural networks that constitute animal brains.\nSuch systems \"learn\" to perform tasks by considering examples, generally without being programmed with any task-specific rules.\nAn ANN is a model based on a collection of connected units or nodes called \"artificial neurons\", which loosely model the neurons in a biological brain. Each\nconnection, like the synapses in a biological brain, can transmit information, a \"signal\", from one artificial neuron to another. An artificial neuron that receives a\nsignal can process it and then signal additional artificial neurons connected to it. In common ANN implementations, the signal at a connection between artificial\nneurons is a real number, and the output of each artificial neuron is computed by some non-linear function of the sum of its inputs. The connections between\nartificial neurons are called \"edges\". Artificial neurons and edges typically have a weight that adjusts as learning proceeds. The weight increases or decreases the\nstrength of the signal at a connection. Artificial neurons may have a threshold such that the signal is only sent if the aggregate signal crosses that threshold.\nTypically, artificial neurons are aggregated into layers. Different layers may perform different kinds of transformations on their inputs. Signals travel from the first\nlayer (the input layer) to the last layer (the output layer), possibly after traversing the layers multiple times.\nThe original goal of the ANN approach was to solve problems in the same way that a human brain would. However, over time, attention moved to performing\nspecific tasks, leading to deviations from biology. Artificial neural networks have been used on a variety of tasks, including computer vision, speech recognition,\nmachine translation, social network filtering, playing board and video games and medical diagnosis.\nDeep learning consists of multiple hidden layers in an artificial neural network. This approach tries to model the way the human brain processes light and sound into\nvision and hearing. Some successful applications of deep learning are computer vision and speech recognition.[88]\nDecision tree learning uses a decision tree as a predictive model to go from observations about an item (represented in the branches) to conclusions about the item's\ntarget value (represented in the leaves). It is one of the predictive modelling approaches used in statistics, data mining, and machine learning. Tree models where the\ntarget variable can take a discrete set of values are called classification trees; in these tree structures, leaves represent class labels, and branches represent\nconjunctions of features that lead to those class labels. Decision trees where the target variable can take continuous values (typically real numbers) are called\nregression trees. In decision analysis, a decision tree can be used to visually and explicitly represent decisions and decision making. In data mining, a decision tree describes\ndata, but the resulting classification tree can be an input for decision-making.\nRandom forest regression (RFR) falls under umbrella of decision tree-based models. RFR is an ensemble learning method that builds multiple decision trees and averages\ntheir predictions to improve accuracy and to avoid overfitting. \u00a0To build decision trees, RFR uses bootstrapped sampling, for instance each decision tree is trained on\nrandom data of from training set. This random selection of RFR for training enables model to reduce bias predictions and achieve accuracy.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4929, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e5693ca5-ea84-43df-af5e-3bd349770c92": {"__data__": {"id_": "e5693ca5-ea84-43df-af5e-3bd349770c92", "embedding": null, "metadata": {"page_label": "4", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "48570ac2-28e7-46d6-bb94-621c1404ba9e", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "37bdb9f1d8fca96b1ce761b61c7a461b6bf425131b8b6bd58c11913ffa078d16", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a20fed4a-abb3-4881-bc16-0f6614b1441e", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "abea9d298400c1d529f5825c0e0ddee07c368d435c7668a82bd1340c28bf38b3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "be7ad5d9-778a-4796-9a0e-11749847b9bb", "node_type": "1", "metadata": {}, "hash": "5889d485c4bf27b58cd82341ad072d7af80f4c37960b5b572482631a5e5d8407", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Decision trees where the target variable can take continuous values (typically real numbers) are called\nregression trees. In decision analysis, a decision tree can be used to visually and explicitly represent decisions and decision making. In data mining, a decision tree describes\ndata, but the resulting classification tree can be an input for decision-making.\nRandom forest regression (RFR) falls under umbrella of decision tree-based models. RFR is an ensemble learning method that builds multiple decision trees and averages\ntheir predictions to improve accuracy and to avoid overfitting. \u00a0To build decision trees, RFR uses bootstrapped sampling, for instance each decision tree is trained on\nrandom data of from training set. This random selection of RFR for training enables model to reduce bias predictions and achieve accuracy. RFR generates independent\ndecision trees, and it can work on single output data as well multiple regressor task. This makes RFR compatible to be used in various application.[89][90]\nSupport-vector machines (SVMs), also known as support-vector networks, are a set of related supervised learning methods used for classification and regression. Given a\nset of training examples, each marked as belonging to one of two categories, an SVM training algorithm builds a model that predicts whether a new example falls into one\ncategory.[91] An SVM training algorithm is a non-probabilistic, binary, linear classifier, although methods such as Platt scaling exist to use SVM in a probabilistic\nclassification setting. In addition to performing linear classification, SVMs can efficiently perform a non-linear classification using what is called the kernel trick, implicitly\nmapping their inputs into high-dimensional feature spaces.\nRegression analysis encompasses a large variety of statistical methods to estimate the relationship between input variables and their associated features. Its\nmost common form is linear regression, where a single line is drawn to best fit the given data according to a mathematical criterion such as ordinary least\nsquares. The latter is often extended by regularisation methods to mitigate overfitting and bias, as in ridge regression. When dealing with non-linear problems,\ngo-to models include polynomial regression (for example, used for trendline fitting in Microsoft Excel[92]), logistic regression (often used in statistical\nclassification) or even kernel regression, which introduces non-linearity by taking advantage of the kernel trick to implicitly map input variables to higher-\ndimensional space.\nMultivariate linear regression extends the concept of linear regression to handle multiple dependent variables simultaneously. This approach estimates the\nrelationships between a set of input variables and several output variables by fitting a multidimensional linear model. It is particularly useful in scenarios where\noutputs are interdependent or share underlying patterns, such as predicting multiple economic indicators or reconstructing images,[93] which are inherently\nmulti-dimensional.\nA Bayesian network, belief network, or directed acyclic graphical model is a probabilistic graphical model that represents a set of random variables and their conditional\nindependence with a directed acyclic graph (DAG). For example, a Bayesian network could represent the probabilistic relationships between diseases and symptoms. Given\nsymptoms, the network can be used to compute the probabilities of the presence of various diseases. Efficient algorithms exist that perform inference and learning.\nBayesian networks that model sequences of variables, like speech signals or protein sequences, are called dynamic Bayesian networks. Generalisations of Bayesian networks\nthat can represent and solve decision problems under uncertainty are called influence diagrams.\nA Gaussian process is a stochastic process in which every finite collection of the random variables in the process has a multivariate normal distribution, and it relies on a\npre-defined covariance function, or kernel, that models how pairs of points relate to each other depending on their locations.\nGiven a set of observed points, or input\u2013output examples, the distribution of the (unobserved) output of a new point as function of its input data can be directly computed\nby looking like the observed points and the covariances between those points and the new, unobserved point.\nGaussian processes are popular surrogate models in Bayesian optimisation used to do hyperparameter optimisation.\nA genetic algorithm (GA) is a search algorithm and heuristic technique that mimics the process of natural selection, using methods such as mutation and crossover to\ngenerate new genotypes in the hope of finding good solutions to a given problem. In machine learning, genetic algorithms were used in the 1980s and 1990s.[95][96]\nConversely, machine learning techniques have been used to improve the performance of genetic and evolutionary algorithms.[97]\nThe theory of belief functions, also referred to as evidence theory or Dempster\u2013Shafer theory, is a general framework for reasoning with uncertainty, with understood connections to other frameworks such as\nprobability, possibility and imprecise probability theories.", "mimetype": "text/plain", "start_char_idx": 4093, "end_char_idx": 9341, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "be7ad5d9-778a-4796-9a0e-11749847b9bb": {"__data__": {"id_": "be7ad5d9-778a-4796-9a0e-11749847b9bb", "embedding": null, "metadata": {"page_label": "4", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "48570ac2-28e7-46d6-bb94-621c1404ba9e", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "37bdb9f1d8fca96b1ce761b61c7a461b6bf425131b8b6bd58c11913ffa078d16", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e5693ca5-ea84-43df-af5e-3bd349770c92", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "eba452eec7e83856c4e9d1f2cd89aac107c1b4c453778cbf9e3a6902fff8ff29", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Gaussian processes are popular surrogate models in Bayesian optimisation used to do hyperparameter optimisation.\nA genetic algorithm (GA) is a search algorithm and heuristic technique that mimics the process of natural selection, using methods such as mutation and crossover to\ngenerate new genotypes in the hope of finding good solutions to a given problem. In machine learning, genetic algorithms were used in the 1980s and 1990s.[95][96]\nConversely, machine learning techniques have been used to improve the performance of genetic and evolutionary algorithms.[97]\nThe theory of belief functions, also referred to as evidence theory or Dempster\u2013Shafer theory, is a general framework for reasoning with uncertainty, with understood connections to other frameworks such as\nprobability, possibility and imprecise probability theories. These theoretical frameworks can be thought of as a kind of learner and have some analogous properties of how evidence is combined (e.g., Dempster's\nrule of combination), just like how in a pmf-based Bayesian approach would combine probabilities.[98] However, there are many caveats to these beliefs functions when compared to Bayesian approaches in order\nto incorporate ignorance and uncertainty quantification. These belief function approaches that are implemented within the machine learning domain typically leverage a fusion approach of various ensemble\nmethods to better handle the learner's decision boundary, low samples, and ambiguous class issues that standard machine learning approach tend to have difficulty resolving.[4][9] However, the computational\ncomplexity of these algorithms are dependent on the number of propositions (classes), and can lead to a much higher computation time when compared to other machine learning approaches.\nModels\nArti\ufb01cial neural networks\nDecision trees\nRandom forest regression\nSupport-vector machines\nRegression analysis\nBayesian networks\nGaussian processes\nGenetic algorithms\nBelief functions\n6/7/25, 7:32 PM Machine learning - Wikipedia\nhttps://en.wikipedia.org/wiki/Machine_learning 4/11", "mimetype": "text/plain", "start_char_idx": 8508, "end_char_idx": 10578, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "053d4dbb-1ed6-4aee-b9c4-c196c23a61d0": {"__data__": {"id_": "053d4dbb-1ed6-4aee-b9c4-c196c23a61d0", "embedding": null, "metadata": {"page_label": "5", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7fbd543c-eb29-42c8-b20f-e47b04f24818", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "f9a849881c8de14ba17c1cf43fbe156c896163979796b243a218aaa8061381ea", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9163d41e-7fc2-4333-b994-63f0a5c9a6b7", "node_type": "1", "metadata": {}, "hash": "86018e94a1aff7284babc865c49c09d75550e56ce97757affd8c52b23cc41b37", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The blue line could be an example of\nover\ufb01tting a linear function due to random\nnoise.\nRule-based machine learning (RBML) is a branch of machine learning that automatically discovers and learns 'rules' from data. It provides interpretable models, making it useful for decision-making in fields like\nhealthcare, fraud detection, and cybersecurity. Key RBML techniques includes learning classifier systems,[99] association rule learning,[100] artificial immune systems,[101] and other similar models. These\nmethods extract patterns from data and evolve rules over time.\nTypically, machine learning models require a high quantity of reliable data to perform accurate predictions. When training a machine learning model, machine learning engineers need to target and collect a large\nand representative sample of data. Data from the training set can be as varied as a corpus of text, a collection of images, sensor data, and data collected from individual users of a service. Overfitting is something\nto watch out for when training a machine learning model. Trained models derived from biased or non-evaluated data can result in skewed or undesired predictions. Biased models may result in detrimental\noutcomes, thereby furthering the negative impacts on society or objectives. Algorithmic bias is a potential result of data not being fully prepared for training. Machine learning ethics is becoming a field of study\nand notably, becoming integrated within machine learning engineering teams.\nFederated learning is an adapted form of distributed artificial intelligence to training machine learning models that decentralises the training process, allowing for users' privacy to be maintained by not needing to\nsend their data to a centralised server. This also increases efficiency by decentralising the training process to many devices. For example, Gboard uses federated machine learning to train search query prediction\nmodels on users' mobile phones without having to send individual searches back to Google.[102]\nThere are many applications for machine learning, including:\nAgriculture\nAnatomy\nAdaptive website\nAffective computing\nAstronomy\nAutomated decision-making\nBanking\nBehaviorism\nBioinformatics\nBrain\u2013machine interfaces\nCheminformatics\nCitizen Science\nClimate Science\nComputer networks\nComputer vision\nCredit-card fraud detection\nData quality\nDNA sequence classi\ufb01cation\nEconomics\nFinancial market analysis[103]\nGeneral game playing\nHandwriting recognition\nHealthcare\nInformation retrieval\nInsurance\nInternet fraud detection\nKnowledge graph embedding\nLinguistics\nMachine learning control\nMachine perception\nMachine translation\nMaterial Engineering\nMarketing\nMedical diagnosis\nNatural language processing\nNatural language understanding\nOnline advertising\nOptimisation\nRecommender systems\nRobot locomotion\nSearch engines\nSentiment analysis\nSequence mining\nSoftware engineering\nSpeech recognition\nStructural health monitoring\nSyntactic pattern recognition\nTelecommunications\nTheorem proving\nTime-series forecasting\nTomographic reconstruction[104]\nUser behaviour analytics\nIn 2006, the media-services provider Netflix held the first \"Netflix Prize\" competition to find a program to better predict user preferences and improve the accuracy of its existing Cinematch movie\nrecommendation algorithm by at least 10%. A joint team made up of researchers from AT&T Labs-Research in collaboration with the teams Big Chaos and Pragmatic Theory built an ensemble model to win the\nGrand Prize in 2009 for $1 million.[105] Shortly after the prize was awarded, Netflix realised that viewers' ratings were not the best indicators of their viewing patterns (\"everything is a recommendation\") and they\nchanged their recommendation engine accordingly.[106] In 2010 The Wall Street Journal wrote about the firm Rebellion Research and their use of machine learning to predict the financial crisis.[107] In 2012, co-\nfounder of Sun Microsystems, Vinod Khosla, predicted that 80% of medical doctors jobs would be lost in the next two decades to automated machine learning medical diagnostic software.[108] In 2014, it was\nreported that a machine learning algorithm had been applied in the field of art history to study fine art paintings and that it may have revealed previously unrecognised influences among artists.[109] In 2019\nSpringer Nature published the first research book created using machine learning.[110] In 2020, machine learning technology was used to help make diagnoses and aid researchers in developing a cure for COVID-\n19.[111] Machine learning was recently applied to predict the pro-environmental behaviour of travellers.[112] Recently, machine learning technology was also applied to optimise smartphone's performance and\nthermal behaviour based on the user's interaction with the phone.[113][114][115] When applied correctly, machine learning algorithms (MLAs) can utilise a wide range of company characteristics to predict stock\nreturns without overfitting.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4964, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9163d41e-7fc2-4333-b994-63f0a5c9a6b7": {"__data__": {"id_": "9163d41e-7fc2-4333-b994-63f0a5c9a6b7", "embedding": null, "metadata": {"page_label": "5", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7fbd543c-eb29-42c8-b20f-e47b04f24818", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "f9a849881c8de14ba17c1cf43fbe156c896163979796b243a218aaa8061381ea", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "053d4dbb-1ed6-4aee-b9c4-c196c23a61d0", "node_type": "1", "metadata": {"page_label": "5", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "ac16c41430d93a99259e1cbd91c8ca9f0d378917de0b312ab3d2d85ba92bcd97", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1c8589cd-90cb-4399-8fc3-d50226aa9298", "node_type": "1", "metadata": {}, "hash": "64d8657cfa3c33ba4ff20d8efb1ea82c500704f4fe000715472468fbe9796656", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "[108] In 2014, it was\nreported that a machine learning algorithm had been applied in the field of art history to study fine art paintings and that it may have revealed previously unrecognised influences among artists.[109] In 2019\nSpringer Nature published the first research book created using machine learning.[110] In 2020, machine learning technology was used to help make diagnoses and aid researchers in developing a cure for COVID-\n19.[111] Machine learning was recently applied to predict the pro-environmental behaviour of travellers.[112] Recently, machine learning technology was also applied to optimise smartphone's performance and\nthermal behaviour based on the user's interaction with the phone.[113][114][115] When applied correctly, machine learning algorithms (MLAs) can utilise a wide range of company characteristics to predict stock\nreturns without overfitting. By employing effective feature engineering and combining forecasts, MLAs can generate results that far surpass those obtained from basic linear techniques like OLS.[116]\nRecent advancements in machine learning have extended into the field of quantum chemistry, where novel algorithms now enable the prediction of solvent effects on chemical reactions, thereby offering new tools\nfor chemists to tailor experimental conditions for optimal outcomes.[117]\nMachine Learning is becoming a useful tool to investigate and predict evacuation decision making in large scale and small scale disasters. Different solutions have been tested to predict if and when householders\ndecide to evacuate during wildfires and hurricanes.[118][119][120] Other applications have been focusing on pre evacuation decisions in building fires.[121][122]\nMachine learning is also emerging as a promising tool in geotechnical engineering, where it is used to support tasks such as ground classification, hazard prediction, and site characterization. Recent research\nemphasizes a move toward data-centric methods in this field, where machine learning is not a replacement for engineering judgment, but a way to enhance it using site-specific data and patterns.[123]\nAlthough machine learning has been transformative in some fields, machine-learning programs often fail to deliver expected results.[124][125][126] Reasons for this are numerous: lack of (suitable) data, lack of\naccess to the data, data bias, privacy problems, badly chosen tasks and algorithms, wrong tools and people, lack of resources, and evaluation problems.[127]\nThe \"black box theory\" poses another yet significant challenge. Black box refers to a situation where the algorithm or the process of producing an output is entirely opaque, meaning that even the coders of the\nalgorithm cannot audit the pattern that the machine extracted out of the data.[128] The House of Lords Select Committee, which claimed that such an \"intelligence system\" that could have a \"substantial impact on\nan individual's life\" would not be considered acceptable unless it provided \"a full and satisfactory explanation for the decisions\" it makes.[128]\nIn 2018, a self-driving car from Uber failed to detect a pedestrian, who was killed after a collision.[129] Attempts to use machine learning in healthcare with the IBM Watson system failed to deliver even after years\nof time and billions of dollars invested.[130][131] Microsoft's Bing Chat chatbot has been reported to produce hostile and offensive response against its users.[132]\nMachine learning has been used as a strategy to update the evidence related to a systematic review and increased reviewer burden related to the growth of biomedical literature. While it has improved with\ntraining sets, it has not yet developed sufficiently to reduce the workload burden without limiting the necessary sensitivity for the findings research themselves.[133]\nExplainable AI (XAI), or Interpretable AI, or Explainable Machine Learning (XML), is artificial intelligence (AI) in which humans can understand the decisions or predictions made by the AI.[134] It contrasts with\nthe \"black box\" concept in machine learning where even its designers cannot explain why an AI arrived at a specific decision.[135] By refining the mental models of users of AI-powered systems and dismantling\ntheir misconceptions, XAI promises to help users perform more effectively. XAI may be an implementation of the social right to explanation.\nSettling on a bad, overly complex theory gerrymandered to fit all the past training data is known as overfitting. Many systems attempt to reduce overfitting by rewarding a\ntheory in accordance with how well it fits the data but penalising the theory in accordance with how complex the theory is.[136]\nLearners can also disappoint by \"learning the wrong lesson\". A toy example is that an image classifier trained only on pictures of brown horses and black cats might\nconclude that all brown patches are likely to be horses.", "mimetype": "text/plain", "start_char_idx": 4082, "end_char_idx": 8976, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1c8589cd-90cb-4399-8fc3-d50226aa9298": {"__data__": {"id_": "1c8589cd-90cb-4399-8fc3-d50226aa9298", "embedding": null, "metadata": {"page_label": "5", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7fbd543c-eb29-42c8-b20f-e47b04f24818", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "f9a849881c8de14ba17c1cf43fbe156c896163979796b243a218aaa8061381ea", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9163d41e-7fc2-4333-b994-63f0a5c9a6b7", "node_type": "1", "metadata": {"page_label": "5", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "35c94dedd7b50857322e878b006785688c4b9acc828d31e0bdfc0fb852406973", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "[134] It contrasts with\nthe \"black box\" concept in machine learning where even its designers cannot explain why an AI arrived at a specific decision.[135] By refining the mental models of users of AI-powered systems and dismantling\ntheir misconceptions, XAI promises to help users perform more effectively. XAI may be an implementation of the social right to explanation.\nSettling on a bad, overly complex theory gerrymandered to fit all the past training data is known as overfitting. Many systems attempt to reduce overfitting by rewarding a\ntheory in accordance with how well it fits the data but penalising the theory in accordance with how complex the theory is.[136]\nLearners can also disappoint by \"learning the wrong lesson\". A toy example is that an image classifier trained only on pictures of brown horses and black cats might\nconclude that all brown patches are likely to be horses.[137] A real-world example is that, unlike humans, current image classifiers often do not primarily make judgements\nfrom the spatial relationship between components of the picture, and they learn relationships between pixels that humans are oblivious to, but that still correlate with\nimages of certain types of real objects. Modifying these patterns on a legitimate image can result in \"adversarial\" images that the system misclassifies.[138][139]\nAdversarial vulnerabilities can also result in nonlinear systems, or from non-pattern perturbations. For some systems, it is possible to change the output by only changing a\nsingle adversarially chosen pixel.[140] Machine learning models are often vulnerable to manipulation or evasion via adversarial machine learning.[141]\nResearchers have demonstrated how backdoors can be placed undetectably into classifying (e.g., for categories \"spam\" and well-visible \"not spam\" of posts) machine learning models that are often developed or\ntrained by third parties. Parties can change the classification of any input, including in cases for which a type of data/software transparency is provided, possibly including white-box access.[142][143][144]\nClassification of machine learning models can be validated by accuracy estimation techniques like the holdout method, which splits the data in a training and test set (conventionally 2/3 training set and 1/3 test\nset designation) and evaluates the performance of the training model on the test set. In comparison, the K-fold-cross-validation method randomly partitions the data into K subsets and then K experiments are\nperformed each respectively considering 1 subset for evaluation and the remaining K-1 subsets for training the model. In addition to the holdout and cross-validation methods, bootstrap, which samples n\nRule-based models\nTraining models\nFederated learning\nApplications\nLimitations\nExplainability\nOver\ufb01tting\nOther limitations and vulnerabilities\nModel assessments\n6/7/25, 7:32 PM Machine learning - Wikipedia\nhttps://en.wikipedia.org/wiki/Machine_learning 5/11", "mimetype": "text/plain", "start_char_idx": 8082, "end_char_idx": 11044, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ac56c108-ed41-4604-938e-02031465039a": {"__data__": {"id_": "ac56c108-ed41-4604-938e-02031465039a", "embedding": null, "metadata": {"page_label": "6", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b98f6cd6-73e2-4a92-9eef-7628dc6db29f", "node_type": "4", "metadata": {"page_label": "6", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "d032eaf7739b62c3d8146c207d157781823eec4ee5416272dab282c5dab76c72", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fdfeadfe-36a3-4866-9e3a-3e637eb9581e", "node_type": "1", "metadata": {}, "hash": "de10bd956db0e3f8cac0153ded766451a82720ed6f102a473a740853658a5191", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "instances with replacement from the dataset, can be used to assess model accuracy.[145]\nIn addition to overall accuracy, investigators frequently report sensitivity and specificity meaning true positive rate (TPR) and true negative rate (TNR) respectively. Similarly, investigators sometimes report the\nfalse positive rate (FPR) as well as the false negative rate (FNR). However, these rates are ratios that fail to reveal their numerators and denominators. Receiver operating characteristic (ROC) along with the\naccompanying Area Under the ROC Curve (AUC) offer additional tools for classification model assessment. Higher AUC is associated with a better performing model.[146]\nThe ethics of artificial intelligence covers a broad range of topics within AI that are considered to have particular ethical stakes.[147] This includes algorithmic biases, fairness,[148] automated decision-making,[149]\naccountability, privacy, and regulation. It also covers various emerging or potential future challenges such as machine ethics (how to make machines that behave ethically), lethal autonomous weapon systems,\narms race dynamics, AI safety and alignment, technological unemployment, AI-enabled misinformation, how to treat certain AI systems if they have a moral status (AI welfare and rights), artificial\nsuperintelligence and existential risks.[147]\nSome application areas may also have particularly important ethical implications, like healthcare, education, criminal justice, or the military.\nDifferent machine learning approaches can suffer from different data biases. A machine learning system trained specifically on current customers may not be able to predict the needs of new customer groups that\nare not represented in the training data. When trained on human-made data, machine learning is likely to pick up the constitutional and unconscious biases already present in society.[150]\nSystems that are trained on datasets collected with biases may exhibit these biases upon use (algorithmic bias), thus digitising cultural prejudices.[151] For example, in 1988, the UK's Commission for Racial\nEquality found that St. George's Medical School had been using a computer program trained from data of previous admissions staff and that this program had denied nearly 60 candidates who were found to\neither be women or have non-European sounding names.[150] Using job hiring data from a firm with racist hiring policies may lead to a machine learning system duplicating the bias by scoring job applicants by\nsimilarity to previous successful applicants.[152][153] Another example includes predictive policing company Geolitica's predictive algorithm that resulted in \"disproportionately high levels of over-policing in low-\nincome and minority communities\" after being trained with historical crime data.[154]\nWhile responsible collection of data and documentation of algorithmic rules used by a system is considered a critical part of machine learning, some researchers blame lack of participation and representation of\nminority population in the field of AI for machine learning's vulnerability to biases.[155] In fact, according to research carried out by the Computing Research Association (CRA) in 2021, \"female faculty merely\nmake up 16.1%\" of all faculty members who focus on AI among several universities around the world.[156] Furthermore, among the group of \"new U.S. resident AI PhD graduates,\" 45% identified as white, 22.4%\nas Asian, 3.2% as Hispanic, and 2.4% as African American, which further demonstrates a lack of diversity in the field of AI.[156]\nLanguage models learned from data have been shown to contain human-like biases.[157][158] Because human languages contain biases, machines trained on language corpora will necessarily also learn these\nbiases.[159][160] In 2016, Microsoft tested Tay, a chatbot that learned from Twitter, and it quickly picked up racist and sexist language.[161]\nIn an experiment carried out by ProPublica, an investigative journalism organisation, a machine learning algorithm's insight into the recidivism rates among prisoners falsely flagged \"black defendants high risk\ntwice as often as white defendants\".[154] In 2015, Google Photos once tagged a couple of black people as gorillas, which caused controversy. The gorilla label was subsequently removed, and in 2023, it still cannot\nrecognise gorillas.[162] Similar issues with recognising non-white people have been found in many other systems.[163]\nBecause of such challenges, the effective use of machine learning may take longer to be adopted in other domains.[164] Concern for fairness in machine learning, that is, reducing bias in machine learning and\npropelling its use for human good, is increasingly expressed by artificial intelligence scientists, including Fei-Fei Li, who said that \"[t]here's nothing artificial about AI.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4838, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fdfeadfe-36a3-4866-9e3a-3e637eb9581e": {"__data__": {"id_": "fdfeadfe-36a3-4866-9e3a-3e637eb9581e", "embedding": null, "metadata": {"page_label": "6", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b98f6cd6-73e2-4a92-9eef-7628dc6db29f", "node_type": "4", "metadata": {"page_label": "6", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "d032eaf7739b62c3d8146c207d157781823eec4ee5416272dab282c5dab76c72", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ac56c108-ed41-4604-938e-02031465039a", "node_type": "1", "metadata": {"page_label": "6", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "99b316b5c01ba41d8abdb0297b469ad094b5f30bdf8a2984cf9c4d39837b06d2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fd51950b-2579-4ce7-a6fa-3617f8943582", "node_type": "1", "metadata": {}, "hash": "aa9af7bc7eb85e4efd34200eb084779a3d521f9faa2722643c2e3791097123be", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "[161]\nIn an experiment carried out by ProPublica, an investigative journalism organisation, a machine learning algorithm's insight into the recidivism rates among prisoners falsely flagged \"black defendants high risk\ntwice as often as white defendants\".[154] In 2015, Google Photos once tagged a couple of black people as gorillas, which caused controversy. The gorilla label was subsequently removed, and in 2023, it still cannot\nrecognise gorillas.[162] Similar issues with recognising non-white people have been found in many other systems.[163]\nBecause of such challenges, the effective use of machine learning may take longer to be adopted in other domains.[164] Concern for fairness in machine learning, that is, reducing bias in machine learning and\npropelling its use for human good, is increasingly expressed by artificial intelligence scientists, including Fei-Fei Li, who said that \"[t]here's nothing artificial about AI. It's inspired by people, it's created by people,\nand\u2014most importantly\u2014it impacts people. It is a powerful tool we are only just beginning to understand, and that is a profound responsibility.\"[165]\nThere are concerns among health care professionals that these systems might not be designed in the public's interest but as income-generating machines. This is especially true in the United States where there is a\nlong-standing ethical dilemma of improving health care, but also increasing profits. For example, the algorithms could be designed to provide patients with unnecessary tests or medication in which the\nalgorithm's proprietary owners hold stakes. There is potential for machine learning in health care to provide professionals an additional tool to diagnose, medicate, and plan recovery paths for patients, but this\nrequires these biases to be mitigated.[166]\nSince the 2010s, advances in both machine learning algorithms and computer hardware have led to more efficient methods for training deep neural networks (a particular narrow subdomain of machine learning)\nthat contain many layers of nonlinear hidden units.[167] By 2019, graphics processing units (GPUs), often with AI-specific enhancements, had displaced CPUs as the dominant method of training large-scale\ncommercial cloud AI.[168] OpenAI estimated the hardware compute used in the largest deep learning projects from AlexNet (2012) to AlphaZero (2017), and found a 300,000-fold increase in the amount of\ncompute required, with a doubling-time trendline of 3.4 months.[169][170]\nTensor Processing Units (TPUs) are specialised hardware accelerators developed by Google specifically for machine learning workloads. Unlike general-purpose GPUs and FPGAs, TPUs are optimised for tensor\ncomputations, making them particularly efficient for deep learning tasks such as training and inference. They are widely used in Google Cloud AI services and large-scale machine learning models like Google's\nDeepMind AlphaFold and large language models. TPUs leverage matrix multiplication units and high-bandwidth memory to accelerate computations while maintaining energy efficiency.[171] Since their\nintroduction in 2016, TPUs have become a key component of AI infrastructure, especially in cloud-based environments.\nNeuromorphic computing refers to a class of computing systems designed to emulate the structure and functionality of biological neural networks. These systems may be implemented through software-based\nsimulations on conventional hardware or through specialised hardware architectures.[172]\nA physical neural network is a specific type of neuromorphic hardware that relies on electrically adjustable materials, such as memristors, to emulate the function of neural synapses. The term \"physical neural\nnetwork\" highlights the use of physical hardware for computation, as opposed to software-based implementations. It broadly refers to artificial neural networks that use materials with adjustable resistance to\nreplicate neural synapses.[173][174]\nEmbedded machine learning is a sub-field of machine learning where models are deployed on embedded systems with limited computing resources, such as wearable computers, edge devices and\nmicrocontrollers.[175][176][177][178] Running models directly on these devices eliminates the need to transfer and store data on cloud servers for further processing, thereby reducing the risk of data breaches,\nprivacy leaks and theft of intellectual property, personal data and business secrets. Embedded machine learning can be achieved through various techniques, such as hardware acceleration,[179][180] approximate\ncomputing,[181] and model optimisation.[182][183] Common optimisation techniques include pruning, quantisation, knowledge distillation, low-rank factorisation, network architecture search, and parameter\nsharing.", "mimetype": "text/plain", "start_char_idx": 3906, "end_char_idx": 8676, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fd51950b-2579-4ce7-a6fa-3617f8943582": {"__data__": {"id_": "fd51950b-2579-4ce7-a6fa-3617f8943582", "embedding": null, "metadata": {"page_label": "6", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b98f6cd6-73e2-4a92-9eef-7628dc6db29f", "node_type": "4", "metadata": {"page_label": "6", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "d032eaf7739b62c3d8146c207d157781823eec4ee5416272dab282c5dab76c72", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fdfeadfe-36a3-4866-9e3a-3e637eb9581e", "node_type": "1", "metadata": {"page_label": "6", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "f976ba452889768cce5ba0013f0375cf7c8f416baceb987ae96e03737f32fe01", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "It broadly refers to artificial neural networks that use materials with adjustable resistance to\nreplicate neural synapses.[173][174]\nEmbedded machine learning is a sub-field of machine learning where models are deployed on embedded systems with limited computing resources, such as wearable computers, edge devices and\nmicrocontrollers.[175][176][177][178] Running models directly on these devices eliminates the need to transfer and store data on cloud servers for further processing, thereby reducing the risk of data breaches,\nprivacy leaks and theft of intellectual property, personal data and business secrets. Embedded machine learning can be achieved through various techniques, such as hardware acceleration,[179][180] approximate\ncomputing,[181] and model optimisation.[182][183] Common optimisation techniques include pruning, quantisation, knowledge distillation, low-rank factorisation, network architecture search, and parameter\nsharing.\nSoftware suites containing a variety of machine learning algorithms include the following:\nCaffe\nDeeplearning4j\nDeepSpeed\nELKI\nGoogle JAX\nInfer.NET\nKeras\nKube\ufb02ow\nLightGBM\nMahout\nMallet\nMicrosoft Cognitive Toolkit\nML.NET\nmlpack\nMXNet\nOpenNN\nOrange\npandas (software)\nROOT (TMVA with ROOT)\nscikit-learn\nShogun\nSpark MLlib\nSystemML\nTensorFlow\nTorch / PyTorch\nWeka / MOA\nXGBoost\nYooreeka\nKNIME\nRapidMiner\nEthics\nBias\nFinancial incentives\nHardware\nTensor Processing Units (TPUs)\nNeuromorphic computing\nphysical neural networks\nEmbedded machine learning\nSoftware\nFree and open-source software\nProprietary software with free and open-source editions\n6/7/25, 7:32 PM Machine learning - Wikipedia\nhttps://en.wikipedia.org/wiki/Machine_learning 6/11", "mimetype": "text/plain", "start_char_idx": 7725, "end_char_idx": 9415, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "36f43a16-b07f-428d-be77-6dc49edd54a6": {"__data__": {"id_": "36f43a16-b07f-428d-be77-6dc49edd54a6", "embedding": null, "metadata": {"page_label": "7", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "efc59103-b568-4d8b-b9ac-e1c672c99c50", "node_type": "4", "metadata": {"page_label": "7", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "ec1c533652981a49669d172de0e50b0d5742bb51530b94ff6bc6316e529f4812", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "acf6f18e-ad5c-468e-9c45-a2e854ea95e0", "node_type": "1", "metadata": {}, "hash": "1904620908463174de402b69238b84c0783da8576e06afece2ede7faf8deb956", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Amazon Machine Learning\nAngoss KnowledgeSTUDIO\nAzure Machine Learning\nIBM Watson Studio\nGoogle Cloud Vertex AI\nGoogle Prediction API\nIBM SPSS Modeller\nKXEN Modeller\nLIONsolver\nMathematica\nMATLAB\nNeural Designer\nNeuroSolutions\nOracle Data Mining\nOracle AI Platform Cloud Service\nPolyAnalyst\nRCASE\nSAS Enterprise Miner\nSequenceL\nSplunk\nSTATISTICA Data Miner\nJournal of Machine Learning Research\nMachine Learning\nNature Machine Intelligence\nNeural Computation\nIEEE Transactions on Pattern Analysis and Machine Intelligence\nAAAI Conference on Arti\ufb01cial Intelligence\nAssociation for Computational Linguistics (ACL)\nEuropean Conference on Machine Learning and Principles and Practice of Knowledge Discovery in Databases (ECML PKDD)\nInternational Conference on Computational Intelligence Methods for Bioinformatics and Biostatistics (CIBB)\nInternational Conference on Machine Learning (ICML)\nInternational Conference on Learning Representations (ICLR)\nInternational Conference on Intelligent Robots and Systems (IROS)\nConference on Knowledge Discovery and Data Mining (KDD)\nConference on Neural Information Processing Systems (NeurIPS)\nAutomated machine learning\u00a0\u2013 Process of automating the application of machine learning\nBig data\u00a0\u2013 Extremely large or complex datasets\nDeep learning \u2014 branch of ML concerned with arti\ufb01cial neural networks\nDifferentiable programming\u00a0\u2013 Programming paradigm\nList of datasets for machine-learning research\nM-theory (learning framework)\nMachine unlearning\nSolomonoff's theory of inductive inference\u00a0\u2013 A mathematical theory\n1. The de\ufb01nition \"without being explicitly programmed\" is often\nattributed to Arthur Samuel, who coined the term \"machine\nlearning\" in 1959, but the phrase is not found verbatim in this\npublication, and may be a paraphrase that appeared later.\nConfer \"Paraphrasing Arthur Samuel (1959), the question is:\nHow can computers learn to solve problems without being\nexplicitly programmed?\" in Koza, John R.; Bennett, Forrest H.;\nAndre, David; Keane, Martin A. (1996). \"Automated Design of\nBoth the Topology and Sizing of Analog Electrical Circuits Using\nGenetic Programming\". Arti\ufb01cial Intelligence in Design '96.\nArti\ufb01cial Intelligence in Design '96. Dordrecht, Netherlands:\nSpringer Netherlands. pp.\u00a0151\u2013170. doi:10.1007/978-94-009-\n0279-4_9 (https://doi.org/10.1007%2F978-94-009-0279-4_9).\nISBN\u00a0978-94-010-6610-5.\n2. \"What is Machine Learning?\" (https://www.ibm.com/topics/machi\nne-learning). IBM. 22 September 2021. Archived (https://web.arc\nhive.org/web/20231227153910/https://www.ibm.com/topics/mach\nine-learning) from the original on 27 December 2023. Retrieved\n27 June 2023.\n3. Hu, Junyan; Niu, Hanlin; Carrasco, Joaquin; Lennox, Barry;\nArvin, Farshad (2020). \"Voronoi-Based Multi-Robot Autonomous\nExploration in Unknown Environments via Deep Reinforcement\nLearning\" (https://research.manchester.ac.uk/\ufb01les/191737243/09\n244647.pdf) (PDF). IEEE Transactions on Vehicular Technology.\n69 (12): 14413\u201314423. doi:10.1109/tvt.2020.3034800 (https://doi.\norg/10.1109%2Ftvt.2020.3034800). ISSN\u00a00018-9545 (https://sea\nrch.worldcat.org/issn/0018-9545). S2CID\u00a0228989788 (https://api.\nsemanticscholar.org/CorpusID:228989788).\n4. Yoosefzadeh-Najafabadi, Mohsen; Hugh, Earl; Tulpan, Dan;\nSulik, John; Eskandari, Milad (2021). \"Application of Machine\nLearning Algorithms in Plant Breeding: Predicting Yield From\nHyperspectral Re\ufb02ectance in Soybean?\" (https://www.ncbi.nlm.ni\nh.gov/pmc/articles/PMC7835636). Front. Plant Sci. 11: 624273.\nBibcode:2021FrPS...1124273Y (https://ui.adsabs.harvard.edu/ab\ns/2021FrPS...1124273Y).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3554, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "acf6f18e-ad5c-468e-9c45-a2e854ea95e0": {"__data__": {"id_": "acf6f18e-ad5c-468e-9c45-a2e854ea95e0", "embedding": null, "metadata": {"page_label": "7", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "efc59103-b568-4d8b-b9ac-e1c672c99c50", "node_type": "4", "metadata": {"page_label": "7", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "ec1c533652981a49669d172de0e50b0d5742bb51530b94ff6bc6316e529f4812", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "36f43a16-b07f-428d-be77-6dc49edd54a6", "node_type": "1", "metadata": {"page_label": "7", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "21e599b73817f8d51fa28ee4cb7ab9e6e128dc6a0e41e646f4f8b1988914efd7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dd7df896-0190-41e5-b23a-dc6dd0bd590d", "node_type": "1", "metadata": {}, "hash": "f29e3bb258a2a563798b7bb490eed466143587699c310e5c9b991dc757d972c9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "S2CID\u00a0228989788 (https://api.\nsemanticscholar.org/CorpusID:228989788).\n4. Yoosefzadeh-Najafabadi, Mohsen; Hugh, Earl; Tulpan, Dan;\nSulik, John; Eskandari, Milad (2021). \"Application of Machine\nLearning Algorithms in Plant Breeding: Predicting Yield From\nHyperspectral Re\ufb02ectance in Soybean?\" (https://www.ncbi.nlm.ni\nh.gov/pmc/articles/PMC7835636). Front. Plant Sci. 11: 624273.\nBibcode:2021FrPS...1124273Y (https://ui.adsabs.harvard.edu/ab\ns/2021FrPS...1124273Y). doi:10.3389/fpls.2020.624273 (https://d\noi.org/10.3389%2Ffpls.2020.624273). PMC\u00a07835636 (https://ww\nw.ncbi.nlm.nih.gov/pmc/articles/PMC7835636). PMID\u00a033510761\n(https://pubmed.ncbi.nlm.nih.gov/33510761).\n5. Bishop, C. M. (2006), Pattern Recognition and Machine\nLearning, Springer, ISBN\u00a0978-0-387-31073-2\n6. Machine learning and pattern recognition \"can be viewed as two\nfacets of the same \ufb01eld\".[5]:\u200avii\u200a\n7. Friedman, Jerome H. (1998). \"Data Mining and Statistics: What's\nthe connection?\". Computing Science and Statistics. 29 (1): 3\u20139.\n8. Samuel, Arthur (1959). \"Some Studies in Machine Learning\nUsing the Game of Checkers\". IBM Journal of Research and\nDevelopment. 3 (3): 210\u2013229. CiteSeerX\u00a010.1.1.368.2254 (http\ns://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.368.225\n4). doi:10.1147/rd.33.0210 (https://doi.org/10.1147%2Frd.33.021\n0). S2CID\u00a02126705 (https://api.semanticscholar.org/CorpusID:21\n26705).\n9. R. Kohavi and F. Provost, \"Glossary of terms\", Machine\nLearning, vol. 30, no. 2\u20133, pp. 271\u2013274, 1998.\n10. Gerovitch, Slava (9 April 2015). \"How the Computer Got Its\nRevenge on the Soviet Union\" (https://web.archive.org/web/2021\n0922175839/https://nautil.us/issue/23/Dominoes/how-the-comput\ner-got-its-revenge-on-the-soviet-union). Nautilus. Archived from\nthe original (https://nautil.us/issue/23/dominoes/how-the-compute\nr-got-its-revenge-on-the-soviet-union) on 22 September 2021.\nRetrieved 19 September 2021.\n11. Lindsay, Richard P. (1 September 1964). \"The Impact of\nAutomation On Public Administration\" (https://journals.sagepub.c\nom/doi/10.1177/106591296401700364). Western Political\nQuarterly. 17 (3): 78\u201381. doi:10.1177/106591296401700364 (htt\nps://doi.org/10.1177%2F106591296401700364). ISSN\u00a00043-\n4078 (https://search.worldcat.org/issn/0043-4078).\nS2CID\u00a0154021253 (https://api.semanticscholar.org/CorpusID:154\n021253). Archived (https://web.archive.org/web/2021100619084\n1/https://journals.sagepub.com/doi/10.1177/10659129640170036\n4) from the original on 6 October 2021. Retrieved 6 October\n2021.\n12. \"History and Evolution of Machine Learning: A Timeline\" (https://\nwww.techtarget.com/whatis/A-Timeline-of-Machine-Learning-Hist\nory). WhatIs.", "mimetype": "text/plain", "start_char_idx": 3090, "end_char_idx": 5720, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dd7df896-0190-41e5-b23a-dc6dd0bd590d": {"__data__": {"id_": "dd7df896-0190-41e5-b23a-dc6dd0bd590d", "embedding": null, "metadata": {"page_label": "7", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "efc59103-b568-4d8b-b9ac-e1c672c99c50", "node_type": "4", "metadata": {"page_label": "7", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "ec1c533652981a49669d172de0e50b0d5742bb51530b94ff6bc6316e529f4812", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "acf6f18e-ad5c-468e-9c45-a2e854ea95e0", "node_type": "1", "metadata": {"page_label": "7", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "865023d313f7ed59454ba2d60a4ce532e720aa6df1f8a970438a368cb6440db6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fe8a601d-3d51-45a3-be13-f02758ff5414", "node_type": "1", "metadata": {}, "hash": "7409347f2e3d2a6922785b31085aa4b254abee63b835c83858e6bd8a9adc8c53", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "doi:10.1177/106591296401700364 (htt\nps://doi.org/10.1177%2F106591296401700364). ISSN\u00a00043-\n4078 (https://search.worldcat.org/issn/0043-4078).\nS2CID\u00a0154021253 (https://api.semanticscholar.org/CorpusID:154\n021253). Archived (https://web.archive.org/web/2021100619084\n1/https://journals.sagepub.com/doi/10.1177/10659129640170036\n4) from the original on 6 October 2021. Retrieved 6 October\n2021.\n12. \"History and Evolution of Machine Learning: A Timeline\" (https://\nwww.techtarget.com/whatis/A-Timeline-of-Machine-Learning-Hist\nory). WhatIs. Archived (https://web.archive.org/web/2023120822\n0935/https://www.techtarget.com/whatis/A-Timeline-of-Machine-L\nearning-History) from the original on 8 December 2023.\nRetrieved 8 December 2023.\n13. Milner, Peter M. (1993). \"The Mind and Donald O. Hebb\" (https://\nwww.jstor.org/stable/24941344). Scienti\ufb01c American. 268 (1):\n124\u2013129. Bibcode:1993SciAm.268a.124M (https://ui.adsabs.harv\nard.edu/abs/1993SciAm.268a.124M).\ndoi:10.1038/scienti\ufb01camerican0193-124 (https://doi.org/10.103\n8%2Fscienti\ufb01camerican0193-124). ISSN\u00a00036-8733 (https://sear\nch.worldcat.org/issn/0036-8733). JSTOR\u00a024941344 (https://www.\njstor.org/stable/24941344). PMID\u00a08418480 (https://pubmed.ncbi.\nnlm.nih.gov/8418480). Archived (https://web.archive.org/web/202\n31220163326/https://www.jstor.org/stable/24941344) from the\noriginal on 20 December 2023. Retrieved 9 December 2023.\n14. \"Science: The Goof Button\", Time, 18 August 1961.\n15. Nilsson N. Learning Machines, McGraw Hill, 1965.\n16. Duda, R., Hart P. Pattern Recognition and Scene Analysis, Wiley\nInterscience, 1973\n17. S. Bozinovski \"Teaching space: A representation concept for\nadaptive pattern classi\ufb01cation\" COINS Technical Report No. 81-\n28, Computer and Information Science Department, University of\nMassachusetts at Amherst, MA, 1981.\nhttps://web.cs.umass.edu/publication/docs/1981/UM-CS-1981-\n028.pdf Archived (https://web.archive.org/web/20210225070218/\nhttps://web.cs.umass.edu/publication/docs/1981/UM-CS-1981-02\n8.pdf) 25 February 2021 at the Wayback Machine\n18. Mitchell, T. (1997). Machine Learning. McGraw Hill. p.\u00a02.\nISBN\u00a0978-0-07-042807-2.\n19. Harnad, Stevan (2008), \"The Annotation Game: On Turing\n(1950) on Computing, Machinery, and Intelligence\" (https://web.a\nrchive.org/web/20120309113922/http://eprints.ecs.soton.ac.uk/1\n2954/), in Epstein, Robert; Peters, Grace (eds.), The Turing Test\nSourcebook: Philosophical and Methodological Issues in the\nQuest for the Thinking Computer, Kluwer, pp.\u00a023\u201366,\nISBN\u00a09781402067082, archived from the original (http://eprints.e\ncs.soton.ac.uk/12954/) on 9 March 2012, retrieved 11 December\n2012\n20. \"Introduction to AI Part 1\" (https://edzion.com/2020/12/09/introdu\nction-to-ai-part-1/). Edzion. 8 December 2020.", "mimetype": "text/plain", "start_char_idx": 5183, "end_char_idx": 7917, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fe8a601d-3d51-45a3-be13-f02758ff5414": {"__data__": {"id_": "fe8a601d-3d51-45a3-be13-f02758ff5414", "embedding": null, "metadata": {"page_label": "7", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "efc59103-b568-4d8b-b9ac-e1c672c99c50", "node_type": "4", "metadata": {"page_label": "7", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "ec1c533652981a49669d172de0e50b0d5742bb51530b94ff6bc6316e529f4812", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dd7df896-0190-41e5-b23a-dc6dd0bd590d", "node_type": "1", "metadata": {"page_label": "7", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "037decb18ddb90a0f930fdfcca384382fa0725b89d1301a550e15bdd06992b2f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5dd871bf-cecb-406c-b88e-5709a6adb814", "node_type": "1", "metadata": {}, "hash": "4d395319f1193d1867fa2f3d7ffa01a3cc2e312392da8a9b3e985b040180c3c5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Harnad, Stevan (2008), \"The Annotation Game: On Turing\n(1950) on Computing, Machinery, and Intelligence\" (https://web.a\nrchive.org/web/20120309113922/http://eprints.ecs.soton.ac.uk/1\n2954/), in Epstein, Robert; Peters, Grace (eds.), The Turing Test\nSourcebook: Philosophical and Methodological Issues in the\nQuest for the Thinking Computer, Kluwer, pp.\u00a023\u201366,\nISBN\u00a09781402067082, archived from the original (http://eprints.e\ncs.soton.ac.uk/12954/) on 9 March 2012, retrieved 11 December\n2012\n20. \"Introduction to AI Part 1\" (https://edzion.com/2020/12/09/introdu\nction-to-ai-part-1/). Edzion. 8 December 2020. Archived (https://w\neb.archive.org/web/20210218005157/https://edzion.com/2020/1\n2/09/introduction-to-ai-part-1/) from the original on 18 February\n2021. Retrieved 9 December 2020.\n21. Sindhu V, Nivedha S, Prakash M (February 2020). \"An Empirical\nScience Research on Bioinformatics in Machine Learning\" (http\ns://doi.org/10.26782%2Fjmcms.spl.7%2F2020.02.00006).\nJournal of Mechanics of Continua and Mathematical Sciences\n(7). doi:10.26782/jmcms.spl.7/2020.02.00006 (https://doi.org/10.\n26782%2Fjmcms.spl.7%2F2020.02.00006).\n22. Sarle, Warren S. (1994). \"Neural Networks and statistical\nmodels\". SUGI 19: proceedings of the Nineteenth Annual SAS\nUsers Group International Conference. SAS Institute. pp.\u00a01538\u2013\n50. ISBN\u00a09781555446116. OCLC\u00a035546178 (https://search.world\ncat.org/oclc/35546178).\n23. Russell, Stuart; Norvig, Peter (2003) [1995]. Arti\ufb01cial Intelligence:\nA Modern Approach (2nd\u00a0ed.). Prentice Hall. ISBN\u00a0978-\n0137903955.\n24. Langley, Pat (2011). \"The changing science of machine learning\"\n(https://doi.org/10.1007%2Fs10994-011-5242-y). Machine\nLearning. 82 (3): 275\u20139. doi:10.1007/s10994-011-5242-y (https://\ndoi.org/10.1007%2Fs10994-011-5242-y).\n25. Mahoney, Matt. \"Rationale for a Large Text Compression\nBenchmark\" (http://cs.\ufb01t.edu/~mmahoney/compression/rationale.\nhtml). Florida Institute of Technology. Retrieved 5 March 2013.\n26. Shmilovici A.; Kahiri Y.; Ben-Gal I.; Hauser S. (2009). \"Measuring\nthe Ef\ufb01ciency of the Intraday Forex Market with a Universal Data\nCompression Algorithm\" (http://www.eng.tau.ac.il/~bengal/28.pdf)\n(PDF). Computational Economics. 33 (2): 131\u2013154.\nCiteSeerX\u00a010.1.1.627.3751 (https://citeseerx.ist.psu.edu/viewdo\nc/summary?doi=10.1.1.627.3751). doi:10.1007/s10614-008-\n9153-3 (https://doi.org/10.1007%2Fs10614-008-9153-3).\nS2CID\u00a017234503 (https://api.semanticscholar.org/CorpusID:1723\n4503). Archived (https://web.archive.org/web/20090709143601/h\nttp://www.eng.tau.ac.il/~bengal/28.pdf) (PDF) from the original on\n9 July 2009.\n27. I. Ben-Gal (2008).", "mimetype": "text/plain", "start_char_idx": 7308, "end_char_idx": 9909, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5dd871bf-cecb-406c-b88e-5709a6adb814": {"__data__": {"id_": "5dd871bf-cecb-406c-b88e-5709a6adb814", "embedding": null, "metadata": {"page_label": "7", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "efc59103-b568-4d8b-b9ac-e1c672c99c50", "node_type": "4", "metadata": {"page_label": "7", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "ec1c533652981a49669d172de0e50b0d5742bb51530b94ff6bc6316e529f4812", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fe8a601d-3d51-45a3-be13-f02758ff5414", "node_type": "1", "metadata": {"page_label": "7", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "fbdfb3bc3d9c49a2883264ce9817c57bb7850a0a80035d9df54eddb316330be5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Computational Economics. 33 (2): 131\u2013154.\nCiteSeerX\u00a010.1.1.627.3751 (https://citeseerx.ist.psu.edu/viewdo\nc/summary?doi=10.1.1.627.3751). doi:10.1007/s10614-008-\n9153-3 (https://doi.org/10.1007%2Fs10614-008-9153-3).\nS2CID\u00a017234503 (https://api.semanticscholar.org/CorpusID:1723\n4503). Archived (https://web.archive.org/web/20090709143601/h\nttp://www.eng.tau.ac.il/~bengal/28.pdf) (PDF) from the original on\n9 July 2009.\n27. I. Ben-Gal (2008). \"On the Use of Data Compression Measures\nto Analyze Robust Designs\" (http://www.eng.tau.ac.il/~bengal/Jo\nurnal%20Paper.pdf) (PDF). IEEE Transactions on Reliability. 54\n(3): 381\u2013388. doi:10.1109/TR.2005.853280 (https://doi.org/10.11\n09%2FTR.2005.853280). S2CID\u00a09376086 (https://api.semanticsc\nholar.org/CorpusID:9376086).\n28. D. Scully; Carla E. Brodley (2006). \"Compression and Machine\nLearning: A New Perspective on Feature Space Vectors\". Data\nCompression Conference (DCC'06). p.\u00a0332.\ndoi:10.1109/DCC.2006.13 (https://doi.org/10.1109%2FDCC.200\n6.13). ISBN\u00a00-7695-2545-8. S2CID\u00a012311412 (https://api.semant\nicscholar.org/CorpusID:12311412).\n29. Gary Adcock (5 January 2023). \"What Is AI Video\nCompression?\" (https://massive.io/\ufb01le-transfer/what-is-ai-video-c\nompression/). massive.io. Retrieved 6 April 2023.\n30. Mentzer, Fabian; Toderici, George; Tschannen, Michael;\nAgustsson, Eirikur (2020). \"High-Fidelity Generative Image\nCompression\". arXiv:2006.09965 (https://arxiv.org/abs/2006.099\n65) [eess.IV (https://arxiv.org/archive/eess.IV)].\n31. \"What is Unsupervised Learning? | IBM\" (https://www.ibm.com/to\npics/unsupervised-learning). www.ibm.com. 23 September 2021.\nRetrieved 5 February 2024.\n32. \"Differentially private clustering for large-scale datasets\" (https://\nblog.research.google/2023/05/differentially-private-clustering-for.\nhtml). blog.research.google. 25 May 2023. Retrieved 16 March\n2024.\n33. Edwards, Benj (28 September 2023). \"AI language models can\nexceed PNG and FLAC in lossless compression, says study\" (htt\nps://arstechnica.com/information-technology/2023/09/ai-languag\ne-models-can-exceed-png-and-\ufb02ac-in-lossless-compression-say\ns-study/). Ars Technica. Retrieved 7 March 2024.\n34. Del\u00e9tang, Gr\u00e9goire; Ruoss, Anian; Duquenne, Paul-Ambroise;\nCatt, Elliot; Genewein, Tim; Mattern, Christopher; Grau-Moya,\nJordi; Li Kevin Wenliang; Aitchison, Matthew; Orseau, Laurent;\nHutter, Marcus; Veness, Joel (2023). \"Language Modeling is\nCompression\". arXiv:2309.10668 (https://arxiv.org/abs/2309.106\n68) [cs.LG (https://arxiv.org/archive/cs.LG)].\nProprietary software\nJournals\nConferences\nSee also\nReferences\n6/7/25, 7:32 PM Machine learning - Wikipedia\nhttps://en.wikipedia.org/wiki/Machine_learning 7/11", "mimetype": "text/plain", "start_char_idx": 9467, "end_char_idx": 12129, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2579320b-f5fa-4df8-897b-4eaf4c248f17": {"__data__": {"id_": "2579320b-f5fa-4df8-897b-4eaf4c248f17", "embedding": null, "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7389587-1026-44fc-9df5-07766d354257", "node_type": "4", "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b539952f4c6477cdba6b523a7e771f56f87f06cdc2145e9b9e4ccf194906d9dd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a7a21c2d-ed15-4b0a-9598-c1146743daa5", "node_type": "1", "metadata": {}, "hash": "99316ee3e582fdbd86b84a81c2008a81450eb06ff4c2d5e5936fc541b788dd91", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "35. Le Roux, Nicolas; Bengio, Yoshua; Fitzgibbon, Andrew (2012).\n\"Improving First and Second-Order Methods by Modeling\nUncertainty\" (https://books.google.com/books?id=JPQx7s2L1A8\nC&q=%22Improving+First+and+Second-Order+Methods+by+Mo\ndeling+Uncertainty&pg=PA403). In Sra, Suvrit; Nowozin,\nSebastian; Wright, Stephen J. (eds.). Optimization for Machine\nLearning. MIT Press. p.\u00a0404. ISBN\u00a09780262016469. Archived (htt\nps://web.archive.org/web/20230117053335/https://books.google.\ncom/books?id=JPQx7s2L1A8C&q=%22Improving+First+and+Se\ncond-Order+Methods+by+Modeling+Uncertainty&pg=PA403)\nfrom the original on 17 January 2023. Retrieved 12 November\n2020.\n36. Bzdok, Danilo; Altman, Naomi; Krzywinski, Martin (2018).\n\"Statistics versus Machine Learning\" (https://www.ncbi.nlm.nih.g\nov/pmc/articles/PMC6082636). Nature Methods. 15 (4): 233\u2013\n234. doi:10.1038/nmeth.4642 (https://doi.org/10.1038%2Fnmeth.\n4642). PMC\u00a06082636 (https://www.ncbi.nlm.nih.gov/pmc/articles/\nPMC6082636). PMID\u00a030100822 (https://pubmed.ncbi.nlm.nih.go\nv/30100822).\n37. Michael I. Jordan (10 September 2014). \"statistics and machine\nlearning\" (https://www.reddit.com/r/MachineLearning/comments/\n2fxi6v/ama_michael_i_jordan/ckelmtt?context=3). reddit.\nArchived (https://web.archive.org/web/20171018192328/https://w\nww.reddit.com/r/MachineLearning/comments/2fxi6v/ama_michae\nl_i_jordan/ckelmtt/?context=3) from the original on 18 October\n2017. Retrieved 1 October 2014.\n38. Hung et al. Algorithms to Measure Surgeon Performance and\nAnticipate Clinical Outcomes in Robotic Surgery. JAMA Surg.\n2018\n39. Cornell University Library (August 2001). \"Breiman: Statistical\nModeling: The Two Cultures (with comments and a rejoinder by\nthe author)\" (http://projecteuclid.org/download/pdf_1/euclid.ss/10\n09213726). Statistical Science. 16 (3).\ndoi:10.1214/ss/1009213726 (https://doi.org/10.1214%2Fss%2F1\n009213726). S2CID\u00a062729017 (https://api.semanticscholar.org/C\norpusID:62729017). Archived (https://web.archive.org/web/20170\n626042637/http://projecteuclid.org/download/pdf_1/euclid.ss/100\n9213726) from the original on 26 June 2017. Retrieved 8 August\n2015.\n40. Gareth James; Daniela Witten; Trevor Hastie; Robert Tibshirani\n(2013). An Introduction to Statistical Learning (http://www-bcf.us\nc.edu/~gareth/ISL/). Springer. p.\u00a0vii. Archived (https://web.archiv\ne.org/web/20190623150237/http://www-bcf.usc.edu/~gareth/IS\nL/) from the original on 23 June 2019. Retrieved 25 October\n2014.\n41. Ramezanpour, A.; Beam, A.L.; Chen, J.H.; Mashaghi, A. (17\nNovember 2020). \"Statistical Physics for Medical Diagnostics:\nLearning, Inference, and Optimization Algorithms\" (https://www.n\ncbi.nlm.nih.gov/pmc/articles/PMC7699346). Diagnostics. 10 (11):\n972. doi:10.3390/diagnostics10110972 (https://doi.org/10.3390%\n2Fdiagnostics10110972).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2779, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a7a21c2d-ed15-4b0a-9598-c1146743daa5": {"__data__": {"id_": "a7a21c2d-ed15-4b0a-9598-c1146743daa5", "embedding": null, "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7389587-1026-44fc-9df5-07766d354257", "node_type": "4", "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b539952f4c6477cdba6b523a7e771f56f87f06cdc2145e9b9e4ccf194906d9dd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2579320b-f5fa-4df8-897b-4eaf4c248f17", "node_type": "1", "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "ab32301c48368a2105015d436e64d7a671e0e045ef51d47bd5283386701b7bf3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0f2ffd0d-92cb-47f1-86c7-77ee4fb840fc", "node_type": "1", "metadata": {}, "hash": "cc9ddd275dd20ed320d055a9eaf042d8f45e32e40e09020f20a44cd7ade70713", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Springer. p.\u00a0vii. Archived (https://web.archiv\ne.org/web/20190623150237/http://www-bcf.usc.edu/~gareth/IS\nL/) from the original on 23 June 2019. Retrieved 25 October\n2014.\n41. Ramezanpour, A.; Beam, A.L.; Chen, J.H.; Mashaghi, A. (17\nNovember 2020). \"Statistical Physics for Medical Diagnostics:\nLearning, Inference, and Optimization Algorithms\" (https://www.n\ncbi.nlm.nih.gov/pmc/articles/PMC7699346). Diagnostics. 10 (11):\n972. doi:10.3390/diagnostics10110972 (https://doi.org/10.3390%\n2Fdiagnostics10110972). PMC\u00a07699346 (https://www.ncbi.nlm.ni\nh.gov/pmc/articles/PMC7699346). PMID\u00a033228143 (https://pubm\ned.ncbi.nlm.nih.gov/33228143).\n42. Mashaghi, A.; Ramezanpour, A. (16 March 2018). \"Statistical\nphysics of medical diagnostics: Study of a probabilistic model\".\nPhysical Review E. 97 (3\u20131): 032118. arXiv:1803.10019 (https://\narxiv.org/abs/1803.10019). Bibcode:2018PhRvE..97c2118M (http\ns://ui.adsabs.harvard.edu/abs/2018PhRvE..97c2118M).\ndoi:10.1103/PhysRevE.97.032118 (https://doi.org/10.1103%2FPh\nysRevE.97.032118). PMID\u00a029776109 (https://pubmed.ncbi.nlm.ni\nh.gov/29776109). S2CID\u00a04955393 (https://api.semanticscholar.or\ng/CorpusID:4955393).\n43. Mohri, Mehryar; Rostamizadeh, Afshin; Talwalkar, Ameet (2012).\nFoundations of Machine Learning. US, Massachusetts: MIT\nPress. ISBN\u00a09780262018258.\n44. Alpaydin, Ethem (2010). Introduction to Machine Learning (http\ns://archive.org/details/introductiontoma00alpa_0). London: The\nMIT Press. ISBN\u00a0978-0-262-01243-0. Retrieved 4 February\n2017.\n45. Jordan, M. I.; Mitchell, T. M. (17 July 2015). \"Machine learning:\nTrends, perspectives, and prospects\". Science. 349 (6245): 255\u2013\n260. Bibcode:2015Sci...349..255J (https://ui.adsabs.harvard.edu/\nabs/2015Sci...349..255J). doi:10.1126/science.aaa8415 (https://d\noi.org/10.1126%2Fscience.aaa8415). PMID\u00a026185243 (https://pu\nbmed.ncbi.nlm.nih.gov/26185243). S2CID\u00a0677218 (https://api.se\nmanticscholar.org/CorpusID:677218).\n46. El Naqa, Issam; Murphy, Martin J. (2015). \"What is Machine\nLearning?\". Machine Learning in Radiation Oncology. pp.\u00a03\u201311.\ndoi:10.1007/978-3-319-18305-3_1 (https://doi.org/10.1007%2F9\n78-3-319-18305-3_1). ISBN\u00a0978-3-319-18304-6.\nS2CID\u00a0178586107 (https://api.semanticscholar.org/CorpusID:178\n586107).\n47. Okolie, Jude A.; Savage, Shauna; Ogbaga, Chukwuma C.;\nGunes, Burcu (June 2022). \"Assessing the potential of machine\nlearning methods to study the removal of pharmaceuticals from\nwastewater using biochar or activated carbon\" (https://doi.org/10.\n1016%2Fj.totert.2022.100001). Total Environment Research\nThemes. 1\u20132: 100001.", "mimetype": "text/plain", "start_char_idx": 2268, "end_char_idx": 4813, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0f2ffd0d-92cb-47f1-86c7-77ee4fb840fc": {"__data__": {"id_": "0f2ffd0d-92cb-47f1-86c7-77ee4fb840fc", "embedding": null, "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7389587-1026-44fc-9df5-07766d354257", "node_type": "4", "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b539952f4c6477cdba6b523a7e771f56f87f06cdc2145e9b9e4ccf194906d9dd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a7a21c2d-ed15-4b0a-9598-c1146743daa5", "node_type": "1", "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "a43d6941ca6961b1e36a738addf3b5a87c1ff1b0f76ff0a1568cc419e0451235", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "af3e00bd-51cb-452c-b456-9c9b1c418ded", "node_type": "1", "metadata": {}, "hash": "e635ef7f02a960cb92cc6e0c22d02c45c914b5511f855ca5452fd5b399be473c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "doi:10.1007/978-3-319-18305-3_1 (https://doi.org/10.1007%2F9\n78-3-319-18305-3_1). ISBN\u00a0978-3-319-18304-6.\nS2CID\u00a0178586107 (https://api.semanticscholar.org/CorpusID:178\n586107).\n47. Okolie, Jude A.; Savage, Shauna; Ogbaga, Chukwuma C.;\nGunes, Burcu (June 2022). \"Assessing the potential of machine\nlearning methods to study the removal of pharmaceuticals from\nwastewater using biochar or activated carbon\" (https://doi.org/10.\n1016%2Fj.totert.2022.100001). Total Environment Research\nThemes. 1\u20132: 100001. Bibcode:2022TERT....100001O (https://ui.\nadsabs.harvard.edu/abs/2022TERT....100001O).\ndoi:10.1016/j.totert.2022.100001 (https://doi.org/10.1016%2Fj.tot\nert.2022.100001). S2CID\u00a0249022386 (https://api.semanticschola\nr.org/CorpusID:249022386).\n48. Russell, Stuart J.; Norvig, Peter (2010). Arti\ufb01cial Intelligence: A\nModern Approach (Third\u00a0ed.). Prentice Hall.\nISBN\u00a09780136042594.\n49. Mohri, Mehryar; Rostamizadeh, Afshin; Talwalkar, Ameet (2012).\nFoundations of Machine Learning. The MIT Press.\nISBN\u00a09780262018258.\n50. Alpaydin, Ethem (2010). Introduction to Machine Learning (http\ns://books.google.com/books?id=7f5bBAAAQBAJ). MIT Press.\np.\u00a09. ISBN\u00a0978-0-262-01243-0. Archived (https://web.archive.org/\nweb/20230117053338/https://books.google.com/books?id=7f5bB\nAAAQBAJ) from the original on 17 January 2023. Retrieved\n25 November 2018.\n51. \"Lecture 2 Notes: Supervised Learning\" (https://www.cs.cornell.e\ndu/courses/cs4780/2022sp/notes/LectureNotes02.html).\nwww.cs.cornell.edu. Retrieved 1 July 2024.\n52. Jordan, Michael I.; Bishop, Christopher M. (2004). \"Neural\nNetworks\". In Allen B. Tucker (ed.). Computer Science\nHandbook, Second Edition (Section VII: Intelligent Systems).\nBoca Raton, Florida: Chapman & Hall/CRC Press LLC.\nISBN\u00a0978-1-58488-360-9.\n53. Misra, Ishan; Maaten, Laurens van der (2020). Self-Supervised\nLearning of Pretext-Invariant Representations (https://openacces\ns.thecvf.com/content_CVPR_2020/html/Misra_Self-Supervised_\nLearning_of_Pretext-Invariant_Representations_CVPR_2020_pa\nper.html). 2020 IEEE/CVF Conference on Computer Vision and\nPattern Recognition (CVPR). Seattle, WA, USA: IEEE. pp.\u00a06707\u2013\n6717. arXiv:1912.01991 (https://arxiv.org/abs/1912.01991).\ndoi:10.1109/CVPR42600.2020.00674 (https://doi.org/10.1109%2\nFCVPR42600.2020.00674).\n54. Jaiswal, Ashish; Babu, Ashwin Ramesh; Zadeh, Mohammad\nZaki; Banerjee, Debapriya; Makedon, Fillia (March 2021). \"A\nSurvey on Contrastive Self-Supervised Learning\" (https://doi.org/\n10.3390%2Ftechnologies9010002). Technologies. 9 (1): 2.\narXiv:2011.00362 (https://arxiv.org/abs/2011.00362).\ndoi:10.3390/technologies9010002 (https://doi.org/10.3390%2Fte\nchnologies9010002).", "mimetype": "text/plain", "start_char_idx": 4310, "end_char_idx": 6953, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "af3e00bd-51cb-452c-b456-9c9b1c418ded": {"__data__": {"id_": "af3e00bd-51cb-452c-b456-9c9b1c418ded", "embedding": null, "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7389587-1026-44fc-9df5-07766d354257", "node_type": "4", "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b539952f4c6477cdba6b523a7e771f56f87f06cdc2145e9b9e4ccf194906d9dd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0f2ffd0d-92cb-47f1-86c7-77ee4fb840fc", "node_type": "1", "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "6261f295365512a559e974d411b6d8b9a05a6e666eca05cf08f238ed38b77a0b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2ff4e7af-8e0f-43cc-ae14-0fe199c2a8c0", "node_type": "1", "metadata": {}, "hash": "0eb484f87ce464c6e07a28d2bc4dad4e3387d687621bc6183ea79fe2773a1535", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "doi:10.1109/CVPR42600.2020.00674 (https://doi.org/10.1109%2\nFCVPR42600.2020.00674).\n54. Jaiswal, Ashish; Babu, Ashwin Ramesh; Zadeh, Mohammad\nZaki; Banerjee, Debapriya; Makedon, Fillia (March 2021). \"A\nSurvey on Contrastive Self-Supervised Learning\" (https://doi.org/\n10.3390%2Ftechnologies9010002). Technologies. 9 (1): 2.\narXiv:2011.00362 (https://arxiv.org/abs/2011.00362).\ndoi:10.3390/technologies9010002 (https://doi.org/10.3390%2Fte\nchnologies9010002). ISSN\u00a02227-7080 (https://search.worldcat.or\ng/issn/2227-7080).\n55. Alex Ratner; Stephen Bach; Paroma Varma; Chris. \"Weak\nSupervision: The New Programming Paradigm for Machine\nLearning\" (https://web.archive.org/web/20190606043931/https://\nhazyresearch.github.io/snorkel/blog/ws_blog_post.html).\nhazyresearch.github.io. referencing work by many other\nmembers of Hazy Research. Archived from the original (https://h\nazyresearch.github.io/snorkel/blog/ws_blog_post.html) on 6 June\n2019. Retrieved 6 June 2019.\n56. van Otterlo, M.; Wiering, M. (2012). \"Reinforcement Learning\nand Markov Decision Processes\". Reinforcement Learning.\nAdaptation, Learning, and Optimization. Vol.\u00a012. pp.\u00a03\u201342.\ndoi:10.1007/978-3-642-27645-3_1 (https://doi.org/10.1007%2F9\n78-3-642-27645-3_1). ISBN\u00a0978-3-642-27644-6.\n57. Roweis, Sam T.; Saul, Lawrence K. (22 December 2000).\n\"Nonlinear Dimensionality Reduction by Locally Linear\nEmbedding\" (https://science.sciencemag.org/content/290/5500/2\n323). Science. 290 (5500): 2323\u20132326.\nBibcode:2000Sci...290.2323R (https://ui.adsabs.harvard.edu/ab\ns/2000Sci...290.2323R). doi:10.1126/science.290.5500.2323 (htt\nps://doi.org/10.1126%2Fscience.290.5500.2323).\nPMID\u00a011125150 (https://pubmed.ncbi.nlm.nih.gov/11125150).\nS2CID\u00a05987139 (https://api.semanticscholar.org/CorpusID:59871\n39). Archived (https://web.archive.org/web/20210815021528/http\ns://science.sciencemag.org/content/290/5500/2323) from the\noriginal on 15 August 2021. Retrieved 17 July 2023.\n58. Pavel Brazdil; Christophe Giraud Carrier; Carlos Soares; Ricardo\nVilalta (2009). Metalearning: Applications to Data Mining\n(Fourth\u00a0ed.). Springer Science+Business Media. pp.\u00a010\u201314,\npassim. ISBN\u00a0978-3540732624.\n59. Bozinovski, S. (1982). \"A self-learning system using secondary\nreinforcement\". In Trappl, Robert (ed.). Cybernetics and Systems\nResearch: Proceedings of the Sixth European Meeting on\nCybernetics and Systems Research. North-Holland. pp. 397\u2013\n402. ISBN\u00a0978-0-444-86488-8.\n60. Bozinovski, S. (1999) \"Crossbar Adaptive Array: The \ufb01rst\nconnectionist network that solved the delayed reinforcement\nlearning problem\" In A. Dobnikar, N. Steele, D. Pearson, R.\nAlbert (eds.) Arti\ufb01cial Neural Networks and Genetic Algorithms,\nSpringer Verlag, p. 320-325, ISBN 3-211-83364-1\n61.", "mimetype": "text/plain", "start_char_idx": 6495, "end_char_idx": 9207, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2ff4e7af-8e0f-43cc-ae14-0fe199c2a8c0": {"__data__": {"id_": "2ff4e7af-8e0f-43cc-ae14-0fe199c2a8c0", "embedding": null, "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7389587-1026-44fc-9df5-07766d354257", "node_type": "4", "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b539952f4c6477cdba6b523a7e771f56f87f06cdc2145e9b9e4ccf194906d9dd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "af3e00bd-51cb-452c-b456-9c9b1c418ded", "node_type": "1", "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "1a21be289ac67ca7675c4db0262afd50057a48ecd53f019f9e92357a864e1d4c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "eb65d5c7-7a08-4636-9ad1-a589c140eba2", "node_type": "1", "metadata": {}, "hash": "e28b06df50b617b61f43e4fbbd9b9dcf0e79f196dff0f73359bc1e68628406e1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "ISBN\u00a0978-3540732624.\n59. Bozinovski, S. (1982). \"A self-learning system using secondary\nreinforcement\". In Trappl, Robert (ed.). Cybernetics and Systems\nResearch: Proceedings of the Sixth European Meeting on\nCybernetics and Systems Research. North-Holland. pp. 397\u2013\n402. ISBN\u00a0978-0-444-86488-8.\n60. Bozinovski, S. (1999) \"Crossbar Adaptive Array: The \ufb01rst\nconnectionist network that solved the delayed reinforcement\nlearning problem\" In A. Dobnikar, N. Steele, D. Pearson, R.\nAlbert (eds.) Arti\ufb01cial Neural Networks and Genetic Algorithms,\nSpringer Verlag, p. 320-325, ISBN 3-211-83364-1\n61. Bozinovski, Stevo (2014) \"Modeling mechanisms of cognition-\nemotion interaction in arti\ufb01cial neural networks, since 1981.\"\nProcedia Computer Science p. 255-263\n62. Bozinovski, S. (2001) \"Self-learning agents: A connectionist\ntheory of emotion based on crossbar value judgment.\"\nCybernetics and Systems 32(6) 637\u2013667.\n63. Y. Bengio; A. Courville; P. Vincent (2013). \"Representation\nLearning: A Review and New Perspectives\". IEEE Transactions\non Pattern Analysis and Machine Intelligence. 35 (8): 1798\u2013\n1828. arXiv:1206.5538 (https://arxiv.org/abs/1206.5538).\ndoi:10.1109/tpami.2013.50 (https://doi.org/10.1109%2Ftpami.201\n3.50). PMID\u00a023787338 (https://pubmed.ncbi.nlm.nih.gov/237873\n38). S2CID\u00a0393948 (https://api.semanticscholar.org/CorpusID:39\n3948).\n64. Nathan Srebro; Jason D. M. Rennie; Tommi S. Jaakkola (2004).\nMaximum-Margin Matrix Factorization. NIPS.\n65. Coates, Adam; Lee, Honglak; Ng, Andrew Y. (2011). An analysis\nof single-layer networks in unsupervised feature learning (https://\nweb.archive.org/web/20170813153615/http://machinelearning.w\nustl.edu/mlpapers/paper_\ufb01les/AISTATS2011_CoatesNL11.pdf)\n(PDF). Int'l Conf. on AI and Statistics (AISTATS). Archived from\nthe original (http://machinelearning.wustl.edu/mlpapers/paper_\ufb01l\nes/AISTATS2011_CoatesNL11.pdf) (PDF) on 13 August 2017.\nRetrieved 25 November 2018.\n66. Csurka, Gabriella; Dance, Christopher C.; Fan, Lixin;\nWillamowski, Jutta; Bray, C\u00e9dric (2004). Visual categorization\nwith bags of keypoints (https://www.cs.cmu.edu/~efros/courses/L\nBMV07/Papers/csurka-eccv-04.pdf) (PDF). ECCV Workshop on\nStatistical Learning in Computer Vision. Archived (https://web.arc\nhive.org/web/20190713040210/http://www.cs.cmu.edu/~efros/co\nurses/LBMV07/Papers/csurka-eccv-04.pdf) (PDF) from the\noriginal on 13 July 2019. Retrieved 29 August 2019.\n67. Daniel Jurafsky; James H. Martin (2009). Speech and Language\nProcessing. Pearson Education International. pp.\u00a0145\u2013146.\n68. Lu, Haiping; Plataniotis, K.N.; Venetsanopoulos, A.N. (2011). \"A\nSurvey of Multilinear Subspace Learning for Tensor Data\" (http://\nwww.dsp.utoronto.ca/~haiping/Publication/SurveyMSL_PR2011.\npdf) (PDF). Pattern Recognition. 44 (7): 1540\u20131551.\nBibcode:2011PatRe..44.1540L (https://ui.adsabs.harvard.edu/ab\ns/2011PatRe..44.1540L).", "mimetype": "text/plain", "start_char_idx": 8616, "end_char_idx": 11463, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "eb65d5c7-7a08-4636-9ad1-a589c140eba2": {"__data__": {"id_": "eb65d5c7-7a08-4636-9ad1-a589c140eba2", "embedding": null, "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7389587-1026-44fc-9df5-07766d354257", "node_type": "4", "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b539952f4c6477cdba6b523a7e771f56f87f06cdc2145e9b9e4ccf194906d9dd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2ff4e7af-8e0f-43cc-ae14-0fe199c2a8c0", "node_type": "1", "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "9d73db2197ab32140f682163bb4d77e6e67af4d85efbf5c95351b7c6bb8a1cb2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "74afd105-66b1-4480-928e-6463efb8f7ce", "node_type": "1", "metadata": {}, "hash": "71f18b24834e63a6264fc0513c9fea59f4d5fb953a6fd66486e13012e0e45fe3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Retrieved 29 August 2019.\n67. Daniel Jurafsky; James H. Martin (2009). Speech and Language\nProcessing. Pearson Education International. pp.\u00a0145\u2013146.\n68. Lu, Haiping; Plataniotis, K.N.; Venetsanopoulos, A.N. (2011). \"A\nSurvey of Multilinear Subspace Learning for Tensor Data\" (http://\nwww.dsp.utoronto.ca/~haiping/Publication/SurveyMSL_PR2011.\npdf) (PDF). Pattern Recognition. 44 (7): 1540\u20131551.\nBibcode:2011PatRe..44.1540L (https://ui.adsabs.harvard.edu/ab\ns/2011PatRe..44.1540L). doi:10.1016/j.patcog.2011.01.004 (http\ns://doi.org/10.1016%2Fj.patcog.2011.01.004). Archived (https://w\neb.archive.org/web/20190710225429/http://www.dsp.utoronto.ca/\n~haiping/Publication/SurveyMSL_PR2011.pdf) (PDF) from the\noriginal on 10 July 2019. Retrieved 4 September 2015.\n69. Yoshua Bengio (2009). Learning Deep Architectures for AI (http\ns://books.google.com/books?id=cq5ewg7FniMC&pg=PA3). Now\nPublishers Inc. pp.\u00a01\u20133. ISBN\u00a0978-1-60198-294-0. Archived (http\ns://web.archive.org/web/20230117053339/https://books.google.c\nom/books?id=cq5ewg7FniMC&pg=PA3) from the original on 17\nJanuary 2023. Retrieved 15 February 2016.\n70. Tillmann, A. M. (2015). \"On the Computational Intractability of\nExact and Approximate Dictionary Learning\". IEEE Signal\nProcessing Letters. 22 (1): 45\u201349. arXiv:1405.6664 (https://arxiv.\norg/abs/1405.6664). Bibcode:2015ISPL...22...45T (https://ui.adsa\nbs.harvard.edu/abs/2015ISPL...22...45T).\ndoi:10.1109/LSP.2014.2345761 (https://doi.org/10.1109%2FLSP.\n2014.2345761). S2CID\u00a013342762 (https://api.semanticscholar.or\ng/CorpusID:13342762).\n71. Aharon, M, M Elad, and A Bruckstein. 2006. \"K-SVD: An\nAlgorithm for Designing Overcomplete Dictionaries for Sparse\nRepresentation (http://sites.fas.harvard.edu/~cs278/papers/ksvd.\npdf) Archived (https://web.archive.org/web/20181123142158/htt\np://sites.fas.harvard.edu/~cs278/papers/ksvd.pdf) 2018-11-23 at\nthe Wayback Machine.\" Signal Processing, IEEE Transactions\non 54 (11): 4311\u20134322\n72. Zimek, Arthur; Schubert, Erich (2017), \"Outlier Detection\",\nEncyclopedia of Database Systems, Springer New York, pp.\u00a01\u20135,\ndoi:10.1007/978-1-4899-7993-3_80719-1 (https://doi.org/10.100\n7%2F978-1-4899-7993-3_80719-1), ISBN\u00a09781489979933\n73. Hodge, V. J.; Austin, J. (2004). \"A Survey of Outlier Detection\nMethodologies\" (http://eprints.whiterose.ac.uk/767/1/hodgevj4.pd\nf) (PDF). Arti\ufb01cial Intelligence Review. 22 (2): 85\u2013126.\nCiteSeerX\u00a010.1.1.318.4023 (https://citeseerx.ist.psu.edu/viewdo\nc/summary?doi=10.1.1.318.4023).", "mimetype": "text/plain", "start_char_idx": 10983, "end_char_idx": 13447, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "74afd105-66b1-4480-928e-6463efb8f7ce": {"__data__": {"id_": "74afd105-66b1-4480-928e-6463efb8f7ce", "embedding": null, "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7389587-1026-44fc-9df5-07766d354257", "node_type": "4", "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b539952f4c6477cdba6b523a7e771f56f87f06cdc2145e9b9e4ccf194906d9dd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "eb65d5c7-7a08-4636-9ad1-a589c140eba2", "node_type": "1", "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "1bfdaf914dbdff819db4dedcf729a7f28c4b6fe4e0161e4cf4cc954af3cbcf56", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5d2ceeb5-c6d7-4864-91a1-106f421bcdf5", "node_type": "1", "metadata": {}, "hash": "c1d9f62442188f17fc3c2723a99756973631e594fdf054e582c642c39c37e8f3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1\u20135,\ndoi:10.1007/978-1-4899-7993-3_80719-1 (https://doi.org/10.100\n7%2F978-1-4899-7993-3_80719-1), ISBN\u00a09781489979933\n73. Hodge, V. J.; Austin, J. (2004). \"A Survey of Outlier Detection\nMethodologies\" (http://eprints.whiterose.ac.uk/767/1/hodgevj4.pd\nf) (PDF). Arti\ufb01cial Intelligence Review. 22 (2): 85\u2013126.\nCiteSeerX\u00a010.1.1.318.4023 (https://citeseerx.ist.psu.edu/viewdo\nc/summary?doi=10.1.1.318.4023). doi:10.1007/s10462-004-\n4304-y (https://doi.org/10.1007%2Fs10462-004-4304-y).\nS2CID\u00a059941878 (https://api.semanticscholar.org/CorpusID:5994\n1878). Archived (https://web.archive.org/web/20150622042146/h\nttp://eprints.whiterose.ac.uk/767/1/hodgevj4.pdf) (PDF) from the\noriginal on 22 June 2015. Retrieved 25 November 2018.\n74. Dokas, Paul; Ertoz, Levent; Kumar, Vipin; Lazarevic, Aleksandar;\nSrivastava, Jaideep; Tan, Pang-Ning (2002). \"Data mining for\nnetwork intrusion detection\" (https://www-users.cse.umn.edu/~la\nzar027/MINDS/papers/nsf_ngdm_2002.pdf) (PDF). Proceedings\nNSF Workshop on Next Generation Data Mining. Archived (http\ns://web.archive.org/web/20150923211542/http://www.csee.umbc.\nedu/~kolari1/Mining/ngdm/dokas.pdf) (PDF) from the original on\n23 September 2015. Retrieved 26 March 2023.\n75. Chandola, V.; Banerjee, A.; Kumar, V. (2009). \"Anomaly\ndetection: A survey\". ACM Computing Surveys. 41 (3): 1\u201358.\ndoi:10.1145/1541880.1541882 (https://doi.org/10.1145%2F15418\n80.1541882). S2CID\u00a0207172599 (https://api.semanticscholar.org/\nCorpusID:207172599).\n76. Fleer, S.; Moringen, A.; Klatzky, R. L.; Ritter, H. (2020). \"Learning\nef\ufb01cient haptic shape exploration with a rigid tactile sensor array,\nS. Fleer, A. Moringen, R. Klatzky, H. Ritter\" (https://www.ncbi.nl\nm.nih.gov/pmc/articles/PMC6940144). PLOS ONE. 15 (1):\ne0226880. arXiv:1902.07501 (https://arxiv.org/abs/1902.07501).\ndoi:10.1371/journal.pone.0226880 (https://doi.org/10.1371%2Fjo\nurnal.pone.0226880). PMC\u00a06940144 (https://www.ncbi.nlm.nih.g\nov/pmc/articles/PMC6940144). PMID\u00a031896135 (https://pubmed.\nncbi.nlm.nih.gov/31896135).\n77. Moringen, Alexandra; Fleer, Sascha; Walck, Guillaume; Ritter,\nHelge (2020), Nisky, Ilana; Hartcher-O'Brien, Jess; Wiertlewski,\nMicha\u00ebl; Smeets, Jeroen (eds.), \"Attention-Based Robot\nLearning of Haptic Interaction\", Haptics: Science, Technology,\nApplications, Lecture Notes in Computer Science, vol.\u00a012272,\nCham: Springer International Publishing, pp.", "mimetype": "text/plain", "start_char_idx": 13044, "end_char_idx": 15405, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5d2ceeb5-c6d7-4864-91a1-106f421bcdf5": {"__data__": {"id_": "5d2ceeb5-c6d7-4864-91a1-106f421bcdf5", "embedding": null, "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7389587-1026-44fc-9df5-07766d354257", "node_type": "4", "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b539952f4c6477cdba6b523a7e771f56f87f06cdc2145e9b9e4ccf194906d9dd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "74afd105-66b1-4480-928e-6463efb8f7ce", "node_type": "1", "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "c743a2f80aa660db6bba691a17be71d5936c01a73b2971349b2b8edc63cdcdf8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8a738ca9-b6d5-47f6-b9af-5b2bec90990b", "node_type": "1", "metadata": {}, "hash": "406a89eb665c324f3220ea68112a7fa4a4ec3a8069e7508b85f4e4f311c44351", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "doi:10.1371/journal.pone.0226880 (https://doi.org/10.1371%2Fjo\nurnal.pone.0226880). PMC\u00a06940144 (https://www.ncbi.nlm.nih.g\nov/pmc/articles/PMC6940144). PMID\u00a031896135 (https://pubmed.\nncbi.nlm.nih.gov/31896135).\n77. Moringen, Alexandra; Fleer, Sascha; Walck, Guillaume; Ritter,\nHelge (2020), Nisky, Ilana; Hartcher-O'Brien, Jess; Wiertlewski,\nMicha\u00ebl; Smeets, Jeroen (eds.), \"Attention-Based Robot\nLearning of Haptic Interaction\", Haptics: Science, Technology,\nApplications, Lecture Notes in Computer Science, vol.\u00a012272,\nCham: Springer International Publishing, pp.\u00a0462\u2013470,\ndoi:10.1007/978-3-030-58147-3_51 (https://doi.org/10.1007%2F\n978-3-030-58147-3_51), ISBN\u00a0978-3-030-58146-6,\nS2CID\u00a0220069113 (https://api.semanticscholar.org/CorpusID:220\n069113)\n78. Piatetsky-Shapiro, Gregory (1991), Discovery, analysis, and\npresentation of strong rules, in Piatetsky-Shapiro, Gregory; and\nFrawley, William J.; eds., Knowledge Discovery in Databases,\nAAAI/MIT Press, Cambridge, MA.\n79. Bassel, George W.; Glaab, Enrico; Marquez, Julietta;\nHoldsworth, Michael J.; Bacardit, Jaume (1 September 2011).\n\"Functional Network Construction in Arabidopsis Using Rule-\nBased Machine Learning on Large-Scale Data Sets\" (https://ww\nw.ncbi.nlm.nih.gov/pmc/articles/PMC3203449). The Plant Cell.\n23 (9): 3101\u20133116. Bibcode:2011PlanC..23.3101B (https://ui.ads\nabs.harvard.edu/abs/2011PlanC..23.3101B).\ndoi:10.1105/tpc.111.088153 (https://doi.org/10.1105%2Ftpc.111.0\n88153). ISSN\u00a01532-298X (https://search.worldcat.org/issn/1532-\n298X). PMC\u00a03203449 (https://www.ncbi.nlm.nih.gov/pmc/articles/\nPMC3203449). PMID\u00a021896882 (https://pubmed.ncbi.nlm.nih.go\nv/21896882).\n80. Agrawal, R.; Imieli\u0144ski, T.; Swami, A. (1993). \"Mining association\nrules between sets of items in large databases\". Proceedings of\nthe 1993 ACM SIGMOD international conference on\nManagement of data - SIGMOD '93. p.\u00a0207.\nCiteSeerX\u00a010.1.1.40.6984 (https://citeseerx.ist.psu.edu/viewdoc/\nsummary?doi=10.1.1.40.6984). doi:10.1145/170035.170072 (http\ns://doi.org/10.1145%2F170035.170072). ISBN\u00a0978-0897915922.\nS2CID\u00a0490415 (https://api.semanticscholar.org/CorpusID:49041\n5).\n81. Urbanowicz, Ryan J.; Moore, Jason H. (22 September 2009).\n\"Learning Classi\ufb01er Systems: A Complete Introduction, Review,\nand Roadmap\" (https://doi.org/10.1155%2F2009%2F736398).\nJournal of Arti\ufb01cial Evolution and Applications. 2009: 1\u201325.\ndoi:10.1155/2009/736398 (https://doi.org/10.1155%2F2009%2F7\n36398). ISSN\u00a01687-6229 (https://search.worldcat.org/issn/1687-6\n229).\n82. Plotkin G.D.", "mimetype": "text/plain", "start_char_idx": 14839, "end_char_idx": 17341, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8a738ca9-b6d5-47f6-b9af-5b2bec90990b": {"__data__": {"id_": "8a738ca9-b6d5-47f6-b9af-5b2bec90990b", "embedding": null, "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7389587-1026-44fc-9df5-07766d354257", "node_type": "4", "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b539952f4c6477cdba6b523a7e771f56f87f06cdc2145e9b9e4ccf194906d9dd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5d2ceeb5-c6d7-4864-91a1-106f421bcdf5", "node_type": "1", "metadata": {"page_label": "8", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "f1d4acf598d4282ec22637d67df90aa7112bbe800c2568e94d5bd78b3b185275", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "ISBN\u00a0978-0897915922.\nS2CID\u00a0490415 (https://api.semanticscholar.org/CorpusID:49041\n5).\n81. Urbanowicz, Ryan J.; Moore, Jason H. (22 September 2009).\n\"Learning Classi\ufb01er Systems: A Complete Introduction, Review,\nand Roadmap\" (https://doi.org/10.1155%2F2009%2F736398).\nJournal of Arti\ufb01cial Evolution and Applications. 2009: 1\u201325.\ndoi:10.1155/2009/736398 (https://doi.org/10.1155%2F2009%2F7\n36398). ISSN\u00a01687-6229 (https://search.worldcat.org/issn/1687-6\n229).\n82. Plotkin G.D. Automatic Methods of Inductive Inference (https://w\nww.era.lib.ed.ac.uk/bitstream/handle/1842/6656/Plotkin1972.pdf;\nsequence=1) Archived (https://web.archive.org/web/2017122205\n1034/https://www.era.lib.ed.ac.uk/bitstream/handle/1842/6656/Pl\notkin1972.pdf;sequence=1) 22 December 2017 at the Wayback\nMachine, PhD thesis, University of Edinburgh, 1970.\n83. Shapiro, Ehud Y. Inductive inference of theories from facts (http://\nftp.cs.yale.edu/publications/techreports/tr192.pdf) Archived (http\ns://web.archive.org/web/20210821071609/http://ftp.cs.yale.edu/p\nublications/techreports/tr192.pdf) 21 August 2021 at the\nWayback Machine, Research Report 192, Yale University,\nDepartment of Computer Science, 1981. Reprinted in J.-L.\nLassez, G. Plotkin (Eds.), Computational Logic, The MIT Press,\nCambridge, MA, 1991, pp. 199\u2013254.\n84. Shapiro, Ehud Y. (1983). Algorithmic program debugging.\nCambridge, Mass: MIT Press. ISBN\u00a00-262-19218-7\n85. Shapiro, Ehud Y. \"The model inference system (http://dl.acm.org/\ncitation.cfm?id=1623364) Archived (https://web.archive.org/web/\n20230406011006/https://dl.acm.org/citation.cfm?id=1623364)\n2023-04-06 at the Wayback Machine.\" Proceedings of the 7th\ninternational joint conference on Arti\ufb01cial intelligence-Volume 2.\nMorgan Kaufmann Publishers Inc., 1981.\n86. Burkov, Andriy (2019). The hundred-page machine learning\nbook. Polen: Andriy Burkov. ISBN\u00a0978-1-9995795-0-0.\n87. Russell, Stuart J.; Norvig, Peter (2021). Arti\ufb01cial intelligence: a\nmodern approach. Pearson series in arti\ufb01cial intelligence\n(Fourth\u00a0ed.). Hoboken: Pearson. ISBN\u00a0978-0-13-461099-3.\n6/7/25, 7:32 PM Machine learning - Wikipedia\nhttps://en.wikipedia.org/wiki/Machine_learning 8/11", "mimetype": "text/plain", "start_char_idx": 16868, "end_char_idx": 19022, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d9777523-70a6-4d40-a26d-75900de6cf15": {"__data__": {"id_": "d9777523-70a6-4d40-a26d-75900de6cf15", "embedding": null, "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6df1775-f7b3-4155-9727-85ef5a94fe6e", "node_type": "4", "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b2a1e187d9b4fd2c2204136e0dc53be4582ea9ce6c88dafcd0af7e7013d31c7f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fdd290a3-858c-460f-bc80-37181a1e0641", "node_type": "1", "metadata": {}, "hash": "a3c45d28db71439327b9c55463584ffc22eac8688f26cadf43d3ac9dbfc98dc9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "88. Honglak Lee, Roger Grosse, Rajesh Ranganath, Andrew Y. Ng.\n\"Convolutional Deep Belief Networks for Scalable Unsupervised\nLearning of Hierarchical Representations (http://citeseerx.ist.psu.\nedu/viewdoc/download?doi=10.1.1.149.802&rep=rep1&type=pdf)\nArchived (https://web.archive.org/web/20171018182235/http://cit\neseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.149.802&rep=r\nep1&type=pdf) 2017-10-18 at the Wayback Machine\"\nProceedings of the 26th Annual International Conference on\nMachine Learning, 2009.\n89. \"RandomForestRegressor\" (https://scikit-learn.org/stable/module\ns/generated/sklearn.ensemble.RandomForestRegressor.html).\nscikit-learn. Retrieved 12 February 2025.\n90. \"What Is Random Forest? | IBM\" (https://www.ibm.com/think/topi\ncs/random-forest). www.ibm.com. 20 October 2021. Retrieved\n12 February 2025.\n91. Cortes, Corinna; Vapnik, Vladimir N. (1995). \"Support-vector\nnetworks\" (https://doi.org/10.1007%2FBF00994018). Machine\nLearning. 20 (3): 273\u2013297. doi:10.1007/BF00994018 (https://doi.\norg/10.1007%2FBF00994018).\n92. Stevenson, Christopher. \"Tutorial: Polynomial Regression in\nExcel\" (https://facultystaff.richmond.edu/~cstevens/301/Excel4.ht\nml). facultystaff.richmond.edu. Archived (https://web.archive.org/\nweb/20130602200850/https://facultystaff.richmond.edu/~csteven\ns/301/Excel4.html) from the original on 2 June 2013. Retrieved\n22 January 2017.\n93. Wanta, Damian; Smolik, Aleksander; Smolik, Waldemar T.;\nMidura, Mateusz; Wr\u00f3blewski, Przemys\u0142aw (2025). \"Image\nreconstruction using machine-learned pseudoinverse in electrical\ncapacitance tomography\" (https://doi.org/10.1016%2Fj.engappai.\n2024.109888). Engineering Applications of Arti\ufb01cial Intelligence.\n142: 109888. doi:10.1016/j.engappai.2024.109888 (https://doi.or\ng/10.1016%2Fj.engappai.2024.109888).\n94. The documentation for scikit-learn also has similar examples (htt\np://scikit-learn.org/stable/auto_examples/gaussian_process/plot_\ncompare_gpr_krr.html) Archived (https://web.archive.org/web/20\n221102184805/https://scikit-learn.org/stable/auto_examples/gaus\nsian_process/plot_compare_gpr_krr.html) 2 November 2022 at\nthe Wayback Machine.\n95. Goldberg, David E.; Holland, John H. (1988). \"Genetic algorithms\nand machine learning\" (https://deepblue.lib.umich.edu/bitstream/\n2027.42/46947/1/10994_2005_Article_422926.pdf) (PDF).\nMachine Learning. 3 (2): 95\u201399. doi:10.1007/bf00113892 (https://\ndoi.org/10.1007%2Fbf00113892). S2CID\u00a035506513 (https://api.s\nemanticscholar.org/CorpusID:35506513). Archived (https://web.a\nrchive.org/web/20110516025803/http://deepblue.lib.umich.edu/bi\ntstream/2027.42/46947/1/10994_2005_Article_422926.pdf)\n(PDF) from the original on 16 May 2011. Retrieved 3 September\n2019.\n96. Michie, D.; Spiegelhalter, D. J.; Taylor, C. C. (1994). \"Machine\nLearning, Neural and Statistical Classi\ufb01cation\".", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2806, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fdd290a3-858c-460f-bc80-37181a1e0641": {"__data__": {"id_": "fdd290a3-858c-460f-bc80-37181a1e0641", "embedding": null, "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6df1775-f7b3-4155-9727-85ef5a94fe6e", "node_type": "4", "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b2a1e187d9b4fd2c2204136e0dc53be4582ea9ce6c88dafcd0af7e7013d31c7f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d9777523-70a6-4d40-a26d-75900de6cf15", "node_type": "1", "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "d37af0a1228f7885c32ae68882de3926dcfa261642482ff74a686ebd452b387d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "32de2981-3bfd-416b-bf65-cda9858bac22", "node_type": "1", "metadata": {}, "hash": "6226abb40c7dc2c0f825a21c9d518977ab63f2ca33f25665cd1be02aa2bdc3b2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Machine Learning. 3 (2): 95\u201399. doi:10.1007/bf00113892 (https://\ndoi.org/10.1007%2Fbf00113892). S2CID\u00a035506513 (https://api.s\nemanticscholar.org/CorpusID:35506513). Archived (https://web.a\nrchive.org/web/20110516025803/http://deepblue.lib.umich.edu/bi\ntstream/2027.42/46947/1/10994_2005_Article_422926.pdf)\n(PDF) from the original on 16 May 2011. Retrieved 3 September\n2019.\n96. Michie, D.; Spiegelhalter, D. J.; Taylor, C. C. (1994). \"Machine\nLearning, Neural and Statistical Classi\ufb01cation\". Ellis Horwood\nSeries in Arti\ufb01cial Intelligence. Bibcode:1994mlns.book.....M (http\ns://ui.adsabs.harvard.edu/abs/1994mlns.book.....M).\n97. Zhang, Jun; Zhan, Zhi-hui; Lin, Ying; Chen, Ni; Gong, Yue-jiao;\nZhong, Jing-hui; Chung, Henry S.H.; Li, Yun; Shi, Yu-hui (2011).\n\"Evolutionary Computation Meets Machine Learning: A Survey\".\nIEEE Computational Intelligence Magazine. 6 (4): 68\u201375.\ndoi:10.1109/mci.2011.942584 (https://doi.org/10.1109%2Fmci.20\n11.942584). S2CID\u00a06760276 (https://api.semanticscholar.org/Cor\npusID:6760276).\n98. Verbert, K.; Babu\u0161ka, R.; De Schutter, B. (1 April 2017).\n\"Bayesian and Dempster\u2013Shafer reasoning for knowledge-based\nfault diagnosis\u2013A comparative study\" (https://www.sciencedirect.\ncom/science/article/abs/pii/S0952197617300118). Engineering\nApplications of Arti\ufb01cial Intelligence. 60: 136\u2013150.\ndoi:10.1016/j.engappai.2017.01.011 (https://doi.org/10.1016%2F\nj.engappai.2017.01.011). ISSN\u00a00952-1976 (https://search.worldc\nat.org/issn/0952-1976).\n99. Urbanowicz, Ryan J.; Moore, Jason H. (22 September 2009).\n\"Learning Classi\ufb01er Systems: A Complete Introduction, Review,\nand Roadmap\" (https://doi.org/10.1155%2F2009%2F736398).\nJournal of Arti\ufb01cial Evolution and Applications. 2009: 1\u201325.\ndoi:10.1155/2009/736398 (https://doi.org/10.1155%2F2009%2F7\n36398). ISSN\u00a01687-6229 (https://search.worldcat.org/issn/1687-6\n229).\n100. Zhang, C. and Zhang, S., 2002. Association rule mining: models\nand algorithms (https://books.google.com/books?id=VqSoCAAA\nQBAJ). Springer-Verlag.\n101. De Castro, Leandro Nunes, and Jonathan Timmis. Arti\ufb01cial\nimmune systems: a new computational intelligence approach (htt\nps://books.google.com/books?id=aMFP7p8DtaQC&q=%22rule-b\nased%22). Springer Science & Business Media, 2002.\n102. \"Federated Learning: Collaborative Machine Learning without\nCentralized Training Data\" (http://ai.googleblog.com/2017/04/fed\nerated-learning-collaborative.html). Google AI Blog. 6 April 2017.\nArchived (https://web.archive.org/web/20190607054623/https://a\ni.googleblog.com/2017/04/federated-learning-collaborative.html)\nfrom the original on 7 June 2019. Retrieved 8 June 2019.\n103. Machine learning is included in the CFA Curriculum (discussion\nis top-down); see: Kathleen DeRose and Christophe Le Lanno\n(2020).", "mimetype": "text/plain", "start_char_idx": 2314, "end_char_idx": 5051, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "32de2981-3bfd-416b-bf65-cda9858bac22": {"__data__": {"id_": "32de2981-3bfd-416b-bf65-cda9858bac22", "embedding": null, "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6df1775-f7b3-4155-9727-85ef5a94fe6e", "node_type": "4", "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b2a1e187d9b4fd2c2204136e0dc53be4582ea9ce6c88dafcd0af7e7013d31c7f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fdd290a3-858c-460f-bc80-37181a1e0641", "node_type": "1", "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "6782bc6bc3e536fdd1494b5f8e34ae6a752e63e4590166cc5333846e53578501", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5ef47187-7c0a-4d19-a5db-d902f4b9117d", "node_type": "1", "metadata": {}, "hash": "e4111b77adb8f480c11eff3394decf6e66c9340c0bfef827747776a15dee6a17", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Springer Science & Business Media, 2002.\n102. \"Federated Learning: Collaborative Machine Learning without\nCentralized Training Data\" (http://ai.googleblog.com/2017/04/fed\nerated-learning-collaborative.html). Google AI Blog. 6 April 2017.\nArchived (https://web.archive.org/web/20190607054623/https://a\ni.googleblog.com/2017/04/federated-learning-collaborative.html)\nfrom the original on 7 June 2019. Retrieved 8 June 2019.\n103. Machine learning is included in the CFA Curriculum (discussion\nis top-down); see: Kathleen DeRose and Christophe Le Lanno\n(2020). \"Machine Learning\" (https://www.cfainstitute.org/-/media/\ndocuments/study-session/2020-l2-ss3.ashx) Archived (https://we\nb.archive.org/web/20200113085425/https://www.cfainstitute.org/\n-/media/documents/study-session/2020-l2-ss3.ashx) 13 January\n2020 at the Wayback Machine.\n104. Ivanenko, Mikhail; Smolik, Waldemar T.; Wanta, Damian; Midura,\nMateusz; Wr\u00f3blewski, Przemys\u0142aw; Hou, Xiaohan; Yan,\nXiaoheng (2023). \"Image Reconstruction Using Supervised\nLearning in Wearable Electrical Impedance Tomography of the\nThorax\" (https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1053812\n8). Sensors. 23 (18): 7774. Bibcode:2023Senso..23.7774I (http\ns://ui.adsabs.harvard.edu/abs/2023Senso..23.7774I).\ndoi:10.3390/s23187774 (https://doi.org/10.3390%2Fs23187774).\nPMC\u00a010538128 (https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1\n0538128). PMID\u00a037765831 (https://pubmed.ncbi.nlm.nih.gov/377\n65831).\n105. \"BelKor Home Page\" (https://web.archive.org/web/201511100627\n42/http://www2.research.att.com/~volinsky/net\ufb02ix/)\nresearch.att.com\n106. \"The Net\ufb02ix Tech Blog: Net\ufb02ix Recommendations: Beyond the 5\nstars (Part 1)\" (https://web.archive.org/web/20160531002916/htt\np://techblog.net\ufb02ix.com/2012/04/net\ufb02ix-recommendations-beyon\nd-5-stars.html). 6 April 2012. Archived from the original (http://tec\nhblog.net\ufb02ix.com/2012/04/net\ufb02ix-recommendations-beyond-5-sta\nrs.html) on 31 May 2016. Retrieved 8 August 2015.\n107. Scott Patterson (13 July 2010). \"Letting the Machines Decide\" (ht\ntps://www.wsj.com/articles/SB1000142405274870383460457536\n5310813948080). The Wall Street Journal. Archived (https://web.\narchive.org/web/20180624151019/https://www.wsj.com/articles/S\nB10001424052748703834604575365310813948080) from the\noriginal on 24 June 2018. Retrieved 24 June 2018.\n108. Vinod Khosla (10 January 2012). \"Do We Need Doctors or\nAlgorithms?\" (https://techcrunch.com/2012/01/10/doctors-or-algo\nrithms/). Tech Crunch. Archived (https://web.archive.org/web/201\n80618175811/https://techcrunch.com/2012/01/10/doctors-or-algo\nrithms/) from the original on 18 June 2018. Retrieved 20 October\n2016.\n109. When A Machine Learning Algorithm Studied Fine Art Paintings,\nIt Saw Things Art Historians Had Never Noticed (https://medium.", "mimetype": "text/plain", "start_char_idx": 4495, "end_char_idx": 7244, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5ef47187-7c0a-4d19-a5db-d902f4b9117d": {"__data__": {"id_": "5ef47187-7c0a-4d19-a5db-d902f4b9117d", "embedding": null, "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6df1775-f7b3-4155-9727-85ef5a94fe6e", "node_type": "4", "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b2a1e187d9b4fd2c2204136e0dc53be4582ea9ce6c88dafcd0af7e7013d31c7f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "32de2981-3bfd-416b-bf65-cda9858bac22", "node_type": "1", "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "87248260de2972fca58dd9bc3d9950ca48c28723da855de9667c38148a01255d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "752056c3-b097-45de-888d-b643f5a1334d", "node_type": "1", "metadata": {}, "hash": "894763c4a2028eac725f02347e49ff47b4bdf28642fdb7ee8109b4b1f7bc4e17", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Retrieved 24 June 2018.\n108. Vinod Khosla (10 January 2012). \"Do We Need Doctors or\nAlgorithms?\" (https://techcrunch.com/2012/01/10/doctors-or-algo\nrithms/). Tech Crunch. Archived (https://web.archive.org/web/201\n80618175811/https://techcrunch.com/2012/01/10/doctors-or-algo\nrithms/) from the original on 18 June 2018. Retrieved 20 October\n2016.\n109. When A Machine Learning Algorithm Studied Fine Art Paintings,\nIt Saw Things Art Historians Had Never Noticed (https://medium.\ncom/the-physics-arxiv-blog/when-a-machine-learning-algorithm-s\ntudied-\ufb01ne-art-paintings-it-saw-things-art-historians-had-never-b8\ne4e7bf7d3e) Archived (https://web.archive.org/web/2016060407\n2143/https://medium.com/the-physics-arxiv-blog/when-a-machin\ne-learning-algorithm-studied-\ufb01ne-art-paintings-it-saw-things-art-hi\nstorians-had-never-b8e4e7bf7d3e) 4 June 2016 at the Wayback\nMachine, The Physics at ArXiv blog\n110. Vincent, James (10 April 2019). \"The \ufb01rst AI-generated textbook\nshows what robot writers are actually good at\" (https://www.theve\nrge.com/2019/4/10/18304558/ai-writing-academic-research-book\n-springer-nature-arti\ufb01cial-intelligence). The Verge. Archived (http\ns://web.archive.org/web/20190505200409/https://www.theverge.\ncom/2019/4/10/18304558/ai-writing-academic-research-book-spr\ninger-nature-arti\ufb01cial-intelligence) from the original on 5 May\n2019. Retrieved 5 May 2019.\n111. Vaishya, Raju; Javaid, Mohd; Khan, Ibrahim Haleem; Haleem,\nAbid (1 July 2020). \"Arti\ufb01cial Intelligence (AI) applications for\nCOVID-19 pandemic\" (https://www.ncbi.nlm.nih.gov/pmc/articles/\nPMC7195043). Diabetes & Metabolic Syndrome: Clinical\nResearch & Reviews. 14 (4): 337\u2013339.\ndoi:10.1016/j.dsx.2020.04.012 (https://doi.org/10.1016%2Fj.dsx.\n2020.04.012). PMC\u00a07195043 (https://www.ncbi.nlm.nih.gov/pmc/\narticles/PMC7195043). PMID\u00a032305024 (https://pubmed.ncbi.nl\nm.nih.gov/32305024).\n112. Rezapouraghdam, Hamed; Akhshik, Arash; Ramkissoon,\nHaywantee (10 March 2021). \"Application of machine learning to\npredict visitors' green behavior in marine protected areas:\nevidence from Cyprus\" (https://doi.org/10.1080%2F09669582.20\n21.1887878). Journal of Sustainable Tourism. 31 (11): 2479\u2013\n2505. doi:10.1080/09669582.2021.1887878 (https://doi.org/10.10\n80%2F09669582.2021.1887878). hdl:10037/24073 (https://hdl.h\nandle.net/10037%2F24073).\n113. Dey, Somdip; Singh, Amit Kumar; Wang, Xiaohang; McDonald-\nMaier, Klaus (15 June 2020). \"User Interaction Aware\nReinforcement Learning for Power and Thermal Ef\ufb01ciency of\nCPU-GPU Mobile MPSoCs\" (https://ieeexplore.ieee.org/docume\nnt/9116294). 2020 Design, Automation & Test in Europe\nConference & Exhibition (DATE) (http://repository.essex.ac.uk/27\n546/1/User%20Interaction%20Aware%20Reinforcement%20Lea\nrning.pdf) (PDF). pp.\u00a01728\u20131733.", "mimetype": "text/plain", "start_char_idx": 6768, "end_char_idx": 9515, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "752056c3-b097-45de-888d-b643f5a1334d": {"__data__": {"id_": "752056c3-b097-45de-888d-b643f5a1334d", "embedding": null, "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6df1775-f7b3-4155-9727-85ef5a94fe6e", "node_type": "4", "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b2a1e187d9b4fd2c2204136e0dc53be4582ea9ce6c88dafcd0af7e7013d31c7f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5ef47187-7c0a-4d19-a5db-d902f4b9117d", "node_type": "1", "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "8b4549306257c93943a584ba0e5bdb1b9cbb4dbc61ed7ce094e28c9dc078f4f9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "522dca29-d9a4-42f0-8b09-52ed9c2805e6", "node_type": "1", "metadata": {}, "hash": "681d4ebbc755d962bfb0a868d2821766f96eb2cb2306a2e85a6ee043fb2d2115", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "hdl:10037/24073 (https://hdl.h\nandle.net/10037%2F24073).\n113. Dey, Somdip; Singh, Amit Kumar; Wang, Xiaohang; McDonald-\nMaier, Klaus (15 June 2020). \"User Interaction Aware\nReinforcement Learning for Power and Thermal Ef\ufb01ciency of\nCPU-GPU Mobile MPSoCs\" (https://ieeexplore.ieee.org/docume\nnt/9116294). 2020 Design, Automation & Test in Europe\nConference & Exhibition (DATE) (http://repository.essex.ac.uk/27\n546/1/User%20Interaction%20Aware%20Reinforcement%20Lea\nrning.pdf) (PDF). pp.\u00a01728\u20131733.\ndoi:10.23919/DATE48585.2020.9116294 (https://doi.org/10.2391\n9%2FDATE48585.2020.9116294). ISBN\u00a0978-3-9819263-4-7.\nS2CID\u00a0219858480 (https://api.semanticscholar.org/CorpusID:219\n858480). Archived (https://web.archive.org/web/2021121319252\n6/https://ieeexplore.ieee.org/document/9116294/) from the\noriginal on 13 December 2021. Retrieved 20 January 2022.\n114. Quested, Tony. \"Smartphones get smarter with Essex innovation\"\n(https://www.businessweekly.co.uk/news/academia-research/sm\nartphones-get-smarter-essex-innovation). Business Weekly.\nArchived (https://web.archive.org/web/20210624200126/https://w\nww.businessweekly.co.uk/news/academia-research/smartphones\n-get-smarter-essex-innovation) from the original on 24 June\n2021. Retrieved 17 June 2021.\n115. Williams, Rhiannon (21 July 2020). \"Future smartphones 'will\nprolong their own battery life by monitoring owners' behaviour'\"\n(https://inews.co.uk/news/technology/future-smartphones-prolon\ng-battery-life-monitoring-behaviour-558689). i. Archived (https://w\neb.archive.org/web/20210624201153/https://inews.co.uk/news/te\nchnology/future-smartphones-prolong-battery-life-monitoring-beh\naviour-558689) from the original on 24 June 2021. Retrieved\n17 June 2021.\n116. Rasekhschaffe, Keywan Christian; Jones, Robert C. (1 July\n2019). \"Machine Learning for Stock Selection\" (https://www.tandf\nonline.com/doi/full/10.1080/0015198X.2019.1596678). Financial\nAnalysts Journal. 75 (3): 70\u201388.\ndoi:10.1080/0015198X.2019.1596678 (https://doi.org/10.1080%2\nF0015198X.2019.1596678). ISSN\u00a00015-198X (https://search.wor\nldcat.org/issn/0015-198X). S2CID\u00a0108312507 (https://api.semant\nicscholar.org/CorpusID:108312507). Archived (https://web.archiv\ne.org/web/20231126160605/https://www.tandfonline.com/doi/full/\n10.1080/0015198X.2019.1596678) from the original on 26\nNovember 2023. Retrieved 26 November 2023.\n117. Chung, Yunsie; Green, William H. (2024). \"Machine learning from\nquantum chemistry to predict experimental solvent effects on\nreaction rates\" (https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1\n0866337). Chemical Science. 15 (7): 2410\u20132424.\ndoi:10.1039/D3SC05353A (https://doi.org/10.1039%2FD3SC053\n53A). ISSN\u00a02041-6520 (https://search.worldcat.org/issn/2041-65\n20). PMC\u00a010866337 (https://www.ncbi.nlm.nih.gov/pmc/articles/P\nMC10866337).", "mimetype": "text/plain", "start_char_idx": 9019, "end_char_idx": 11797, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "522dca29-d9a4-42f0-8b09-52ed9c2805e6": {"__data__": {"id_": "522dca29-d9a4-42f0-8b09-52ed9c2805e6", "embedding": null, "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6df1775-f7b3-4155-9727-85ef5a94fe6e", "node_type": "4", "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b2a1e187d9b4fd2c2204136e0dc53be4582ea9ce6c88dafcd0af7e7013d31c7f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "752056c3-b097-45de-888d-b643f5a1334d", "node_type": "1", "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "953fd716d6e111b3bb74440d33ddd86390c24332ac4dd89bb05c79f37c446763", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "97d68ab7-cf8d-43ac-bb13-933a04db0c4e", "node_type": "1", "metadata": {}, "hash": "2e0a4aa468a6de49d02019ea3b8067f927c3e12b356b6b269e8a20584dd8ef24", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Retrieved 26 November 2023.\n117. Chung, Yunsie; Green, William H. (2024). \"Machine learning from\nquantum chemistry to predict experimental solvent effects on\nreaction rates\" (https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1\n0866337). Chemical Science. 15 (7): 2410\u20132424.\ndoi:10.1039/D3SC05353A (https://doi.org/10.1039%2FD3SC053\n53A). ISSN\u00a02041-6520 (https://search.worldcat.org/issn/2041-65\n20). PMC\u00a010866337 (https://www.ncbi.nlm.nih.gov/pmc/articles/P\nMC10866337). PMID\u00a038362410 (https://pubmed.ncbi.nlm.nih.go\nv/38362410).\n118. Sun, Yuran; Huang, Shih-Kai; Zhao, Xilei (1 February 2024).\n\"Predicting Hurricane Evacuation Decisions with Interpretable\nMachine Learning Methods\" (https://doi.org/10.1007%2Fs13753-\n024-00541-1). International Journal of Disaster Risk Science. 15\n(1): 134\u2013148. arXiv:2303.06557 (https://arxiv.org/abs/2303.0655\n7). Bibcode:2024IJDRS..15..134S (https://ui.adsabs.harvard.edu/\nabs/2024IJDRS..15..134S). doi:10.1007/s13753-024-00541-1 (ht\ntps://doi.org/10.1007%2Fs13753-024-00541-1). ISSN\u00a02192-6395\n(https://search.worldcat.org/issn/2192-6395).\n119. Sun, Yuran; Zhao, Xilei; Lovreglio, Ruggiero; Kuligowski, Erica (1\nJanuary 2024), Naser, M. Z. (ed.), \"8 - AI for large-scale\nevacuation modeling: promises and challenges\" (https://www.sci\nencedirect.com/science/article/pii/B9780128240731000149),\nInterpretable Machine Learning for the Analysis, Design,\nAssessment, and Informed Decision Making for Civil\nInfrastructure, Woodhead Publishing Series in Civil and\nStructural Engineering, Woodhead Publishing, pp.\u00a0185\u2013204,\nISBN\u00a0978-0-12-824073-1, archived (https://web.archive.org/web/\n20240519121547/https://www.sciencedirect.com/science/article/\nabs/pii/B9780128240731000149) from the original on 19 May\n2024, retrieved 19 May 2024\n120. Xu, Ningzhe; Lovreglio, Ruggiero; Kuligowski, Erica D.; Cova,\nThomas J.; Nilsson, Daniel; Zhao, Xilei (1 March 2023).\n\"Predicting and Assessing Wild\ufb01re Evacuation Decision-Making\nUsing Machine Learning: Findings from the 2019 Kincade Fire\"\n(https://doi.org/10.1007/s10694-023-01363-1). Fire Technology.\n59 (2): 793\u2013825. doi:10.1007/s10694-023-01363-1 (https://doi.or\ng/10.1007%2Fs10694-023-01363-1). ISSN\u00a01572-8099 (https://se\narch.worldcat.org/issn/1572-8099). Archived (https://web.archive.\norg/web/20240519121534/https://link.springer.com/article/10.100\n7/s10694-023-01363-1) from the original on 19 May 2024.\nRetrieved 19 May 2024.\n121. Wang, Ke; Shi, Xiupeng; Goh, Algena Pei Xuan; Qian, Shunzhi\n(1 June 2019). \"A machine learning based study on pedestrian\nmovement dynamics under emergency evacuation\" (https://www.\nsciencedirect.com/science/article/pii/S037971121830376X). Fire\nSafety Journal. 106: 163\u2013176. Bibcode:2019FirSJ.106..163W (ht\ntps://ui.adsabs.harvard.edu/abs/2019FirSJ.106..163W).", "mimetype": "text/plain", "start_char_idx": 11332, "end_char_idx": 14095, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "97d68ab7-cf8d-43ac-bb13-933a04db0c4e": {"__data__": {"id_": "97d68ab7-cf8d-43ac-bb13-933a04db0c4e", "embedding": null, "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6df1775-f7b3-4155-9727-85ef5a94fe6e", "node_type": "4", "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b2a1e187d9b4fd2c2204136e0dc53be4582ea9ce6c88dafcd0af7e7013d31c7f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "522dca29-d9a4-42f0-8b09-52ed9c2805e6", "node_type": "1", "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "9681edefbcc2b28cc9fd67cb7d601c808dca6ee8c7a372bf1c35ff2b53fbf34b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0a3493e0-3b1e-4000-9a2f-8db92edb4bdd", "node_type": "1", "metadata": {}, "hash": "f3cb6adb7ade411ff46196b5d909a228e113e4b1bbdd204191c54f42c83a4ed0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Archived (https://web.archive.\norg/web/20240519121534/https://link.springer.com/article/10.100\n7/s10694-023-01363-1) from the original on 19 May 2024.\nRetrieved 19 May 2024.\n121. Wang, Ke; Shi, Xiupeng; Goh, Algena Pei Xuan; Qian, Shunzhi\n(1 June 2019). \"A machine learning based study on pedestrian\nmovement dynamics under emergency evacuation\" (https://www.\nsciencedirect.com/science/article/pii/S037971121830376X). Fire\nSafety Journal. 106: 163\u2013176. Bibcode:2019FirSJ.106..163W (ht\ntps://ui.adsabs.harvard.edu/abs/2019FirSJ.106..163W).\ndoi:10.1016/j.\ufb01resaf.2019.04.008 (https://doi.org/10.1016%2Fj.\ufb01r\nesaf.2019.04.008). hdl:10356/143390 (https://hdl.handle.net/103\n56%2F143390). ISSN\u00a00379-7112 (https://search.worldcat.org/iss\nn/0379-7112). Archived (https://web.archive.org/web/202405191\n21539/https://www.sciencedirect.com/science/article/abs/pii/S037\n971121830376X) from the original on 19 May 2024. Retrieved\n19 May 2024.\n122. Zhao, Xilei; Lovreglio, Ruggiero; Nilsson, Daniel (1 May 2020).\n\"Modelling and interpreting pre-evacuation decision-making\nusing machine learning\" (https://www.sciencedirect.com/science/\narticle/pii/S0926580519313184). Automation in Construction.\n113: 103140. doi:10.1016/j.autcon.2020.103140 (https://doi.org/1\n0.1016%2Fj.autcon.2020.103140). hdl:10179/17315 (https://hdl.h\nandle.net/10179%2F17315). ISSN\u00a00926-5805 (https://search.wor\nldcat.org/issn/0926-5805). Archived (https://web.archive.org/web/\n20240519121548/https://www.sciencedirect.com/science/article/\nabs/pii/S0926580519313184) from the original on 19 May 2024.\nRetrieved 19 May 2024.\n123. Phoon, Kok-Kwang; Zhang, Wengang (2 January 2023). \"Future\nof machine learning in geotechnics\" (https://www.tandfonline.co\nm/doi/full/10.1080/17499518.2022.2087884). Georisk:\nAssessment and Management of Risk for Engineered Systems\nand Geohazards. 17 (1): 7\u201322. Bibcode:2023GAMRE..17....7P (h\nttps://ui.adsabs.harvard.edu/abs/2023GAMRE..17....7P).\ndoi:10.1080/17499518.2022.2087884 (https://doi.org/10.1080%2\nF17499518.2022.2087884). ISSN\u00a01749-9518 (https://search.worl\ndcat.org/issn/1749-9518).\n124. \"Why Machine Learning Models Often Fail to Learn: QuickTake\nQ&A\" (https://web.archive.org/web/20170320225010/https://ww\nw.bloomberg.com/news/articles/2016-11-10/why-machine-learnin\ng-models-often-fail-to-learn-quicktake-q-a). Bloomberg.com. 10\nNovember 2016. Archived from the original (https://www.bloombe\nrg.com/news/articles/2016-11-10/why-machine-learning-models-\noften-fail-to-learn-quicktake-q-a) on 20 March 2017. Retrieved\n10 April 2017.\n125. \"The First Wave of Corporate AI Is Doomed to Fail\" (https://hbr.or\ng/2017/04/the-\ufb01rst-wave-of-corporate-ai-is-doomed-to-fail).", "mimetype": "text/plain", "start_char_idx": 13557, "end_char_idx": 16222, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0a3493e0-3b1e-4000-9a2f-8db92edb4bdd": {"__data__": {"id_": "0a3493e0-3b1e-4000-9a2f-8db92edb4bdd", "embedding": null, "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6df1775-f7b3-4155-9727-85ef5a94fe6e", "node_type": "4", "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b2a1e187d9b4fd2c2204136e0dc53be4582ea9ce6c88dafcd0af7e7013d31c7f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "97d68ab7-cf8d-43ac-bb13-933a04db0c4e", "node_type": "1", "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "c1adf5387ac0a3c44ec109cecee84987edff325f46b2e8c58aa0456571764f99", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5ee9453f-8e37-4ce7-9fe6-bf30c947adce", "node_type": "1", "metadata": {}, "hash": "a549c6147afe88ed1039309feabf2ab022deb8e99be6e094de5ced3917667dc2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "124. \"Why Machine Learning Models Often Fail to Learn: QuickTake\nQ&A\" (https://web.archive.org/web/20170320225010/https://ww\nw.bloomberg.com/news/articles/2016-11-10/why-machine-learnin\ng-models-often-fail-to-learn-quicktake-q-a). Bloomberg.com. 10\nNovember 2016. Archived from the original (https://www.bloombe\nrg.com/news/articles/2016-11-10/why-machine-learning-models-\noften-fail-to-learn-quicktake-q-a) on 20 March 2017. Retrieved\n10 April 2017.\n125. \"The First Wave of Corporate AI Is Doomed to Fail\" (https://hbr.or\ng/2017/04/the-\ufb01rst-wave-of-corporate-ai-is-doomed-to-fail).\nHarvard Business Review. 18 April 2017. Archived (https://web.ar\nchive.org/web/20180821032004/https://hbr.org/2017/04/the-\ufb01rst-\nwave-of-corporate-ai-is-doomed-to-fail) from the original on 21\nAugust 2018. Retrieved 20 August 2018.\n126. \"Why the A.I. euphoria is doomed to fail\" (https://venturebeat.co\nm/2016/09/17/why-the-a-i-euphoria-is-doomed-to-fail/).\nVentureBeat. 18 September 2016. Archived (https://web.archive.\norg/web/20180819124138/https://venturebeat.com/2016/09/17/w\nhy-the-a-i-euphoria-is-doomed-to-fail/) from the original on 19\nAugust 2018. Retrieved 20 August 2018.\n127. \"9 Reasons why your machine learning project will fail\" (https://w\nww.kdnuggets.com/2018/07/why-machine-learning-project-fail.ht\nml). www.kdnuggets.com. Archived (https://web.archive.org/web/\n20180821031802/https://www.kdnuggets.com/2018/07/why-mac\nhine-learning-project-fail.html) from the original on 21 August\n2018. Retrieved 20 August 2018.\n128. Babuta, Alexander; Oswald, Marion; Rinik, Christine (2018).\nTransparency and Intelligibility (https://www.jstor.org/stable/resre\np37375.8) (Report). Royal United Services Institute (RUSI).\npp.\u00a017\u201322. Archived (https://web.archive.org/web/202312090029\n29/https://www.jstor.org/stable/resrep37375.8) from the original\non 9 December 2023. Retrieved 9 December 2023.\n129. \"Why Uber's self-driving car killed a pedestrian\" (https://www.eco\nnomist.com/the-economist-explains/2018/05/29/why-ubers-self-d\nriving-car-killed-a-pedestrian). The Economist. Archived (https://\nweb.archive.org/web/20180821031818/https://www.economist.co\nm/the-economist-explains/2018/05/29/why-ubers-self-driving-car-\nkilled-a-pedestrian) from the original on 21 August 2018.\nRetrieved 20 August 2018.\n130. \"IBM's Watson recommended 'unsafe and incorrect' cancer\ntreatments \u2013 STAT\" (https://www.statnews.com/2018/07/25/ibm-\nwatson-recommended-unsafe-incorrect-treatments/). STAT. 25\nJuly 2018. Archived (https://web.archive.org/web/201808210626\n16/https://www.statnews.com/2018/07/25/ibm-watson-recommen\nded-unsafe-incorrect-treatments/) from the original on 21 August\n2018. Retrieved 21 August 2018.\n131. Hernandez, Daniela; Greenwald, Ted (11 August 2018). \"IBM\nHas a Watson Dilemma\" (https://www.wsj.com/articles/ibm-bet-bil\nlions-that-watson-could-improve-cancer-treatment-it-hasnt-worke\nd-1533961147).", "mimetype": "text/plain", "start_char_idx": 15640, "end_char_idx": 18537, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5ee9453f-8e37-4ce7-9fe6-bf30c947adce": {"__data__": {"id_": "5ee9453f-8e37-4ce7-9fe6-bf30c947adce", "embedding": null, "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6df1775-f7b3-4155-9727-85ef5a94fe6e", "node_type": "4", "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b2a1e187d9b4fd2c2204136e0dc53be4582ea9ce6c88dafcd0af7e7013d31c7f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0a3493e0-3b1e-4000-9a2f-8db92edb4bdd", "node_type": "1", "metadata": {"page_label": "9", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "cf86160d47a8f7a33cd7b77241c4c50e87bbaee951f619a83095ec903b08afbb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "STAT. 25\nJuly 2018. Archived (https://web.archive.org/web/201808210626\n16/https://www.statnews.com/2018/07/25/ibm-watson-recommen\nded-unsafe-incorrect-treatments/) from the original on 21 August\n2018. Retrieved 21 August 2018.\n131. Hernandez, Daniela; Greenwald, Ted (11 August 2018). \"IBM\nHas a Watson Dilemma\" (https://www.wsj.com/articles/ibm-bet-bil\nlions-that-watson-could-improve-cancer-treatment-it-hasnt-worke\nd-1533961147). The Wall Street Journal. ISSN\u00a00099-9660 (http\ns://search.worldcat.org/issn/0099-9660). Archived (https://web.ar\nchive.org/web/20180821031906/https://www.wsj.com/articles/ibm\n-bet-billions-that-watson-could-improve-cancer-treatment-it-hasnt\n-worked-1533961147) from the original on 21 August 2018.\nRetrieved 21 August 2018.\n132. Allyn, Bobby (27 February 2023). \"How Microsoft's experiment in\narti\ufb01cial intelligence tech back\ufb01red\" (https://www.npr.org/2023/02/\n27/1159630243/how-microsofts-experiment-in-arti\ufb01cial-intelligenc\ne-tech-back\ufb01red). National Public Radio. Archived (https://web.ar\nchive.org/web/20231208234056/https://www.npr.org/2023/02/27/\n1159630243/how-microsofts-experiment-in-arti\ufb01cial-intelligence-t\nech-back\ufb01red) from the original on 8 December 2023. Retrieved\n8 December 2023.\n133. Reddy, Shivani M.; Patel, Sheila; Weyrich, Meghan; Fenton,\nJoshua; Viswanathan, Meera (2020). \"Comparison of a\ntraditional systematic review approach with review-of-reviews\nand semi-automation as strategies to update the evidence\" (http\ns://www.ncbi.nlm.nih.gov/pmc/articles/PMC7574591). Systematic\nReviews. 9 (1): 243. doi:10.1186/s13643-020-01450-2 (https://do\ni.org/10.1186%2Fs13643-020-01450-2). ISSN\u00a02046-4053 (http\ns://search.worldcat.org/issn/2046-4053). PMC\u00a07574591 (https://w\nww.ncbi.nlm.nih.gov/pmc/articles/PMC7574591).\nPMID\u00a033076975 (https://pubmed.ncbi.nlm.nih.gov/33076975).\n6/7/25, 7:32 PM Machine learning - Wikipedia\nhttps://en.wikipedia.org/wiki/Machine_learning 9/11", "mimetype": "text/plain", "start_char_idx": 18105, "end_char_idx": 20024, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a5be2e51-5414-43ff-aea8-f02386808984": {"__data__": {"id_": "a5be2e51-5414-43ff-aea8-f02386808984", "embedding": null, "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8da64739-fb32-4a71-81fb-87b44f924646", "node_type": "4", "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "c58f651354fc22e32da7c96a2c7830187f659d3e5a2d50781ebb976bbf2af2cb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1a245358-58d5-498d-925f-01a7e0468c6f", "node_type": "1", "metadata": {}, "hash": "64e491e1eb89ac5ccbb3384d829eaf144b7be95a130d0afa10bb7bc3ba75b34d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "134. Rudin, Cynthia (2019). \"Stop explaining black box machine\nlearning models for high stakes decisions and use interpretable\nmodels instead\" (https://www.ncbi.nlm.nih.gov/pmc/articles/PMC\n9122117). Nature Machine Intelligence. 1 (5): 206\u2013215.\ndoi:10.1038/s42256-019-0048-x (https://doi.org/10.1038%2Fs42\n256-019-0048-x). PMC\u00a09122117 (https://www.ncbi.nlm.nih.gov/p\nmc/articles/PMC9122117). PMID\u00a035603010 (https://pubmed.ncbi.\nnlm.nih.gov/35603010).\n135. Hu, Tongxi; Zhang, Xuesong; Bohrer, Gil; Liu, Yanlan; Zhou,\nYuyu; Martin, Jay; LI, Yang; Zhao, Kaiguang (2023). \"Crop yield\nprediction via explainable AI and interpretable machine learning:\nDangers of black box models for evaluating climate change\nimpacts on crop yield\" (https://doi.org/10.1016%2Fj.agrformet.20\n23.109458). Agricultural and Forest Meteorology. 336: 109458.\ndoi:10.1016/j.agrformet.2023.109458 (https://doi.org/10.1016%2\nFj.agrformet.2023.109458). S2CID\u00a0258552400 (https://api.seman\nticscholar.org/CorpusID:258552400).\n136. Domingos 2015, Chapter 6, Chapter 7.\n137. Domingos 2015, p.\u00a0286.\n138. \"Single pixel change fools AI programs\" (https://www.bbc.com/ne\nws/technology-41845878). BBC News. 3 November 2017.\nArchived (https://web.archive.org/web/20180322011306/http://w\nww.bbc.com/news/technology-41845878) from the original on 22\nMarch 2018. Retrieved 12 March 2018.\n139. \"AI Has a Hallucination Problem That's Proving Tough to Fix\" (htt\nps://www.wired.com/story/ai-has-a-hallucination-problem-thats-pr\noving-tough-to-\ufb01x/). WIRED. 2018. Archived (https://web.archive.\norg/web/20180312024533/https://www.wired.com/story/ai-has-a-\nhallucination-problem-thats-proving-tough-to-\ufb01x/) from the\noriginal on 12 March 2018. Retrieved 12 March 2018.\n140. Madry, A.; Makelov, A.; Schmidt, L.; Tsipras, D.; Vladu, A. (4\nSeptember 2019). \"Towards deep learning models resistant to\nadversarial attacks\". arXiv:1706.06083 (https://arxiv.org/abs/170\n6.06083) [stat.ML (https://arxiv.org/archive/stat.ML)].\n141. \"Adversarial Machine Learning \u2013 CLTC UC Berkeley Center for\nLong-Term Cybersecurity\" (https://cltc.berkeley.edu/aml/). CLTC.\nArchived (https://web.archive.org/web/20220517045352/https://cl\ntc.berkeley.edu/aml/) from the original on 17 May 2022.\nRetrieved 25 May 2022.\n142. \"Machine-learning models vulnerable to undetectable backdoors\"\n(https://www.theregister.com/2022/04/21/machine_learning_mod\nels_backdoors/). The Register. Archived (https://web.archive.org/\nweb/20220513171215/https://www.theregister.com/2022/04/21/m\nachine_learning_models_backdoors/) from the original on 13\nMay 2022. Retrieved 13 May 2022.\n143. \"Undetectable Backdoors Plantable In Any Machine-Learning\nAlgorithm\" (https://spectrum.ieee.org/machine-learningbackdoo\nr). IEEE Spectrum. 10 May 2022. Archived (https://web.archive.o\nrg/web/20220511152052/https://spectrum.ieee.org/machine-learn\ningbackdoor) from the original on 11 May 2022. Retrieved\n13 May 2022.\n144.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2911, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1a245358-58d5-498d-925f-01a7e0468c6f": {"__data__": {"id_": "1a245358-58d5-498d-925f-01a7e0468c6f", "embedding": null, "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8da64739-fb32-4a71-81fb-87b44f924646", "node_type": "4", "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "c58f651354fc22e32da7c96a2c7830187f659d3e5a2d50781ebb976bbf2af2cb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a5be2e51-5414-43ff-aea8-f02386808984", "node_type": "1", "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "6000c4ef0eb225a0a81431090cf8d0f9bd4a60f440138a976ff636a6b58cf8f3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ecb9771d-b392-4709-906e-225a19362cd4", "node_type": "1", "metadata": {}, "hash": "87ee0cefe839ced4706061ff5a737d0ba98aa61f9f8bb5fe814679da5a9fed62", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The Register. Archived (https://web.archive.org/\nweb/20220513171215/https://www.theregister.com/2022/04/21/m\nachine_learning_models_backdoors/) from the original on 13\nMay 2022. Retrieved 13 May 2022.\n143. \"Undetectable Backdoors Plantable In Any Machine-Learning\nAlgorithm\" (https://spectrum.ieee.org/machine-learningbackdoo\nr). IEEE Spectrum. 10 May 2022. Archived (https://web.archive.o\nrg/web/20220511152052/https://spectrum.ieee.org/machine-learn\ningbackdoor) from the original on 11 May 2022. Retrieved\n13 May 2022.\n144. Goldwasser, Sha\ufb01; Kim, Michael P.; Vaikuntanathan, Vinod;\nZamir, Or (14 April 2022). \"Planting Undetectable Backdoors in\nMachine Learning Models\". arXiv:2204.06974 (https://arxiv.org/a\nbs/2204.06974) [cs.LG (https://arxiv.org/archive/cs.LG)].\n145. Kohavi, Ron (1995). \"A Study of Cross-Validation and Bootstrap\nfor Accuracy Estimation and Model Selection\" (https://ai.stanford.\nedu/~ronnyk/accEst.pdf) (PDF). International Joint Conference\non Arti\ufb01cial Intelligence. Archived (https://web.archive.org/web/20\n180712102706/http://web.cs.iastate.edu/~jtian/cs573/Papers/Ko\nhavi-IJCAI-95.pdf) (PDF) from the original on 12 July 2018.\nRetrieved 26 March 2023.\n146. Catal, Cagatay (2012). \"Performance Evaluation Metrics for\nSoftware Fault Prediction Studies\" (http://www.uni-obuda.hu/jour\nnal/Catal_36.pdf) (PDF). Acta Polytechnica Hungarica. 9 (4).\nRetrieved 2 October 2016.\n147. M\u00fcller, Vincent C. (30 April 2020). \"Ethics of Arti\ufb01cial Intelligence\nand Robotics\" (https://plato.stanford.edu/entries/ethics-ai/).\nStanford Encyclopedia of Philosophy. Archived (https://web.archi\nve.org/web/20201010174108/https://plato.stanford.edu/entries/et\nhics-ai/) from the original on 10 October 2020.\n148. Van Eyghen, Hans (2025). \"AI Algorithms as (Un)virtuous\nKnowers\" (https://link.springer.com/article/10.1007/s44163-024-0\n0219-z). Discover Arti\ufb01cial Intelligence. 5 (2).\ndoi:10.1007/s44163-024-00219-z (https://doi.org/10.1007%2Fs4\n4163-024-00219-z).\n149. Kri\u0161tof\u00edk, Andrej (28 April 2025). \"Bias in AI (Supported) Decision\nMaking: Old Problems, New Technologies\" (https://iacajournal.or\ng/articles/10.36745/ijca.598). International Journal for Court\nAdministration. 16 (1). doi:10.36745/ijca.598 (https://doi.org/10.3\n6745%2Fijca.598). ISSN\u00a02156-7964 (https://search.worldcat.org/i\nssn/2156-7964).\n150. Garcia, Megan (2016). \"Racist in the Machine\". World Policy\nJournal. 33 (4): 111\u2013117. doi:10.1215/07402775-3813015 (http\ns://doi.org/10.1215%2F07402775-3813015). ISSN\u00a00740-2775 (ht\ntps://search.worldcat.org/issn/0740-2775). S2CID\u00a0151595343 (htt\nps://api.semanticscholar.org/CorpusID:151595343).\n151. Bostrom, Nick (2011).", "mimetype": "text/plain", "start_char_idx": 2385, "end_char_idx": 5027, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ecb9771d-b392-4709-906e-225a19362cd4": {"__data__": {"id_": "ecb9771d-b392-4709-906e-225a19362cd4", "embedding": null, "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8da64739-fb32-4a71-81fb-87b44f924646", "node_type": "4", "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "c58f651354fc22e32da7c96a2c7830187f659d3e5a2d50781ebb976bbf2af2cb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1a245358-58d5-498d-925f-01a7e0468c6f", "node_type": "1", "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "ee4c2f8c68f4abdcb0734b7404f3e69234ae08cc10d7817c0bca320731325498", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f2110263-d784-4771-b5eb-ca17a5b9f293", "node_type": "1", "metadata": {}, "hash": "0b2c8c99b2e8500e7dcee982fb7c78ab7041cb38f47af91d4af5e6d0c5f46e73", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "ISSN\u00a02156-7964 (https://search.worldcat.org/i\nssn/2156-7964).\n150. Garcia, Megan (2016). \"Racist in the Machine\". World Policy\nJournal. 33 (4): 111\u2013117. doi:10.1215/07402775-3813015 (http\ns://doi.org/10.1215%2F07402775-3813015). ISSN\u00a00740-2775 (ht\ntps://search.worldcat.org/issn/0740-2775). S2CID\u00a0151595343 (htt\nps://api.semanticscholar.org/CorpusID:151595343).\n151. Bostrom, Nick (2011). \"The Ethics of Arti\ufb01cial Intelligence\" (http\ns://web.archive.org/web/20160304015020/http://www.nickbostro\nm.com/ethics/arti\ufb01cial-intelligence.pdf) (PDF). Archived from the\noriginal (http://www.nickbostrom.com/ethics/arti\ufb01cial-intelligence.\npdf) (PDF) on 4 March 2016. Retrieved 11 April 2016.\n152. Edionwe, Tolulope. \"The \ufb01ght against racist algorithms\" (https://th\neoutline.com/post/1571/the-\ufb01ght-against-racist-algorithms). The\nOutline. Archived (https://web.archive.org/web/20171117174504/\nhttps://theoutline.com/post/1571/the-\ufb01ght-against-racist-algorithm\ns) from the original on 17 November 2017. Retrieved\n17 November 2017.\n153. Jeffries, Adrianne. \"Machine learning is racist because the\ninternet is racist\" (https://theoutline.com/post/1439/machine-learn\ning-is-racist-because-the-internet-is-racist). The Outline. Archived\n(https://web.archive.org/web/20171117174503/https://theoutline.c\nom/post/1439/machine-learning-is-racist-because-the-internet-is-\nracist) from the original on 17 November 2017. Retrieved\n17 November 2017.\n154. Silva, Selena; Kenney, Martin (2018). \"Algorithms, Platforms, and\nEthnic Bias: An Integrative Essay\" (https://brie.berkeley.edu/sites/\ndefault/\ufb01les/brie_wp_2018-3.pdf) (PDF). Phylon. 55 (1 & 2): 9\u2013\n37. ISSN\u00a00031-8906 (https://search.worldcat.org/issn/0031-890\n6). JSTOR\u00a026545017 (https://www.jstor.org/stable/26545017).\nArchived (https://web.archive.org/web/20240127200319/https://b\nrie.berkeley.edu/sites/default/\ufb01les/brie_wp_2018-3.pdf) (PDF)\nfrom the original on 27 January 2024.\n155. Wong, Carissa (30 March 2023). \"AI 'fairness' research held\nback by lack of diversity\" (https://www.nature.com/articles/d4158\n6-023-00935-z). Nature. doi:10.1038/d41586-023-00935-z (http\ns://doi.org/10.1038%2Fd41586-023-00935-z). PMID\u00a036997714\n(https://pubmed.ncbi.nlm.nih.gov/36997714). S2CID\u00a0257857012\n(https://api.semanticscholar.org/CorpusID:257857012). Archived\n(https://web.archive.org/web/20230412120505/https://www.natur\ne.com/articles/d41586-023-00935-z) from the original on 12 April\n2023. Retrieved 9 December 2023.\n156. Zhang, Jack Clark. \"Arti\ufb01cial Intelligence Index Report 2021\" (htt\nps://aiindex.stanford.edu/wp-content/uploads/2021/11/2021-AI-In\ndex-Report_Master.pdf) (PDF). Stanford Institute for Human-\nCentered Arti\ufb01cial Intelligence.", "mimetype": "text/plain", "start_char_idx": 4639, "end_char_idx": 7313, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f2110263-d784-4771-b5eb-ca17a5b9f293": {"__data__": {"id_": "f2110263-d784-4771-b5eb-ca17a5b9f293", "embedding": null, "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8da64739-fb32-4a71-81fb-87b44f924646", "node_type": "4", "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "c58f651354fc22e32da7c96a2c7830187f659d3e5a2d50781ebb976bbf2af2cb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ecb9771d-b392-4709-906e-225a19362cd4", "node_type": "1", "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b5696aa61ba9439fe663ddb5324e022f7dc74330fc00c5d941ec7dd63a4f9bf3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1b6d1535-66aa-421c-a5e7-ead42942e325", "node_type": "1", "metadata": {}, "hash": "f0b51ae77b053a148673ec194b53058715299843aaebb2463502812076ef4d89", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "PMID\u00a036997714\n(https://pubmed.ncbi.nlm.nih.gov/36997714). S2CID\u00a0257857012\n(https://api.semanticscholar.org/CorpusID:257857012). Archived\n(https://web.archive.org/web/20230412120505/https://www.natur\ne.com/articles/d41586-023-00935-z) from the original on 12 April\n2023. Retrieved 9 December 2023.\n156. Zhang, Jack Clark. \"Arti\ufb01cial Intelligence Index Report 2021\" (htt\nps://aiindex.stanford.edu/wp-content/uploads/2021/11/2021-AI-In\ndex-Report_Master.pdf) (PDF). Stanford Institute for Human-\nCentered Arti\ufb01cial Intelligence. Archived (https://web.archive.org/\nweb/20240519121545/https://aiindex.stanford.edu/wp-content/up\nloads/2021/11/2021-AI-Index-Report_Master.pdf) (PDF) from the\noriginal on 19 May 2024. Retrieved 9 December 2023.\n157. Caliskan, Aylin; Bryson, Joanna J.; Narayanan, Arvind (14 April\n2017). \"Semantics derived automatically from language corpora\ncontain human-like biases\". Science. 356 (6334): 183\u2013186.\narXiv:1608.07187 (https://arxiv.org/abs/1608.07187).\nBibcode:2017Sci...356..183C (https://ui.adsabs.harvard.edu/abs/\n2017Sci...356..183C). doi:10.1126/science.aal4230 (https://doi.or\ng/10.1126%2Fscience.aal4230). ISSN\u00a00036-8075 (https://search.\nworldcat.org/issn/0036-8075). PMID\u00a028408601 (https://pubmed.n\ncbi.nlm.nih.gov/28408601). S2CID\u00a023163324 (https://api.semanti\ncscholar.org/CorpusID:23163324).\n158. Wang, Xinan; Dasgupta, Sanjoy (2016), Lee, D. D.; Sugiyama,\nM.; Luxburg, U. V.; Guyon, I. (eds.), \"An algorithm for L1 nearest\nneighbor search via monotonic embedding\" (http://papers.nips.c\nc/paper/6227-an-algorithm-for-l1-nearest-neighbor-search-via-m\nonotonic-embedding.pdf) (PDF), Advances in Neural Information\nProcessing Systems 29, Curran Associates, Inc., pp.\u00a0983\u2013991,\narchived (https://web.archive.org/web/20170407051313/http://pa\npers.nips.cc/paper/6227-an-algorithm-for-l1-nearest-neighbor-se\narch-via-monotonic-embedding.pdf) (PDF) from the original on 7\nApril 2017, retrieved 20 August 2018\n159. M.O.R. Prates; P.H.C. Avelar; L.C. Lamb (11 March 2019).\n\"Assessing Gender Bias in Machine Translation \u2013 A Case Study\nwith Google Translate\". arXiv:1809.02208 (https://arxiv.org/abs/1\n809.02208) [cs.CY (https://arxiv.org/archive/cs.CY)].\n160. Narayanan, Arvind (24 August 2016). \"Language necessarily\ncontains human biases, and so will machines trained on\nlanguage corpora\" (https://freedom-to-tinker.com/2016/08/24/lan\nguage-necessarily-contains-human-biases-and-so-will-machines-\ntrained-on-language-corpora/). Freedom to Tinker. Archived (http\ns://web.archive.org/web/20180625021555/https://freedom-to-tink\ner.com/2016/08/24/language-necessarily-contains-human-biases\n-and-so-will-machines-trained-on-language-corpora/) from the\noriginal on 25 June 2018. Retrieved 19 November 2016.\n161. Metz, Rachel (24 March 2016).", "mimetype": "text/plain", "start_char_idx": 6788, "end_char_idx": 9550, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1b6d1535-66aa-421c-a5e7-ead42942e325": {"__data__": {"id_": "1b6d1535-66aa-421c-a5e7-ead42942e325", "embedding": null, "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8da64739-fb32-4a71-81fb-87b44f924646", "node_type": "4", "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "c58f651354fc22e32da7c96a2c7830187f659d3e5a2d50781ebb976bbf2af2cb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f2110263-d784-4771-b5eb-ca17a5b9f293", "node_type": "1", "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "73784007055659fcce52f963059d7e6e081aa158ccfa71e401490b882c46cfa1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ab5934a2-0282-43d6-a328-5c649126a33f", "node_type": "1", "metadata": {}, "hash": "7ae999b7d52999c5baf1a038fc22e7c45b532900eaef761699a97384ce222e55", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "160. Narayanan, Arvind (24 August 2016). \"Language necessarily\ncontains human biases, and so will machines trained on\nlanguage corpora\" (https://freedom-to-tinker.com/2016/08/24/lan\nguage-necessarily-contains-human-biases-and-so-will-machines-\ntrained-on-language-corpora/). Freedom to Tinker. Archived (http\ns://web.archive.org/web/20180625021555/https://freedom-to-tink\ner.com/2016/08/24/language-necessarily-contains-human-biases\n-and-so-will-machines-trained-on-language-corpora/) from the\noriginal on 25 June 2018. Retrieved 19 November 2016.\n161. Metz, Rachel (24 March 2016). \"Why Microsoft Accidentally\nUnleashed a Neo-Nazi Sexbot\" (https://www.technologyreview.co\nm/s/601111/why-microsoft-accidentally-unleashed-a-neo-nazi-se\nxbot/). MIT Technology Review. Archived (https://web.archive.or\ng/web/20181109023754/https://www.technologyreview.com/s/60\n1111/why-microsoft-accidentally-unleashed-a-neo-nazi-sexbot/)\nfrom the original on 9 November 2018. Retrieved 20 August\n2018.\n162. Vincent, James (12 January 2018). \"Google '\ufb01xed' its racist\nalgorithm by removing gorillas from its image-labeling tech\" (http\ns://www.theverge.com/2018/1/12/16882408/google-racist-gorillas\n-photo-recognition-algorithm-ai). The Verge. Archived (https://we\nb.archive.org/web/20180821031830/https://www.theverge.com/2\n018/1/12/16882408/google-racist-gorillas-photo-recognition-algor\nithm-ai) from the original on 21 August 2018. Retrieved\n20 August 2018.\n163. Crawford, Kate (25 June 2016). \"Opinion | Arti\ufb01cial Intelligence's\nWhite Guy Problem\" (https://www.nytimes.com/2016/06/26/opini\non/sunday/arti\ufb01cial-intelligences-white-guy-problem.html). New\nYork Times. Archived (https://web.archive.org/web/20210114220\n619/https://www.nytimes.com/2016/06/26/opinion/sunday/arti\ufb01cia\nl-intelligences-white-guy-problem.html) from the original on 14\nJanuary 2021. Retrieved 20 August 2018.\n164. Simonite, Tom (30 March 2017). \"Microsoft: AI Isn't Yet Adaptable\nEnough to Help Businesses\" (https://www.technologyreview.com/\ns/603944/microsoft-ai-isnt-yet-adaptable-enough-to-help-busines\nses/). MIT Technology Review. Archived (https://web.archive.org/\nweb/20181109022820/https://www.technologyreview.com/s/6039\n44/microsoft-ai-isnt-yet-adaptable-enough-to-help-businesses/)\nfrom the original on 9 November 2018. Retrieved 20 August\n2018.\n165. Hempel, Jessi (13 November 2018). \"Fei-Fei Li's Quest to Make\nMachines Better for Humanity\" (https://www.wired.com/story/fei-f\nei-li-arti\ufb01cial-intelligence-humanity/). Wired. ISSN\u00a01059-1028 (htt\nps://search.worldcat.org/issn/1059-1028). Archived (https://web.a\nrchive.org/web/20201214095220/https://www.wired.com/story/fei\n-fei-li-arti\ufb01cial-intelligence-humanity/) from the original on 14\nDecember 2020. Retrieved 17 February 2019.\n166. Char, D. S.; Shah, N. H.; Magnus, D. (2018). \"Implementing\nMachine Learning in Health Care\u2014Addressing Ethical\nChallenges\" (https://www.ncbi.nlm.nih.gov/pmc/articles/PMC596\n2261). New England Journal of Medicine. 378 (11): 981\u2013983.", "mimetype": "text/plain", "start_char_idx": 8968, "end_char_idx": 11955, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ab5934a2-0282-43d6-a328-5c649126a33f": {"__data__": {"id_": "ab5934a2-0282-43d6-a328-5c649126a33f", "embedding": null, "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8da64739-fb32-4a71-81fb-87b44f924646", "node_type": "4", "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "c58f651354fc22e32da7c96a2c7830187f659d3e5a2d50781ebb976bbf2af2cb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1b6d1535-66aa-421c-a5e7-ead42942e325", "node_type": "1", "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "ea0822c0063b0c638e6596f957485aee1fbf64f67a4a27cb479cb885567f0346", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a83723a3-f166-45b1-b75d-8f5e54e3035d", "node_type": "1", "metadata": {}, "hash": "e3650855d9510bbc4c1340d7630806e9b239cacea45a5cb7dbab2c245c4750b6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Wired. ISSN\u00a01059-1028 (htt\nps://search.worldcat.org/issn/1059-1028). Archived (https://web.a\nrchive.org/web/20201214095220/https://www.wired.com/story/fei\n-fei-li-arti\ufb01cial-intelligence-humanity/) from the original on 14\nDecember 2020. Retrieved 17 February 2019.\n166. Char, D. S.; Shah, N. H.; Magnus, D. (2018). \"Implementing\nMachine Learning in Health Care\u2014Addressing Ethical\nChallenges\" (https://www.ncbi.nlm.nih.gov/pmc/articles/PMC596\n2261). New England Journal of Medicine. 378 (11): 981\u2013983.\ndoi:10.1056/nejmp1714229 (https://doi.org/10.1056%2Fnejmp17\n14229). PMC\u00a05962261 (https://www.ncbi.nlm.nih.gov/pmc/article\ns/PMC5962261). PMID\u00a029539284 (https://pubmed.ncbi.nlm.nih.g\nov/29539284).\n167. Research, AI (23 October 2015). \"Deep Neural Networks for\nAcoustic Modeling in Speech Recognition\" (http://airesearch.co\nm/ai-research-papers/deep-neural-networks-for-acoustic-modelin\ng-in-speech-recognition/). airesearch.com. Archived (https://web.\narchive.org/web/20160201033801/http://airesearch.com/ai-resea\nrch-papers/deep-neural-networks-for-acoustic-modeling-in-speec\nh-recognition/) from the original on 1 February 2016. Retrieved\n23 October 2015.\n168. \"GPUs Continue to Dominate the AI Accelerator Market for Now\"\n(https://www.informationweek.com/big-data/ai-machine-learning/\ngpus-continue-to-dominate-the-ai-accelerator-market-for-now/a/d\n-id/1336475). InformationWeek. December 2019. Archived (http\ns://web.archive.org/web/20200610094310/https://www.informatio\nnweek.com/big-data/ai-machine-learning/gpus-continue-to-domin\nate-the-ai-accelerator-market-for-now/a/d-id/1336475) from the\noriginal on 10 June 2020. Retrieved 11 June 2020.\n169. Ray, Tiernan (2019). \"AI is changing the entire nature of\ncompute\" (https://www.zdnet.com/article/ai-is-changing-the-entire\n-nature-of-compute/). ZDNet. Archived (https://web.archive.org/w\neb/20200525144635/https://www.zdnet.com/article/ai-is-changin\ng-the-entire-nature-of-compute/) from the original on 25 May\n2020. Retrieved 11 June 2020.\n170. \"AI and Compute\" (https://openai.com/blog/ai-and-compute/).\nOpenAI. 16 May 2018. Archived (https://web.archive.org/web/202\n00617200602/https://openai.com/blog/ai-and-compute/) from the\noriginal on 17 June 2020. Retrieved 11 June 2020.\n171. Jouppi, Norman P.; Young, Cliff; Patil, Nishant; Patterson, David;\nAgrawal, Gaurav; Bajwa, Raminder; Bates, Sarah; Bhatia,\nSuresh; Boden, Nan; Borchers, Al; Boyle, Rick; Cantin, Pierre-\nluc; Chao, Clifford; Clark, Chris; Coriell, Jeremy (24 June 2017).\n\"In-Datacenter Performance Analysis of a Tensor Processing\nUnit\" (https://dl.acm.org/doi/10.1145/3079856.3080246).\nProceedings of the 44th Annual International Symposium on\nComputer Architecture. ISCA '17. New York, NY, USA:\nAssociation for Computing Machinery. pp.\u00a01\u201312.\narXiv:1704.04760 (https://arxiv.org/abs/1704.04760).\ndoi:10.1145/3079856.3080246 (https://doi.org/10.1145%2F30798\n56.3080246).", "mimetype": "text/plain", "start_char_idx": 11456, "end_char_idx": 14348, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a83723a3-f166-45b1-b75d-8f5e54e3035d": {"__data__": {"id_": "a83723a3-f166-45b1-b75d-8f5e54e3035d", "embedding": null, "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8da64739-fb32-4a71-81fb-87b44f924646", "node_type": "4", "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "c58f651354fc22e32da7c96a2c7830187f659d3e5a2d50781ebb976bbf2af2cb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ab5934a2-0282-43d6-a328-5c649126a33f", "node_type": "1", "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b0e6ab1b60eca890398570dc8bc630477be15524a8265267c834ab5c7b48193b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8b4bb903-07ce-40f4-ad84-699788e9fef8", "node_type": "1", "metadata": {}, "hash": "4a09eebc7c1e18d61dd2c414eec0a14dadd97d9299f69810b1e63376e592a470", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\"In-Datacenter Performance Analysis of a Tensor Processing\nUnit\" (https://dl.acm.org/doi/10.1145/3079856.3080246).\nProceedings of the 44th Annual International Symposium on\nComputer Architecture. ISCA '17. New York, NY, USA:\nAssociation for Computing Machinery. pp.\u00a01\u201312.\narXiv:1704.04760 (https://arxiv.org/abs/1704.04760).\ndoi:10.1145/3079856.3080246 (https://doi.org/10.1145%2F30798\n56.3080246). ISBN\u00a0978-1-4503-4892-8.\n172. \"What is neuromorphic computing? Everything you need to know\nabout how it is changing the future of computing\" (https://www.zd\nnet.com/article/what-is-neuromorphic-computing-everything-you-\nneed-to-know-about-how-it-will-change-the-future-of-computing/).\nZDNET. 8 December 2020. Retrieved 21 November 2024.\n173. \"Cornell & NTT's Physical Neural Networks: A \"Radical\nAlternative for Implementing Deep Neural Networks\" That\nEnables Arbitrary Physical Systems Training\" (https://syncedrevi\new.com/2021/05/27/deepmind-podracer-tpu-based-rl-frameworks\n-deliver-exceptional-performance-at-low-cost-28/). Synced. 27\nMay 2021. Archived (https://web.archive.org/web/202110271834\n28/https://syncedreview.com/2021/05/27/deepmind-podracer-tpu-\nbased-rl-frameworks-deliver-exceptional-performance-at-low-cos\nt-28/) from the original on 27 October 2021. Retrieved\n12 October 2021.\n174. \"Nano-spaghetti to solve neural network power consumption\" (htt\nps://www.theregister.com/2021/10/05/analogue_neural_network_\nresearch/). The Register. 5 October 2021. Archived (https://web.\narchive.org/web/20211006150057/https://www.theregister.com/2\n021/10/05/analogue_neural_network_research/) from the original\non 6 October 2021. Retrieved 12 October 2021.\n175. Fafoutis, Xenofon; Marchegiani, Letizia; Elsts, Atis; Pope, James;\nPiechocki, Robert; Craddock, Ian (7 May 2018). \"Extending the\nbattery lifetime of wearable sensors with embedded machine\nlearning\" (https://ieeexplore.ieee.org/document/8355116). 2018\nIEEE 4th World Forum on Internet of Things (WF-IoT) (https://res\nearch-information.bris.ac.uk/en/publications/b8fdb58b-7114-45c6\n-82e4-4ab239c1327f). pp.\u00a0269\u2013274. doi:10.1109/WF-\nIoT.2018.8355116 (https://doi.org/10.1109%2FWF-IoT.2018.8355\n116). hdl:1983/b8fdb58b-7114-45c6-82e4-4ab239c1327f (https://\nhdl.handle.net/1983%2Fb8fdb58b-7114-45c6-82e4-4ab239c132\n7f). ISBN\u00a0978-1-4673-9944-9. S2CID\u00a019192912 (https://api.sema\nnticscholar.org/CorpusID:19192912). Archived (https://web.archiv\ne.org/web/20220118182543/https://ieeexplore.ieee.org/abstract/d\nocument/8355116?casa_token=LCpUeGLS1e8AAAAA:2OjuJfN\nwZBnV2pgDxfnEAC-jbrETv_BpTcX35_aFqN6IULFxu1xbYbVSR\npD-zMd4GCUMELyG) from the original on 18 January 2022.\nRetrieved 17 January 2022.\n176.", "mimetype": "text/plain", "start_char_idx": 13950, "end_char_idx": 16605, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8b4bb903-07ce-40f4-ad84-699788e9fef8": {"__data__": {"id_": "8b4bb903-07ce-40f4-ad84-699788e9fef8", "embedding": null, "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8da64739-fb32-4a71-81fb-87b44f924646", "node_type": "4", "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "c58f651354fc22e32da7c96a2c7830187f659d3e5a2d50781ebb976bbf2af2cb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a83723a3-f166-45b1-b75d-8f5e54e3035d", "node_type": "1", "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "ce21c478d06a7b4561ad58cf555bc8d7b2d3e92600057f843757bffeb00c69b7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c99e758b-113d-433e-ab46-81c57950def2", "node_type": "1", "metadata": {}, "hash": "b9828f16079f5f837354b57f97a2ee4fcff312a1888bbbc9d522e166c36ae49b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "ISBN\u00a0978-1-4673-9944-9. S2CID\u00a019192912 (https://api.sema\nnticscholar.org/CorpusID:19192912). Archived (https://web.archiv\ne.org/web/20220118182543/https://ieeexplore.ieee.org/abstract/d\nocument/8355116?casa_token=LCpUeGLS1e8AAAAA:2OjuJfN\nwZBnV2pgDxfnEAC-jbrETv_BpTcX35_aFqN6IULFxu1xbYbVSR\npD-zMd4GCUMELyG) from the original on 18 January 2022.\nRetrieved 17 January 2022.\n176. \"A Beginner's Guide To Machine learning For Embedded\nSystems\" (https://analyticsindiamag.com/a-beginners-guide-to-m\nachine-learning-for-embedded-systems/). Analytics India\nMagazine. 2 June 2021. Archived (https://web.archive.org/web/2\n0220118182754/https://analyticsindiamag.com/a-beginners-guid\ne-to-machine-learning-for-embedded-systems/) from the original\non 18 January 2022. Retrieved 17 January 2022.\n177. Synced (12 January 2022). \"Google, Purdue & Harvard U's\nOpen-Source Framework for TinyML Achieves up to 75x\nSpeedups on FPGAs | Synced\" (https://syncedreview.com/2022/\n01/12/deepmind-podracer-tpu-based-rl-frameworks-deliver-exce\nptional-performance-at-low-cost-183/). syncedreview.com.\nArchived (https://web.archive.org/web/20220118182404/https://s\nyncedreview.com/2022/01/12/deepmind-podracer-tpu-based-rl-fr\nameworks-deliver-exceptional-performance-at-low-cost-183/)\nfrom the original on 18 January 2022. Retrieved 17 January\n2022.\n178. AlSelek, Mohammad; Alcaraz-Calero, Jose M.; Wang, Qi (2024).\n\"Dynamic AI-IoT: Enabling Updatable AI Models in Ultralow-\nPower 5G IoT Devices\" (https://research-portal.uws.ac.uk/en/pub\nlications/c8edfe21-77d0-4c3e-a8bc-d384faf605a0). IEEE Internet\nof Things Journal. 11 (8): 14192\u201314205.\ndoi:10.1109/JIOT.2023.3340858 (https://doi.org/10.1109%2FJIO\nT.2023.3340858).\n179. Giri, Davide; Chiu, Kuan-Lin; Di Guglielmo, Giuseppe;\nMantovani, Paolo; Carloni, Luca P. (15 June 2020). \"ESP4ML:\nPlatform-Based Design of Systems-on-Chip for Embedded\nMachine Learning\" (https://ieeexplore.ieee.org/document/911631\n7). 2020 Design, Automation & Test in Europe Conference &\nExhibition (DATE). pp.\u00a01049\u20131054. arXiv:2004.03640 (https://arxi\nv.org/abs/2004.03640). doi:10.23919/DATE48585.2020.9116317\n(https://doi.org/10.23919%2FDATE48585.2020.9116317).\nISBN\u00a0978-3-9819263-4-7. S2CID\u00a0210928161 (https://api.semanti\ncscholar.org/CorpusID:210928161). Archived (https://web.archiv\ne.org/web/20220118182342/https://ieeexplore.ieee.org/abstract/d\nocument/9116317?casa_token=5I_Tmgrrbu4AAAAA:v7pDHPEW\nlRuo2Vk3pU06194PO0-W21UOdyZqADrZxrRdPBZDMLwQrjJS\nAHUhHtzJmLu_VdgW) from the original on 18 January 2022.\nRetrieved 17 January 2022.\n180.", "mimetype": "text/plain", "start_char_idx": 16230, "end_char_idx": 18769, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c99e758b-113d-433e-ab46-81c57950def2": {"__data__": {"id_": "c99e758b-113d-433e-ab46-81c57950def2", "embedding": null, "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8da64739-fb32-4a71-81fb-87b44f924646", "node_type": "4", "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "c58f651354fc22e32da7c96a2c7830187f659d3e5a2d50781ebb976bbf2af2cb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b4bb903-07ce-40f4-ad84-699788e9fef8", "node_type": "1", "metadata": {"page_label": "10", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "2ccacdc0d9a1afd940435882aef4b157a030f6fe8c6d950c50368f6b1158c622", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "ISBN\u00a0978-3-9819263-4-7. S2CID\u00a0210928161 (https://api.semanti\ncscholar.org/CorpusID:210928161). Archived (https://web.archiv\ne.org/web/20220118182342/https://ieeexplore.ieee.org/abstract/d\nocument/9116317?casa_token=5I_Tmgrrbu4AAAAA:v7pDHPEW\nlRuo2Vk3pU06194PO0-W21UOdyZqADrZxrRdPBZDMLwQrjJS\nAHUhHtzJmLu_VdgW) from the original on 18 January 2022.\nRetrieved 17 January 2022.\n180. Louis, Marcia Sahaya; Azad, Zahra; Delshadtehrani, Leila;\nGupta, Suyog; Warden, Pete; Reddi, Vijay Janapa; Joshi, Ajay\n(2019). \"Towards Deep Learning using TensorFlow Lite on RISC-\nV\" (https://edge.seas.harvard.edu/publications/towards-deep-lear\nning-using-tensor\ufb02ow-lite-risc-v). Harvard University. Archived (ht\ntps://web.archive.org/web/20220117031909/https://edge.seas.ha\nrvard.edu/publications/towards-deep-learning-using-tensor\ufb02ow-lit\ne-risc-v) from the original on 17 January 2022. Retrieved\n17 January 2022.\n181. Ibrahim, Ali; Osta, Mario; Alameh, Mohamad; Saleh, Moustafa;\nChible, Hussein; Valle, Maurizio (21 January 2019).\n\"Approximate Computing Methods for Embedded Machine\nLearning\" (https://ieeexplore.ieee.org/document/8617877). 2018\n25th IEEE International Conference on Electronics, Circuits and\nSystems (ICECS). pp.\u00a0845\u2013848.\ndoi:10.1109/ICECS.2018.8617877 (https://doi.org/10.1109%2FIC\nECS.2018.8617877). ISBN\u00a0978-1-5386-9562-3.\nS2CID\u00a058670712 (https://api.semanticscholar.org/CorpusID:5867\n0712). Archived (https://web.archive.org/web/20220117031855/ht\ntps://ieeexplore.ieee.org/abstract/document/8617877?casa_toke\nn=arUW5Oy-tzwAAAAA:I9x6edlfskM6kGNFUN9zAFrjEBv_8kYT\nz7ERTxtXu9jAqdrYCcDbbwjBdgwXvb6QAH_-0VJJ) from the\noriginal on 17 January 2022. Retrieved 17 January 2022.\n6/7/25, 7:32 PM Machine learning - Wikipedia\nhttps://en.wikipedia.org/wiki/Machine_learning 10/11", "mimetype": "text/plain", "start_char_idx": 18392, "end_char_idx": 20160, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cfd89418-7755-4778-bccd-5123990d3974": {"__data__": {"id_": "cfd89418-7755-4778-bccd-5123990d3974", "embedding": null, "metadata": {"page_label": "11", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ee48f39-469b-4622-aaf2-4e24b9b0fbf7", "node_type": "4", "metadata": {"page_label": "11", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "d3fbb56b89bd0c2b6a36b44dccdcb4088974863bdc43ab08dab88ac6635d0aef", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "60820d92-e3b4-4e9c-acd9-edfadc0e25b8", "node_type": "1", "metadata": {}, "hash": "b231e9ed6e712ebc117fd23e41fb5f5cee643e531b2ac7043df0aad73d4c0f51", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "182. \"dblp: TensorFlow Eager: A Multi-Stage, Python-Embedded DSL\nfor Machine Learning\" (https://dblp.org/rec/journals/corr/abs-190\n3-01855.html). dblp.org. Archived (https://web.archive.org/web/2\n0220118182335/https://dblp.org/rec/journals/corr/abs-1903-0185\n5.html) from the original on 18 January 2022. Retrieved\n17 January 2022.\n183. Branco, S\u00e9rgio; Ferreira, Andr\u00e9 G.; Cabral, Jorge (5 November\n2019). \"Machine Learning in Resource-Scarce Embedded\nSystems, FPGAs, and End-Devices: A Survey\" (https://doi.org/1\n0.3390%2Felectronics8111289). Electronics. 8 (11): 1289.\ndoi:10.3390/electronics8111289 (https://doi.org/10.3390%2Felect\nronics8111289). hdl:1822/62521 (https://hdl.handle.net/1822%2F\n62521). ISSN\u00a02079-9292 (https://search.worldcat.org/issn/2079-9\n292).\nDomingos, Pedro (22 September 2015). The Master Algorithm: How the Quest for the Ultimate Learning Machine Will Remake Our World. Basic Books. ISBN\u00a0978-0465065707.\nNilsson, Nils (1998). Arti\ufb01cial Intelligence: A New Synthesis (https://archive.org/details/arti\ufb01cialintell0000nils). Morgan Kaufmann. ISBN\u00a0978-1-55860-467-4. Archived (https://web.archive.org/web/20200726131\n654/https://archive.org/details/arti\ufb01cialintell0000nils) from the original on 26 July 2020. Retrieved 18 November 2019.\nPoole, David; Mackworth, Alan; Goebel, Randy (1998). Computational Intelligence: A Logical Approach (https://archive.org/details/computationalint00pool). New York: Oxford University Press. ISBN\u00a0978-0-19-\n510270-3. Archived (https://web.archive.org/web/20200726131436/https://archive.org/details/computationalint00pool) from the original on 26 July 2020. Retrieved 22 August 2020.\nRussell, Stuart J.; Norvig, Peter (2003), Arti\ufb01cial Intelligence: A Modern Approach (http://aima.cs.berkeley.edu/) (2nd\u00a0ed.), Upper Saddle River, New Jersey: Prentice Hall, ISBN\u00a00-13-790395-2.\nAlpaydin, Ethem (2020). Introduction to Machine Learning, (4th\nedition) MIT Press, ISBN\u00a09780262043793.\nBishop, Christopher (1995). Neural Networks for Pattern\nRecognition, Oxford University Press. ISBN\u00a00-19-853864-2.\nBishop, Christopher (2006) Pattern Recognition and Machine\nLearning, Springer. ISBN\u00a0978-0-387-31073-2\nDomingos, Pedro (September 2015), The Master Algorithm,\nBasic Books, ISBN\u00a0978-0-465-06570-7\nDuda, Richard O.; Hart, Peter E.; Stork, David G. (2001) Pattern\nclassi\ufb01cation (2nd edition), Wiley, New York, ISBN\u00a00-471-05669-\n3.\nHastie, Trevor; Tibshirani, Robert & Friedman, Jerome H. (2009)\nThe Elements of Statistical Learning, Springer. doi:10.1007/978-\n0-387-84858-7 (https://doi.org/10.1007%2F978-0-387-84858-7)\nISBN\u00a00-387-95284-5.\nMacKay, David J. C. Information Theory, Inference, and Learning\nAlgorithms Cambridge: Cambridge University Press, 2003.\nISBN\u00a00-521-64298-1\nMurphy, Kevin P. (2021).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2748, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "60820d92-e3b4-4e9c-acd9-edfadc0e25b8": {"__data__": {"id_": "60820d92-e3b4-4e9c-acd9-edfadc0e25b8", "embedding": null, "metadata": {"page_label": "11", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ee48f39-469b-4622-aaf2-4e24b9b0fbf7", "node_type": "4", "metadata": {"page_label": "11", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "d3fbb56b89bd0c2b6a36b44dccdcb4088974863bdc43ab08dab88ac6635d0aef", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cfd89418-7755-4778-bccd-5123990d3974", "node_type": "1", "metadata": {"page_label": "11", "file_name": "Machine learning - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Machine learning - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 2319931, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "4afcb7f533286334f76c08e7ad7f7eb18c3b8eb41716b8b9db80acc127df4bdc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "(2001) Pattern\nclassi\ufb01cation (2nd edition), Wiley, New York, ISBN\u00a00-471-05669-\n3.\nHastie, Trevor; Tibshirani, Robert & Friedman, Jerome H. (2009)\nThe Elements of Statistical Learning, Springer. doi:10.1007/978-\n0-387-84858-7 (https://doi.org/10.1007%2F978-0-387-84858-7)\nISBN\u00a00-387-95284-5.\nMacKay, David J. C. Information Theory, Inference, and Learning\nAlgorithms Cambridge: Cambridge University Press, 2003.\nISBN\u00a00-521-64298-1\nMurphy, Kevin P. (2021). Probabilistic Machine Learning: An\nIntroduction (https://probml.github.io/pml-book/book1.html)\nArchived (https://web.archive.org/web/20210411153246/https://pr\nobml.github.io/pml-book/book1.html) 11 April 2021 at the\nWayback Machine, MIT Press.\nNilsson, Nils J. (2015) Introduction to Machine Learning (https://a\ni.stanford.edu/people/nilsson/mlbook.html) Archived (https://web.\narchive.org/web/20190816182600/http://ai.stanford.edu/people/ni\nlsson/mlbook.html) 16 August 2019 at the Wayback Machine.\nRussell, Stuart & Norvig, Peter (2020). Arti\ufb01cial Intelligence \u2013 A\nModern Approach. (4th edition) Pearson, ISBN\u00a0978-0134610993.\nSolomonoff, Ray, (1956) An Inductive Inference Machine (http://\nworld.std.com/~rjs/indinf56.pdf) Archived (https://web.archive.or\ng/web/20110426161749/http://world.std.com/~rjs/indinf56.pdf) 26\nApril 2011 at the Wayback Machine A privately circulated report\nfrom the 1956 Dartmouth Summer Research Conference on AI.\nWitten, Ian H. & Frank, Eibe (2011). Data Mining: Practical\nmachine learning tools and techniques (https://www.sciencedirec\nt.com/book/9780123748560) Morgan Kaufmann, 664pp.,\nISBN\u00a0978-0-12-374856-0.\nInternational Machine Learning Society (https://web.archive.org/web/20171230081341/http://machinelearning.org/)\nmloss (https://mloss.org/) is an academic database of open-source machine learning software.\nRetrieved from \"https://en.wikipedia.org/w/index.php?title=Machine_learning&oldid=1293969998\"\nSources\nFurther reading\nExternal links\n6/7/25, 7:32 PM Machine learning - Wikipedia\nhttps://en.wikipedia.org/wiki/Machine_learning 11/11", "mimetype": "text/plain", "start_char_idx": 2294, "end_char_idx": 4327, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dbd3796d-e736-4b3d-a83c-c4168922bd7e": {"__data__": {"id_": "dbd3796d-e736-4b3d-a83c-c4168922bd7e", "embedding": null, "metadata": {"page_label": "1", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "46298fdd-9e96-4be0-84db-adc501e9dd94", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b1a56b1b57826493566ea9f884372f09b0064e984f6f444daa7f23c32fd4938d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9ca3c541-f414-4c7d-b0d7-7db0c20601bb", "node_type": "1", "metadata": {}, "hash": "f84c007fe871950b996e18d53f1ce9de0e1a54f915dfa8dc1e44752e0219276d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Operating system\nAn operating system (OS) is system software that manages computer hardware and software resources, and provides common services for computer programs.\nTime-sharing operating systems schedule tasks for efficient use of the system and may also include accounting software for cost allocation of processor time, mass storage, peripherals, and other resources.\nFor hardware functions such as input and output and memory allocation, the operating system acts as an intermediary between programs and the computer hardware,[1][2] although the application code is usually\nexecuted directly by the hardware and frequently makes system calls to an OS function or is interrupted by it. Operating systems are found on many devices that contain a computer\u00a0\u2013 from cellular phones and\nvideo game consoles to web servers and supercomputers.\nAs of September\u00a02024, Android is the most popular operating system with a 46% market share, followed by Microsoft Windows at 26%, iOS and iPadOS at 18%, macOS at 5%, and Linux at 1%. Android, iOS, and\niPadOS are mobile operating systems, while Windows, macOS, and Linux are desktop operating systems.[3] Linux distributions are dominant in the server and supercomputing sectors. Other specialized classes of\noperating systems (special-purpose operating systems),[4][5] such as embedded and real-time systems, exist for many applications. Security-focused operating systems also exist. Some operating systems have low\nsystem requirements (e.g. light-weight Linux distribution). Others may have higher system requirements.\nSome operating systems require installation or may come pre-installed with purchased computers (OEM-installation), whereas others may run directly from media (i.e. live CD) or flash memory (i.e. a LiveUSB\nfrom a USB stick).\nAn operating system is difficult to define,[6] but has been called \"the layer of software that manages a computer's resources for its users and their applications\".[7] Operating systems include the software that is\nalways running, called a kernel\u2014but can include other software as well.[6][8] The two other types of programs that can run on a computer are system programs\u2014which are associated with the operating system, but\nmay not be part of the kernel\u2014and applications\u2014all other software.[8]\nThere are three main purposes that an operating system fulfills:[9]\nOperating systems allocate resources between different applications, deciding when they will receive central processing unit (CPU) time or space in memory.[ 9 ]  On modern personal computers, users often\nwant to run several applications at once. In order to ensure that one program cannot monopolize the computer's limited hardware resources, the operating system gives each application a share of the\nresource, either in time (CPU) or space (memory).[ 1 0 ] [ 1 1 ]  The operating system also must isolate applications from each other to protect them from errors and security vulnerabilities in another application's\ncode, but enable communications between different applications.[ 1 2 ] \nOperating systems provide an interface that abstracts the details of accessing hardware details (such as physical memory) to make things easier for programmers.[ 9 ] [ 1 3 ]  Virtualization also enables the\noperating system to mask limited hardware resources; for example, virtual memory can provide a program with the illusion of nearly unlimited memory that exceeds the computer's actual memory.[ 1 4 ] \nOperating systems provide common services, such as an interface for accessing network and disk devices. This enables an application to be run on different hardware without needing to be rewritten.[ 1 5 ] \nWhich services to include in an operating system varies greatly, and this functionality makes up the great majority of code for most operating systems.[ 1 6 ] \nWith multiprocessors multiple CPUs share memory. A multicomputer or cluster computer has multiple CPUs, each of which has its own memory. Multicomputers were developed because large multiprocessors\nare difficult to engineer and prohibitively expensive;[17] they are universal in cloud computing because of the size of the machine needed.[18] The different CPUs often need to send and receive messages to each\nother;[19] to ensure good performance, the operating systems for these machines need to minimize this copying of packets.[20] Newer systems are often multiqueue\u2014separating groups of users into separate\nqueues\u2014to reduce the need for packet copying and support more concurrent users.[21] Another technique is remote direct memory access, which enables each CPU to access memory belonging to other CPUs.[19]\nMulticomputer operating systems often support remote procedure calls where a CPU can call a procedure on another CPU,[22] or distributed shared memory, in which the operating system uses virtualization to\ngenerate shared memory that does not physically exist.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4883, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9ca3c541-f414-4c7d-b0d7-7db0c20601bb": {"__data__": {"id_": "9ca3c541-f414-4c7d-b0d7-7db0c20601bb", "embedding": null, "metadata": {"page_label": "1", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "46298fdd-9e96-4be0-84db-adc501e9dd94", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b1a56b1b57826493566ea9f884372f09b0064e984f6f444daa7f23c32fd4938d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dbd3796d-e736-4b3d-a83c-c4168922bd7e", "node_type": "1", "metadata": {"page_label": "1", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "493110b2685005bc30b0a39f007bb9909cc666e82e8f4dfbf75018ac5835fbec", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c80d02cd-3678-464d-8a36-57de8b1ab234", "node_type": "1", "metadata": {}, "hash": "2905f19441b497cabed485ccc5dd48f7f32bf7bcb365ceb983a7bead67335c6d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Multicomputers were developed because large multiprocessors\nare difficult to engineer and prohibitively expensive;[17] they are universal in cloud computing because of the size of the machine needed.[18] The different CPUs often need to send and receive messages to each\nother;[19] to ensure good performance, the operating systems for these machines need to minimize this copying of packets.[20] Newer systems are often multiqueue\u2014separating groups of users into separate\nqueues\u2014to reduce the need for packet copying and support more concurrent users.[21] Another technique is remote direct memory access, which enables each CPU to access memory belonging to other CPUs.[19]\nMulticomputer operating systems often support remote procedure calls where a CPU can call a procedure on another CPU,[22] or distributed shared memory, in which the operating system uses virtualization to\ngenerate shared memory that does not physically exist.[23]\nA distributed system is a group of distinct, networked computers\u2014each of which might have their own operating system and file system. Unlike multicomputers, they may be dispersed anywhere in the world.[24]\nMiddleware, an additional software layer between the operating system and applications, is often used to improve consistency. Although it functions similarly to an operating system, it is not a true operating\nsystem.[25]\nEmbedded operating systems are designed to be used in embedded computer systems, whether they are internet of things objects or not connected to a network. Embedded systems include many household\nappliances. The distinguishing factor is that they do not load user-installed software. Consequently, they do not need protection between different applications, enabling simpler designs. Very small operating\nsystems might run in less than 10 kilobytes,[26] and the smallest are for smart cards.[27] Examples include Embedded Linux, QNX, VxWorks, and the extra-small systems RIOT and TinyOS.[28]\nA real-time operating system is an operating system that guarantees to process events or data by or at a specific moment in time. Hard real-time systems require exact timing and are common in manufacturing,\navionics, military, and other similar uses.[28] With soft real-time systems, the occasional missed event is acceptable; this category often includes audio or multimedia systems, as well as smartphones.[28] In order\nfor hard real-time systems be sufficiently exact in their timing, often they are just a library with no protection between applications, such as eCos.[28]\nA hypervisor is an operating system that runs a virtual machine. The virtual machine is unaware that it is an application and operates as if it had its own hardware.[14][29] Virtual machines can be paused, saved,\nand resumed, making them useful for operating systems research, development,[30] and debugging.[31] They also enhance portability by enabling applications to be run on a computer even if they are not\ncompatible with the base operating system.[14]\nA library operating system (libOS) is one in which the services that a typical operating system provides, such as networking, are provided in the form of libraries and composed with a single application and\nconfiguration code to construct a unikernel: [32] a specialized (only the absolute necessary pieces of code are extracted from libraries and bound together [33]), single address space, machine image that can be\ndeployed to cloud or embedded environments.\nThe operating system code and application code are not executed in separated protection domains (there is only a single application running, at least conceptually, so there is no need to prevent interference\nbetween applications) and OS services are accessed via simple library calls (potentially inlining them based on compiler thresholds), without the usual overhead of context switches, [34] in a way similarly to\nembedded and real-time OSes. Note that this overhead is not negligible: to the direct cost of mode switching it's necessary to add the indirect pollution of important processor structures (like CPU caches, the\ninstruction pipeline, and so on) which affects both user-mode and kernel-mode performance. [35]\nThe first computers in the late 1940s and 1950s were directly programmed either with plugboards or with machine code inputted on media such as punch cards, without programming languages or operating\nsystems.[36] After the introduction of the transistor in the mid-1950s, mainframes began to be built. These still needed professional operators[36] who manually do what a modern operating system would do, such\nas scheduling programs to run,[37] but mainframes still had rudimentary operating systems such as Fortran Monitor System (FMS) and IBSYS.", "mimetype": "text/plain", "start_char_idx": 3948, "end_char_idx": 8675, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c80d02cd-3678-464d-8a36-57de8b1ab234": {"__data__": {"id_": "c80d02cd-3678-464d-8a36-57de8b1ab234", "embedding": null, "metadata": {"page_label": "1", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "46298fdd-9e96-4be0-84db-adc501e9dd94", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b1a56b1b57826493566ea9f884372f09b0064e984f6f444daa7f23c32fd4938d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9ca3c541-f414-4c7d-b0d7-7db0c20601bb", "node_type": "1", "metadata": {"page_label": "1", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "20206b7432d9e84d7126880dc794b2cd792d6cb90025b799804be769ace6e213", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Note that this overhead is not negligible: to the direct cost of mode switching it's necessary to add the indirect pollution of important processor structures (like CPU caches, the\ninstruction pipeline, and so on) which affects both user-mode and kernel-mode performance. [35]\nThe first computers in the late 1940s and 1950s were directly programmed either with plugboards or with machine code inputted on media such as punch cards, without programming languages or operating\nsystems.[36] After the introduction of the transistor in the mid-1950s, mainframes began to be built. These still needed professional operators[36] who manually do what a modern operating system would do, such\nas scheduling programs to run,[37] but mainframes still had rudimentary operating systems such as Fortran Monitor System (FMS) and IBSYS.[38] In the 1960s, IBM introduced the first series of intercompatible\ncomputers (System/360). All of them ran the same operating system\u2014OS/360\u2014which consisted of millions of lines of assembly language that had thousands of bugs. The OS/360 also was the first popular\noperating system to support multiprogramming, such that the CPU could be put to use on one job while another was waiting on input/output (I/O). Holding multiple jobs in memory necessitated memory\npartitioning and safeguards against one job accessing the memory allocated to a different one.[39]\nAround the same time, teleprinters began to be used as terminals so multiple users could access the computer simultaneously. The operating system MULTICS was intended to allow hundreds of users to access a\nlarge computer. Despite its limited adoption, it can be considered the precursor to cloud computing. The UNIX operating system originated as a development of MULTICS for a single user.[40] Because UNIX's\nsource code was available, it became the basis of other, incompatible operating systems, of which the most successful were AT&T's System V and the University of California's Berkeley Software Distribution\n(BSD).[41] To increase compatibility, the IEEE released the POSIX standard for operating system application programming interfaces (APIs), which is supported by most UNIX systems. MINIX was a stripped-\ndown version of UNIX, developed in 1987 for educational uses, that inspired the commercially available, free software Linux. Since 2008, MINIX is used in controllers of most Intel microchips, while Linux is\nwidespread in data centers and Android smartphones.[42]\nDefinition and purpose\nTypes of operating systems\nMulticomputer operating systems\nDistributed systems\nEmbedded\nReal-time\nHypervisor\nLibrary\nHistory\n6/7/25, 7:32 PM Operating system - Wikipedia\nhttps://en.wikipedia.org/wiki/Operating_system 1/6", "mimetype": "text/plain", "start_char_idx": 7852, "end_char_idx": 10560, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fb44efbf-0cda-4c65-bb8b-411648350433": {"__data__": {"id_": "fb44efbf-0cda-4c65-bb8b-411648350433", "embedding": null, "metadata": {"page_label": "2", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1c6a9ef1-a6b6-473a-8951-9ae03b1c4b32", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "944dd796d050d11752cb05ad94a3d957d6906cb14f3816a489a614613e883cbc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b2f7f865-0cb4-47d9-a810-5b73ac69fc53", "node_type": "1", "metadata": {}, "hash": "d8473b2cf18d01e67da6c4cb193b1bd6da4f09fdef9d5d35ca9faa584e30f947", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "IBM System/360 Model 50 operator's\nconsole and CPU; the operator's console\nis a terminal used by the operating\nsystem to communicate with the operator.\nCommand-line interface of the MS-DOS\noperating system\nGraphical user interface of a\nMacintosh\nA kernel connects the application\nsoftware to the hardware of a computer.\nThe invention of large scale integration enabled the production of personal computers (initially called microcomputers) from around 1980.[43] For around five years, the\nCP/M (Control Program for Microcomputers) was the most popular operating system for microcomputers.[44] Later, IBM bought the DOS (Disk Operating System) from\nMicrosoft. After modifications requested by IBM, the resulting system was called MS-DOS (MicroSoft Disk Operating System) and was widely used on IBM\nmicrocomputers. Later versions increased their sophistication, in part by borrowing features from UNIX.[44]\nApple's Macintosh was the first popular computer to use a graphical user interface (GUI). The GUI proved much more user friendly than the text-only command-line\ninterface earlier operating systems had used. Following the success of Macintosh, MS-DOS was updated with a GUI overlay called Windows. Windows later was rewritten as\na stand-alone operating system, borrowing so many features from another (VAX VMS) that a large legal settlement was paid.[45] In the twenty-first century, Windows\ncontinues to be popular on personal computers but has less market share of servers. UNIX operating systems, especially Linux, are the most popular on enterprise systems\nand servers but are also used on mobile devices and many other computer systems.[46]\nOn mobile devices, Symbian OS was dominant at first, being usurped by BlackBerry OS (introduced 2002) and iOS for iPhones (from 2007). Later on, the open-source\nAndroid operating system (introduced 2008), with a Linux kernel and a C library (Bionic) partially based on BSD code, became most popular.[47]\nThe components of an operating system are designed to ensure that various parts of a computer function cohesively. With the de facto obsoletion of DOS, all user software\nmust interact with the operating system to access hardware.\nThe kernel is the part of the operating system that provides protection between different applications and users. This protection is key to improving reliability by keeping\nerrors isolated to one program, as well as security by limiting the power of malicious software and protecting private data, and ensuring that one program cannot\nmonopolize the computer's resources.[48] Most operating systems have two modes of operation:[49] in user mode, the hardware checks that the software is only executing\nlegal instructions, whereas the kernel has unrestricted powers and is not subject to these checks.[50] The kernel also manages memory for other processes and controls\naccess to input/output devices.[51]\nThe operating system provides an interface between an application program and the computer hardware, so that an application program can interact with the hardware\nonly by obeying rules and procedures programmed into the operating system. The operating system is also a set of services which simplify development and execution of\napplication programs. Executing an application program typically involves the creation of a process by the operating system kernel, which assigns memory space and other\nresources, establishes a priority for the process in multi-tasking systems, loads program binary code into memory, and initiates execution of the application program, which\nthen interacts with the user and with hardware devices. However, in some systems an application can request that the operating system execute another application within the\nsame process, either as a subroutine or in a separate thread, e.g., the LINK and ATTACH facilities of OS/360 and successors.\nAn interrupt (also known as an abort, exception, fault, signal,[52] or trap)[53] provides an efficient way for most operating systems to react to the environment. Interrupts\ncause the central processing unit (CPU) to have a control flow change away from the currently running program to an interrupt handler, also known as an interrupt service\nroutine (ISR).[54][55] An interrupt service routine may cause the central processing unit (CPU) to have a context switch.[56][a] The details of how a computer processes an\ninterrupt vary from architecture to architecture, and the details of how interrupt service routines behave vary from operating system to operating system.[57] However, several\ninterrupt functions are common.[57] The architecture and operating system must:[57]\n1. transfer control to an interrupt service routine.\n2. save the state of the currently running process.\n3. restore the state after the interrupt is serviced.\nA software interrupt is a message to a process that an event has occurred.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4867, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b2f7f865-0cb4-47d9-a810-5b73ac69fc53": {"__data__": {"id_": "b2f7f865-0cb4-47d9-a810-5b73ac69fc53", "embedding": null, "metadata": {"page_label": "2", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1c6a9ef1-a6b6-473a-8951-9ae03b1c4b32", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "944dd796d050d11752cb05ad94a3d957d6906cb14f3816a489a614613e883cbc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fb44efbf-0cda-4c65-bb8b-411648350433", "node_type": "1", "metadata": {"page_label": "2", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "4ce3612736cb32f48b25297398b035eb64638e09dfabc5fab093f56724267e3e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fc26c0ad-6ef9-4b20-8718-a3d4160d9985", "node_type": "1", "metadata": {}, "hash": "cc988b7225e2888f4d3936da9c57e56c3fc3eafe54aaefcea28c028b077de645", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Interrupts\ncause the central processing unit (CPU) to have a control flow change away from the currently running program to an interrupt handler, also known as an interrupt service\nroutine (ISR).[54][55] An interrupt service routine may cause the central processing unit (CPU) to have a context switch.[56][a] The details of how a computer processes an\ninterrupt vary from architecture to architecture, and the details of how interrupt service routines behave vary from operating system to operating system.[57] However, several\ninterrupt functions are common.[57] The architecture and operating system must:[57]\n1. transfer control to an interrupt service routine.\n2. save the state of the currently running process.\n3. restore the state after the interrupt is serviced.\nA software interrupt is a message to a process that an event has occurred.[52] This contrasts with a hardware interrupt \u2014 which is a message to the central processing unit\n(CPU) that an event has occurred.[58] Software interrupts are similar to hardware interrupts \u2014 there is a change away from the currently running process.[59] Similarly,\nboth hardware and software interrupts execute an interrupt service routine.\nSoftware interrupts may be normally occurring events. It is expected that a time slice will occur, so the kernel will have to perform a context switch.[60] A computer program\nmay set a timer to go off after a few seconds in case too much data causes an algorithm to take too long.[61]\nSoftware interrupts may be error conditions, such as a malformed machine instruction.[61] However, the most common error conditions are division by zero and accessing an invalid memory address.[61]\nUsers can send messages to the kernel to modify the behavior of a currently running process.[61] For example, in the command-line environment, pressing the interrupt character (usually Control-C) might\nterminate the currently running process.[61]\nTo generate software interrupts for x86 CPUs, the INT assembly language instruction is available.[62] The syntax is INT X, where X is the offset number (in hexadecimal format) to the interrupt vector table.\nTo generate software interrupts in Unix-like operating systems, the kill(pid,signum) system call will send a signal to another process.[63] pid is the process identifier of the receiving process. signum is the\nsignal number (in mnemonic format)[b] to be sent. (The abrasive name of kill was chosen because early implementations only terminated the process.)[64]\nIn Unix-like operating systems, signals inform processes of the occurrence of asynchronous events.[63] To communicate asynchronously, interrupts are required.[65] One reason a process needs to asynchronously\ncommunicate to another process solves a variation of the classic reader/writer problem.[66] The writer receives a pipe from the shell for its output to be sent to the reader's input stream.[67] The command-line\nsyntax is alpha | bravo. alpha will write to the pipe when its computation is ready and then sleep in the wait queue.[68] bravo will then be moved to the ready queue and soon will read from its input\nstream.[69] The kernel will generate software interrupts to coordinate the piping.[69]\nSignals may be classified into 7 categories.[63] The categories are:\n1. when a process \ufb01nishes normally.\n2. when a process has an error exception.\n3. when a process runs out of a system resource.\n4. when a process executes an illegal instruction.\n5. when a process sets an alarm event.\n6. when a process is aborted from the keyboard.\n7. when a process has a tracing alert for debugging.\nInput/output (I/O) devices are slower than the CPU. Therefore, it would slow down the computer if the CPU had to wait for each I/O to finish. Instead, a computer may implement interrupts for I/O completion,\navoiding the need for polling or busy waiting.[70]\nSome computers require an interrupt for each character or word, costing a significant amount of CPU time. Direct memory access (DMA) is an architecture feature to allow devices to bypass the CPU and access\nmain memory directly.[71] (Separate from the architecture, a device may perform direct memory access[c] to and from main memory either directly or via a bus.)[72][d]\nWhen a computer user types a key on the keyboard, typically the character appears immediately on the screen. Likewise, when a user moves a mouse, the cursor immediately moves across the screen. Each\nkeystroke and mouse movement generates an interrupt called Interrupt-driven I/O. An interrupt-driven I/O occurs when a process causes an interrupt for every character[72] or word[73] transmitted.", "mimetype": "text/plain", "start_char_idx": 4021, "end_char_idx": 8626, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fc26c0ad-6ef9-4b20-8718-a3d4160d9985": {"__data__": {"id_": "fc26c0ad-6ef9-4b20-8718-a3d4160d9985", "embedding": null, "metadata": {"page_label": "2", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1c6a9ef1-a6b6-473a-8951-9ae03b1c4b32", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "944dd796d050d11752cb05ad94a3d957d6906cb14f3816a489a614613e883cbc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b2f7f865-0cb4-47d9-a810-5b73ac69fc53", "node_type": "1", "metadata": {"page_label": "2", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b991ab41addd32b4ea39fd71fc40124b5ac8e8f11b12580ea79c4ca83e19d16f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Instead, a computer may implement interrupts for I/O completion,\navoiding the need for polling or busy waiting.[70]\nSome computers require an interrupt for each character or word, costing a significant amount of CPU time. Direct memory access (DMA) is an architecture feature to allow devices to bypass the CPU and access\nmain memory directly.[71] (Separate from the architecture, a device may perform direct memory access[c] to and from main memory either directly or via a bus.)[72][d]\nWhen a computer user types a key on the keyboard, typically the character appears immediately on the screen. Likewise, when a user moves a mouse, the cursor immediately moves across the screen. Each\nkeystroke and mouse movement generates an interrupt called Interrupt-driven I/O. An interrupt-driven I/O occurs when a process causes an interrupt for every character[72] or word[73] transmitted.\nMicrocomputers\nComponents\nKernel\nProgram execution\nInterrupts\nSoftware interrupt\nSignal\nHardware interrupt\nInput/output\nInterrupt-driven I/O\n6/7/25, 7:32 PM Operating system - Wikipedia\nhttps://en.wikipedia.org/wiki/Operating_system 2/6", "mimetype": "text/plain", "start_char_idx": 7744, "end_char_idx": 8863, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "780bba18-859c-42b9-ba4b-7a3322976468": {"__data__": {"id_": "780bba18-859c-42b9-ba4b-7a3322976468", "embedding": null, "metadata": {"page_label": "3", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "63154e71-a06f-4ea6-9ce1-69f9b846286b", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "3058f375ccdc36ad4bb3348d3c5830cb12f71265bdb74c61050a43b2a94cddb4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "591991e9-b6b6-4fbf-a9bf-b205cccc233e", "node_type": "1", "metadata": {}, "hash": "b568555a590d000431f4d335387d2a0848dfc6597600b57e77455ff25d2e3ca5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Many operating systems can \"trick\"\nprograms into using memory scattered\naround the hard disk and RAM as if it is\none continuous chunk of memory, called\nvirtual memory.\nFile systems allow users and programs to\norganize and sort \ufb01les on a computer,\noften through the use of directories (or\nfolders).\nDevices such as hard disk drives, solid-state drives, and magnetic tape drives can transfer data at a rate high enough that interrupting the CPU for every byte or word transferred, and having the CPU transfer the\nbyte or word between the device and memory, would require too much CPU time. Data is, instead, transferred between the device and memory independently of the CPU by hardware such as a channel or a direct\nmemory access controller; an interrupt is delivered only when all the data is transferred.[74]\nIf a computer program executes a system call to perform a block I/O write operation, then the system call might execute the following instructions:\nSet the contents of the CPU's registers (including the program counter) into the process control block.[ 7 5 ] \nCreate an entry in the device-status table.[ 7 6 ]  The operating system maintains this table to keep track of which processes are waiting for which devices. One \ufb01eld in the table is the memory address of the\nprocess control block.\nPlace all the characters to be sent to the device into a memory buffer.[ 6 5 ] \nSet the memory address of the memory buffer to a predetermined device register.[ 7 7 ] \nSet the buffer size (an integer) to another predetermined register.[ 7 7 ] \nExecute the machine instruction to begin the writing.\nPerform a context switch to the next process in the ready queue.\nWhile the writing takes place, the operating system will context switch to other processes as normal. When the device finishes writing, the device will interrupt the currently running process by asserting an\ninterrupt request. The device will also place an integer onto the data bus.[78] Upon accepting the interrupt request, the operating system will:\nPush the contents of the program counter (a register) followed by the status register onto the call stack.[ 5 7 ] \nPush the contents of the other registers onto the call stack. (Alternatively, the contents of the registers may be placed in a system table.)[ 7 8 ] \nRead the integer from the data bus. The integer is an offset to the interrupt vector table. The vector table's instructions will then:\nAccess the device-status table.\nExtract the process control block.\nPerform a context switch back to the writing process.\nWhen the writing process has its time slice expired, the operating system will:[79]\nPop from the call stack the registers other than the status register and program counter.\nPop from the call stack the status register.\nPop from the call stack the address of the next instruction, and set it back into the program counter.\nWith the program counter now reset, the interrupted process will resume its time slice.[57]\nAmong other things, a multiprogramming operating system kernel must be responsible for managing all system memory which is currently in use by the programs. This ensures that a program does not interfere\nwith memory already in use by another program. Since programs time share, each program must have independent access to memory.\nCooperative memory management, used by many early operating systems, assumes that all programs make voluntary use of the kernel's memory manager, and do not exceed their allocated memory. This system\nof memory management is almost never seen anymore, since programs often contain bugs which can cause them to exceed their allocated memory. If a program fails, it may cause memory used by one or more\nother programs to be affected or overwritten. Malicious programs or viruses may purposefully alter another program's memory, or may affect the operation of the operating system itself. With cooperative memory\nmanagement, it takes only one misbehaved program to crash the system.\nMemory protection enables the kernel to limit a process' access to the computer's memory. Various methods of memory protection exist, including memory segmentation and paging. All methods require some\nlevel of hardware support (such as the 80286 MMU), which does not exist in all computers.\nIn both segmentation and paging, certain protected mode registers specify to the CPU what memory address it should allow a running program to access. Attempts to access other addresses trigger an interrupt,\nwhich causes the CPU to re-enter supervisor mode, placing the kernel in charge. This is called a segmentation violation or Seg-V for short, and since it is both difficult to assign a meaningful result to such an\noperation, and because it is usually a sign of a misbehaving program, the kernel generally resorts to terminating the offending program, and reports the error.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4832, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "591991e9-b6b6-4fbf-a9bf-b205cccc233e": {"__data__": {"id_": "591991e9-b6b6-4fbf-a9bf-b205cccc233e", "embedding": null, "metadata": {"page_label": "3", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "63154e71-a06f-4ea6-9ce1-69f9b846286b", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "3058f375ccdc36ad4bb3348d3c5830cb12f71265bdb74c61050a43b2a94cddb4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "780bba18-859c-42b9-ba4b-7a3322976468", "node_type": "1", "metadata": {"page_label": "3", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "4cdf0789254f3029abc835b227d7e04340f85a55165f2dea859af469446bba31", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5e4ad184-c9b8-4310-97c8-b894f6edfc27", "node_type": "1", "metadata": {}, "hash": "a6e5dc89f09bd14bd627007929b7e972869274c913822f5a868ab07a30795da5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "With cooperative memory\nmanagement, it takes only one misbehaved program to crash the system.\nMemory protection enables the kernel to limit a process' access to the computer's memory. Various methods of memory protection exist, including memory segmentation and paging. All methods require some\nlevel of hardware support (such as the 80286 MMU), which does not exist in all computers.\nIn both segmentation and paging, certain protected mode registers specify to the CPU what memory address it should allow a running program to access. Attempts to access other addresses trigger an interrupt,\nwhich causes the CPU to re-enter supervisor mode, placing the kernel in charge. This is called a segmentation violation or Seg-V for short, and since it is both difficult to assign a meaningful result to such an\noperation, and because it is usually a sign of a misbehaving program, the kernel generally resorts to terminating the offending program, and reports the error.\nWindows versions 3.1 through ME had some level of memory protection, but programs could easily circumvent the need to use it. A general protection fault would be produced, indicating a segmentation violation\nhad occurred; however, the system would often crash anyway.\nThe use of virtual memory addressing (such as paging or segmentation) means that the kernel can choose what memory each program may use at any given time, allowing\nthe operating system to use the same memory locations for multiple tasks.\nIf a program tries to access memory that is not accessible[e] memory, but nonetheless has been allocated to it, the kernel is interrupted . This kind of interrupt is typically a\npage fault.\nWhen the kernel detects a page fault it generally adjusts the virtual memory range of the program which triggered it, granting it access to the memory requested. This gives\nthe kernel discretionary power over where a particular application's memory is stored, or even whether or not it has been allocated yet.\nIn modern operating systems, memory which is accessed less frequently can be temporarily stored on a disk or other media to make that space available for use by other\nprograms. This is called swapping, as an area of memory can be used by multiple programs, and what that memory area contains can be swapped or exchanged on demand.\nVirtual memory provides the programmer or the user with the perception that there is a much larger amount of RAM in the computer than is really there.[80]\nConcurrency refers to the operating system's ability to carry out multiple tasks simultaneously.[81] Virtually all modern operating systems support concurrency.[82]\nThreads enable splitting a process' work into multiple parts that can run simultaneously.[83] The number of threads is not limited by the number of processors available. If\nthere are more threads than processors, the operating system kernel schedules, suspends, and resumes threads, controlling when each thread runs and how much CPU time\nit receives.[84] During a context switch a running thread is suspended, its state is saved into the thread control block and stack, and the state of the new thread is loaded\nin.[85] Historically, on many systems a thread could run until it relinquished control (cooperative multitasking). Because this model can allow a single thread to monopolize\nthe processor, most operating systems now can interrupt a thread (preemptive multitasking).[86]\nThreads have their own thread ID, program counter (PC), a register set, and a stack, but share code, heap data, and other resources with other threads of the same\nprocess.[87][88] Thus, there is less overhead to create a thread than a new process.[89] On single-CPU systems, concurrency is switching between processes. Many computers\nhave multiple CPUs.[90] Parallelism with multiple threads running on different CPUs can speed up a program, depending on how much of it can be executed\nconcurrently.[91]\nPermanent storage devices used in twenty-first century computers, unlike volatile dynamic random-access memory (DRAM), are still accessible after a crash or power\nfailure. Permanent (non-volatile) storage is much cheaper per byte, but takes several orders of magnitude longer to access, read, and write.[92][93] The two main\ntechnologies are a hard drive consisting of magnetic disks, and flash memory (a solid-state drive that stores data in electrical circuits). The latter is more expensive but\nfaster and more durable.[94][95]\nFile systems are an abstraction used by the operating system to simplify access to permanent storage. They provide human-readable filenames and other metadata, increase\nperformance via amortization of accesses, prevent multiple threads from accessing the same section of memory, and include checksums to identify corruption.", "mimetype": "text/plain", "start_char_idx": 3869, "end_char_idx": 8632, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5e4ad184-c9b8-4310-97c8-b894f6edfc27": {"__data__": {"id_": "5e4ad184-c9b8-4310-97c8-b894f6edfc27", "embedding": null, "metadata": {"page_label": "3", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "63154e71-a06f-4ea6-9ce1-69f9b846286b", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "3058f375ccdc36ad4bb3348d3c5830cb12f71265bdb74c61050a43b2a94cddb4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "591991e9-b6b6-4fbf-a9bf-b205cccc233e", "node_type": "1", "metadata": {"page_label": "3", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "c3fbca226464cb154900553c40b02b0c11ad2a36203d8e8a370dfc60ace681ad", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "[91]\nPermanent storage devices used in twenty-first century computers, unlike volatile dynamic random-access memory (DRAM), are still accessible after a crash or power\nfailure. Permanent (non-volatile) storage is much cheaper per byte, but takes several orders of magnitude longer to access, read, and write.[92][93] The two main\ntechnologies are a hard drive consisting of magnetic disks, and flash memory (a solid-state drive that stores data in electrical circuits). The latter is more expensive but\nfaster and more durable.[94][95]\nFile systems are an abstraction used by the operating system to simplify access to permanent storage. They provide human-readable filenames and other metadata, increase\nperformance via amortization of accesses, prevent multiple threads from accessing the same section of memory, and include checksums to identify corruption.[96] File\nsystems are composed of files (named collections of data, of an arbitrary size) and directories (also called folders) that list human-readable filenames and other\ndirectories.[97] An absolute file path begins at the root directory and lists subdirectories divided by punctuation, while a relative path defines the location of a file from a\ndirectory.[98][99]\nSystem calls (which are sometimes wrapped by libraries) enable applications to create, delete, open, and close files, as well as link, read, and write to them. All these\noperations are carried out by the operating system on behalf of the application.[100] The operating system's efforts to reduce latency include storing recently requested\nblocks of memory in a cache and prefetching data that the application has not asked for, but might need next.[101] Device drivers are software specific to each input/output\n(I/O) device that enables the operating system to work without modification over different hardware.[102][103]\nAnother component of file systems is a dictionary that maps a file's name and metadata to the data block where its contents are stored.[104] Most file systems use directories to convert file names to file numbers.\nTo find the block number, the operating system uses an index (often implemented as a tree).[105] Separately, there is a free space map to track free blocks, commonly implemented as a bitmap.[105] Although any\nfree block can be used to store a new file, many operating systems try to group together files in the same directory to maximize performance, or periodically reorganize files to reduce fragmentation.[106]\nDirect memory access\nMemory management\nVirtual memory\nConcurrency\nFile system\n6/7/25, 7:32 PM Operating system - Wikipedia\nhttps://en.wikipedia.org/wiki/Operating_system 3/6", "mimetype": "text/plain", "start_char_idx": 7772, "end_char_idx": 10426, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dc25e83e-6a6b-4746-8797-5e62327f3df7": {"__data__": {"id_": "dc25e83e-6a6b-4746-8797-5e62327f3df7", "embedding": null, "metadata": {"page_label": "4", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9239f300-edb3-4abf-9e6e-0cf5c3c18997", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "432363c45726fa198ef852ef679799961f731a535f5282fdc26aeb26d078850d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9d4e8267-2e76-4731-8c79-fe904fb7b063", "node_type": "1", "metadata": {}, "hash": "b222d6266279c5005e176df64732c5b5c8d7bb7bac1d476cf6471e0f4bd8146f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Layers of a Linux system\nSecurity descriptor for a \ufb01le that is read-only by default,\nspeci\ufb01ed no access for Elvis, read/write access for\nCathy, and full access for Ida, the owner of the \ufb01le[ 1 4 0 ] \nMaintaining data reliability in the face of a computer crash or hardware failure is another concern.[107] File writing protocols are designed with atomic operations so as not to leave permanent storage in a partially\nwritten, inconsistent state in the event of a crash at any point during writing.[108] Data corruption is addressed by redundant storage (for example, RAID\u2014redundant array of inexpensive disks)[109][110] and\nchecksums to detect when data has been corrupted. With multiple layers of checksums and backups of a file, a system can recover from multiple hardware failures. Background processes are often used to detect\nand recover from data corruption.[110]\nSecurity means protecting users from other users of the same computer, as well as from those who seeking remote access to it over a network.[111] Operating systems security rests on achieving the CIA triad:\nconfidentiality (unauthorized users cannot access data), integrity (unauthorized users cannot modify data), and availability (ensuring that the system remains available to authorized users, even in the event of a\ndenial of service attack).[112] As with other computer systems, isolating security domains\u2014in the case of operating systems, the kernel, processes, and virtual machines\u2014is key to achieving security.[113] Other ways\nto increase security include simplicity to minimize the attack surface, locking access to resources by default, checking all requests for authorization, principle of least authority (granting the minimum privilege\nessential for performing a task), privilege separation, and reducing shared data.[114]\nSome operating system designs are more secure than others. Those with no isolation between the kernel and applications are least secure, while those with a monolithic kernel like most general-purpose operating\nsystems are still vulnerable if any part of the kernel is compromised. A more secure design features microkernels that separate the kernel's privileges into many separate security domains and reduce the\nconsequences of a single kernel breach.[115] Unikernels are another approach that improves security by minimizing the kernel and separating out other operating systems functionality by application.[115]\nMost operating systems are written in C or C++, which create potential vulnerabilities for exploitation. Despite attempts to protect against them, vulnerabilities are caused by buffer overflow attacks, which are\nenabled by the lack of bounds checking.[116] Hardware vulnerabilities, some of them caused by CPU optimizations, can also be used to compromise the operating system.[117] There are known instances of\noperating system programmers deliberately implanting vulnerabilities, such as back doors.[118]\nOperating systems security is hampered by their increasing complexity and the resulting inevitability of bugs.[119] Because formal verification of operating systems may not be feasible, developers use operating\nsystem hardening to reduce vulnerabilities,[120] e.g. address space layout randomization, control-flow integrity,[121] access restrictions,[122] and other techniques.[123] There are no restrictions on who can\ncontribute code to open source operating systems; such operating systems have transparent change histories and distributed governance structures.[124] Open source developers strive to work collaboratively to\nfind and eliminate security vulnerabilities, using code review and type checking to expunge malicious code.[125][126] Andrew S. Tanenbaum advises releasing the source code of all operating systems, arguing that it\nprevents developers from placing trust in secrecy and thus relying on the unreliable practice of security by obscurity.[127]\nA user interface (UI) is essential to support human interaction with a computer. The two most common user interface types for any computer are\ncommand-line interface, where computer commands are typed, line-by-line,\ngraphical user interface (GUI) using a visual environment, most commonly a combination of the window, icon, menu, and pointer elements, also known as WIMP.\nFor personal computers, including smartphones and tablet computers, and for workstations, user input is typically from a combination of keyboard, mouse, and trackpad or touchscreen, all of which are connected\nto the operating system with specialized software.[128] Personal computer users who are not software developers or coders often prefer GUIs for both input and output; GUIs are supported by most personal\ncomputers.[129] The software to support GUIs is more complex than a command line for input and plain text output. Plain text output is often preferred by programmers, and is easy to support.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4870, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9d4e8267-2e76-4731-8c79-fe904fb7b063": {"__data__": {"id_": "9d4e8267-2e76-4731-8c79-fe904fb7b063", "embedding": null, "metadata": {"page_label": "4", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9239f300-edb3-4abf-9e6e-0cf5c3c18997", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "432363c45726fa198ef852ef679799961f731a535f5282fdc26aeb26d078850d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dc25e83e-6a6b-4746-8797-5e62327f3df7", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "3975fe95e8fbd3ebb7167a6a1a3498ebf9529a4d1e526709afe20a12289e56ef", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8b73de1a-1dc8-4bf3-ad73-761ac5e7e07f", "node_type": "1", "metadata": {}, "hash": "fac0e03473cdf4592b1b058acd4fd60101cd1206d5139866771fedc4d3609fcd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The two most common user interface types for any computer are\ncommand-line interface, where computer commands are typed, line-by-line,\ngraphical user interface (GUI) using a visual environment, most commonly a combination of the window, icon, menu, and pointer elements, also known as WIMP.\nFor personal computers, including smartphones and tablet computers, and for workstations, user input is typically from a combination of keyboard, mouse, and trackpad or touchscreen, all of which are connected\nto the operating system with specialized software.[128] Personal computer users who are not software developers or coders often prefer GUIs for both input and output; GUIs are supported by most personal\ncomputers.[129] The software to support GUIs is more complex than a command line for input and plain text output. Plain text output is often preferred by programmers, and is easy to support.[130]\nA hobby operating system may be classified as one whose code has not been directly derived from an existing operating system, and has few users and active developers.[131]\nIn some cases, hobby development is in support of a \"homebrew\" computing device, for example, a simple single-board computer powered by a 6502 microprocessor. Or, development may be for an architecture\nalready in widespread use. Operating system development may come from entirely new concepts, or may commence by modeling an existing operating system. In either case, the hobbyist is her/his own\ndeveloper, or may interact with a small and sometimes unstructured group of individuals who have like interests.\nExamples of hobby operating systems include Syllable and TempleOS.\nIf an application is written for use on a specific operating system, and is ported to another OS, the functionality required by that application may be implemented differently by that OS (the names of functions,\nmeaning of arguments, etc.) requiring the application to be adapted, changed, or otherwise maintained.\nThis cost in supporting operating systems diversity can be avoided by instead writing applications against software platforms such as Java or Qt. These abstractions have already borne the cost of adaptation to\nspecific operating systems and their system libraries.\nAnother approach is for operating system vendors to adopt standards. For example, POSIX and OS abstraction layers provide commonalities that reduce porting costs.\nAs of September\u00a02024, Android (based on the Linux kernel) is the most popular operating system with a 46% market share, followed by Microsoft Windows at 26%, iOS and iPadOS at 18%, macOS at 5%, and\nLinux at 1%. Android, iOS, and iPadOS are mobile operating systems, while Windows, macOS, and Linux are desktop operating systems.[3]\nLinux is a free software distributed under the GNU General Public License (GPL), which means that all of its derivatives are legally required to\nrelease their source code.[132] Linux was designed by programmers for their own use, thus emphasizing simplicity and consistency, with a small\nnumber of basic elements that can be combined in nearly unlimited ways, and avoiding redundancy.[133]\nIts design is similar to other UNIX systems not using a microkernel.[134] It is written in C[135] and uses UNIX System V syntax, but also supports\nBSD syntax. Linux supports standard UNIX networking features, as well as the full suite of UNIX tools, while supporting multiple users and\nemploying preemptive multitasking. Initially of a minimalist design, Linux is a flexible system that can work in under 16 MB of RAM, but still is\nused on large multiprocessor systems.[134] Similar to other UNIX systems, Linux distributions are composed of a kernel, system libraries, and\nsystem utilities.[136] Linux has a graphical user interface (GUI) with a desktop, folder and file icons, as well as the option to access the operating\nsystem via a command line.[137]\nAndroid is a partially open-source operating system closely based on Linux and has become the most widely used operating system by users, due\nto its popularity on smartphones and, to a lesser extent, embedded systems needing a GUI, such as \"smart watches, automotive dashboards,\nairplane seatbacks, medical devices, and home appliances\".[138] Unlike Linux, much of Android is written in Java and uses object-oriented\ndesign.[139]\nWindows is a proprietary operating system that is widely used on desktop computers, laptops, tablets, phones, workstations, enterprise servers, and Xbox\nconsoles.[141] The operating system was designed for \"security, reliability, compatibility, high performance, extensibility, portability, and international\nsupport\"\u2014later on, energy efficiency and support for dynamic devices also became priorities.", "mimetype": "text/plain", "start_char_idx": 3977, "end_char_idx": 8678, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8b73de1a-1dc8-4bf3-ad73-761ac5e7e07f": {"__data__": {"id_": "8b73de1a-1dc8-4bf3-ad73-761ac5e7e07f", "embedding": null, "metadata": {"page_label": "4", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9239f300-edb3-4abf-9e6e-0cf5c3c18997", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "432363c45726fa198ef852ef679799961f731a535f5282fdc26aeb26d078850d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9d4e8267-2e76-4731-8c79-fe904fb7b063", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "c4f867c0aabd9639f3f6a5185b80a43bb1f36c4c8174f31897ec939852441045", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "[137]\nAndroid is a partially open-source operating system closely based on Linux and has become the most widely used operating system by users, due\nto its popularity on smartphones and, to a lesser extent, embedded systems needing a GUI, such as \"smart watches, automotive dashboards,\nairplane seatbacks, medical devices, and home appliances\".[138] Unlike Linux, much of Android is written in Java and uses object-oriented\ndesign.[139]\nWindows is a proprietary operating system that is widely used on desktop computers, laptops, tablets, phones, workstations, enterprise servers, and Xbox\nconsoles.[141] The operating system was designed for \"security, reliability, compatibility, high performance, extensibility, portability, and international\nsupport\"\u2014later on, energy efficiency and support for dynamic devices also became priorities.[142]\nWindows Executive works via kernel-mode objects for important data structures like processes, threads, and sections (memory objects, for example files).[143]\nThe operating system supports demand paging of virtual memory, which speeds up I/O for many applications. I/O device drivers use the Windows Driver\nModel.[143] The NTFS file system has a master table and each file is represented as a record with metadata.[144] The scheduling includes preemptive\nmultitasking.[145] Windows has many security features;[146] especially important are the use of access-control lists and integrity levels. Every process has an\nauthentication token and each object is given a security descriptor. Later releases have added even more security features.[144]\nComparison of operating systems\nDBOS\nInterruptible operating system\nList of operating systems\nList of pioneers in computer science\nGlossary of operating systems terms\nMicrocontroller\nNetwork operating system\nObject-oriented operating system\nLisp machine\nOperating System Projects\nSystem Commander\nSecurity\nUser interface\nOperating system development as a hobby\nDiversity of operating systems and portability\nPopular operating systems\nLinux\nMicrosoft Windows\nSee also\n6/7/25, 7:32 PM Operating system - Wikipedia\nhttps://en.wikipedia.org/wiki/Operating_system 4/6", "mimetype": "text/plain", "start_char_idx": 7841, "end_char_idx": 9989, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "48413bed-a843-4cb3-8f02-dabfeabdb347": {"__data__": {"id_": "48413bed-a843-4cb3-8f02-dabfeabdb347", "embedding": null, "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e1d7974-7c21-4c29-8b07-a74a0345358c", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "e824572a2b40f6990121fa36de9854fba5456bb667a5535f92e4d4386e08a420", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6c5e7b95-5665-4f6c-8041-c0f7892ec3b6", "node_type": "1", "metadata": {}, "hash": "d2393cb8c0ae8c18041492db9644d9f7a5f877041c91167af7c640b7ee5f2d13", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "System image Timeline of operating systems\na. Modern CPUs provide instructions (e.g. SYSENTER) to invoke selected kernel services without an interrupts. Visit https://wiki.osdev.org/SYSENTER for more information.\nb. Examples include SIGINT, SIGSEGV, and SIGBUS.\nc. often in the form of a DMA chip for smaller systems and I/O channels for larger systems\nd. Modern motherboards have a DMA controller. Additionally, a device may also have one. Visit SCSI RDMA Protocol.\ne. There are several reasons that the memory might be inaccessible\nThe address might be out of range\nThe address might refer to a page or segment that has been moved to a backing store\nThe address might refer to memory that has restricted access due to, e.g., key, ring.\n1. Stallings (2005). Operating Systems, Internals and Design\nPrinciples. Pearson: Prentice Hall. p.\u00a06.\n2. Dhotre, I.A. (2009). Operating Systems. Technical Publications.\np.\u00a01.\n3. \"Operating System Market Share Worldwide\" (https://gs.statcoun\nter.com/os-market-share). StatCounter Global Stats. Retrieved\n20 December 2024.\n4. \"VII. Special-Purpose Systems - Operating System Concepts,\nSeventh Edition [Book]\" (https://www.oreilly.com/library/view/oper\nating-system-concepts/9780471694663/pt07.html).\nwww.oreilly.com. Archived (https://web.archive.org/web/2021061\n3190049/https://www.oreilly.com/library/view/operating-system-c\noncepts/9780471694663/pt07.html) from the original on 13 June\n2021. Retrieved 8 February 2021.\n5. \"Special-Purpose Operating Systems - RWTH AACHEN\nUNIVERSITY Institute for Automation of Complex Power\nSystems - English\" (https://www.acs.eonerc.rwth-aachen.de/cms/\nE-ON-ERC-ACS/Studium/Lehrveranstaltungen/~lrhs/Spezial-Bet\nriebssysteme/?lidx=1). www.acs.eonerc.rwth-aachen.de.\nArchived (https://web.archive.org/web/20210614034001/https://w\nww.acs.eonerc.rwth-aachen.de/cms/E-ON-ERC-ACS/Studium/Le\nhrveranstaltungen/~lrhs/Spezial-Betriebssysteme/?lidx=1) from\nthe original on 14 June 2021. Retrieved 8 February 2021.\n6. Tanenbaum & Bos 2023, p.\u00a04.\n7. Anderson & Dahlin 2014, p.\u00a06.\n8. Silberschatz et al. 2018, p.\u00a06.\n9. Anderson & Dahlin 2014, p.\u00a07.\n10. Anderson & Dahlin 2014, pp.\u00a09\u201310.\n11. Tanenbaum & Bos 2023, pp.\u00a06\u20137.\n12. Anderson & Dahlin 2014, p.\u00a010.\n13. Tanenbaum & Bos 2023, p.\u00a05.\n14. Anderson & Dahlin 2014, p.\u00a011.\n15. Anderson & Dahlin 2014, pp.\u00a07, 9, 13.\n16. Anderson & Dahlin 2014, pp.\u00a012\u201313.\n17. Tanenbaum & Bos 2023, p.\u00a0557.\n18. Tanenbaum & Bos 2023, p.\u00a0558.\n19. Tanenbaum & Bos 2023, p.\u00a0565.\n20. Tanenbaum & Bos 2023, p.\u00a0562.\n21. Tanenbaum & Bos 2023, p.\u00a0563.\n22. Tanenbaum & Bos 2023, p.\u00a0569.\n23. Tanenbaum & Bos 2023, p.\u00a0571.\n24. Tanenbaum & Bos 2023, p.\u00a0579.\n25. Tanenbaum & Bos 2023, p.\u00a0581.\n26. Tanenbaum & Bos 2023, pp.\u00a037\u201338.\n27. Tanenbaum & Bos 2023, p.\u00a039.\n28. Tanenbaum & Bos 2023, p.\u00a038.\n29.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2779, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6c5e7b95-5665-4f6c-8041-c0f7892ec3b6": {"__data__": {"id_": "6c5e7b95-5665-4f6c-8041-c0f7892ec3b6", "embedding": null, "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e1d7974-7c21-4c29-8b07-a74a0345358c", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "e824572a2b40f6990121fa36de9854fba5456bb667a5535f92e4d4386e08a420", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "48413bed-a843-4cb3-8f02-dabfeabdb347", "node_type": "1", "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "f73363f900a2879e1114c365718ef81dd7d572120dc7d663476be198c03342d8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "51e65ec8-d0c1-4e31-a1c9-64d0ba8875b2", "node_type": "1", "metadata": {}, "hash": "7b480a4ebde979730af06bfdd5c54adeed7c101d07c1fa97aed5ed4ba6171ef4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "18. Tanenbaum & Bos 2023, p.\u00a0558.\n19. Tanenbaum & Bos 2023, p.\u00a0565.\n20. Tanenbaum & Bos 2023, p.\u00a0562.\n21. Tanenbaum & Bos 2023, p.\u00a0563.\n22. Tanenbaum & Bos 2023, p.\u00a0569.\n23. Tanenbaum & Bos 2023, p.\u00a0571.\n24. Tanenbaum & Bos 2023, p.\u00a0579.\n25. Tanenbaum & Bos 2023, p.\u00a0581.\n26. Tanenbaum & Bos 2023, pp.\u00a037\u201338.\n27. Tanenbaum & Bos 2023, p.\u00a039.\n28. Tanenbaum & Bos 2023, p.\u00a038.\n29. Silberschatz et al. 2018, pp.\u00a0701.\n30. Silberschatz et al. 2018, pp.\u00a0705.\n31. Anderson & Dahlin 2014, p.\u00a012.\n32. Madhavapeddy, Anil; Scott, David J (November 2013).\n\"Unikernels: Rise of the Virtual Library Operating System: What if\nall the software layers in a virtual appliance were compiled within\nthe same safe, high-level language framework?\" (https://doi.org/\n10.1145/2557963.2566628). Queue. Vol.\u00a011, no.\u00a011. New York,\nNY, USA: ACM. pp.\u00a030\u201344. doi:10.1145/2557963.2566628 (http\ns://doi.org/10.1145%2F2557963.2566628). ISSN\u00a01542-7730 (htt\nps://search.worldcat.org/issn/1542-7730). Retrieved 7 August\n2024.\n33. \"Build Process - Unikraft\" (https://unikraft.org/docs/concepts/build\n-process). Archived (https://web.archive.org/web/2024042218373\n4/https://unikraft.org/docs/concepts/build-process) from the\noriginal on 22 April 2024. Retrieved 8 August 2024.\n34. \"Leave your OS at home: the rise of library operating systems\" (h\nttps://www.sigarch.org/leave-your-os-at-home-the-rise-of-library-\noperating-systems/). ACM SIGARCH. 14 September 2017.\nArchived (https://web.archive.org/web/20240301072916/https://w\nww.sigarch.org/leave-your-os-at-home-the-rise-of-library-operatin\ng-systems/) from the original on 1 March 2024. Retrieved\n7 August 2024.\n35. Soares, Livio Baldini; Stumm, Michael (4 October 2010). FlexSC:\nFlexible System Call Scheduling with Exception-Less System\nCalls (https://www.usenix.org/conference/osdi10/\ufb02exsc-\ufb02exible-s\nystem-call-scheduling-exception-less-system-calls). OSDI '10,\n9th USENIX Symposium on Operating System Design and\nImplementation (https://www.usenix.org/legacy/events/osdi10/).\nUSENIX. Retrieved 9 August 2024. p.\u00a02: \"Synchronous\nimplementation of system calls negatively impacts the\nperformance of system intensive workloads, both in terms of the\ndirect costs of mode switching and, more interestingly, in terms\nof the indirect pollution of important processor structures which\naffects both user-mode and kernel-mode performance. A\nmotivating example that quanti\ufb01es the impact of system call\npollution on application performance can be seen in Figure 1. It\ndepicts the user-mode instructions per cycles (kernel cycles and\ninstructions are ignored) of one of the SPEC CPU 2006\nbenchmarks (Xalan) immediately before and after a pwrite\nsystem call. There is a signi\ufb01cant drop in instructions per cycle\n(IPC) due to the system call, and it takes up to 14,000 cycles of\nexecution before the IPC of this application returns to its previous\nlevel. As we will show, this performance degradation is mainly\ndue to interference caused by the kernel on key processor\nstructures.\"\n36. Tanenbaum & Bos 2023, p.\u00a08.\n37.", "mimetype": "text/plain", "start_char_idx": 2401, "end_char_idx": 5424, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "51e65ec8-d0c1-4e31-a1c9-64d0ba8875b2": {"__data__": {"id_": "51e65ec8-d0c1-4e31-a1c9-64d0ba8875b2", "embedding": null, "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e1d7974-7c21-4c29-8b07-a74a0345358c", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "e824572a2b40f6990121fa36de9854fba5456bb667a5535f92e4d4386e08a420", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6c5e7b95-5665-4f6c-8041-c0f7892ec3b6", "node_type": "1", "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "aa200dd51e2c2d47e926fa16db6a333c213e418183f99530474f8867eba4e0ea", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3887897c-efd0-47c6-9ce2-f9f8d178f4a6", "node_type": "1", "metadata": {}, "hash": "d7ad222897aba146562c8a8b7c9b482e2ccebee7fdbec0f28a78496c7ee5b89d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "A\nmotivating example that quanti\ufb01es the impact of system call\npollution on application performance can be seen in Figure 1. It\ndepicts the user-mode instructions per cycles (kernel cycles and\ninstructions are ignored) of one of the SPEC CPU 2006\nbenchmarks (Xalan) immediately before and after a pwrite\nsystem call. There is a signi\ufb01cant drop in instructions per cycle\n(IPC) due to the system call, and it takes up to 14,000 cycles of\nexecution before the IPC of this application returns to its previous\nlevel. As we will show, this performance degradation is mainly\ndue to interference caused by the kernel on key processor\nstructures.\"\n36. Tanenbaum & Bos 2023, p.\u00a08.\n37. Arpaci-Dusseau, Remzi; Arpaci-Dusseau, Andrea (2015).\nOperating Systems: Three Easy Pieces (http://pages.cs.wisc.ed\nu/~remzi/OSTEP/). Archived (https://web.archive.org/web/20160\n725012948/http://pages.cs.wisc.edu/~remzi/OSTEP/) from the\noriginal on 25 July 2016. Retrieved 25 July 2016.\n38. Tanenbaum & Bos 2023, p.\u00a010.\n39. Tanenbaum & Bos 2023, pp.\u00a011\u201312.\n40. Tanenbaum & Bos 2023, pp.\u00a013\u201314.\n41. Tanenbaum & Bos 2023, pp.\u00a014\u201315.\n42. Tanenbaum & Bos 2023, p.\u00a015.\n43. Tanenbaum & Bos 2023, pp.\u00a015\u201316.\n44. Tanenbaum & Bos 2023, p.\u00a016.\n45. Tanenbaum & Bos 2023, p.\u00a017.\n46. Tanenbaum & Bos 2023, p.\u00a018.\n47. Tanenbaum & Bos 2023, pp.\u00a019\u201320.\n48. Anderson & Dahlin 2014, pp.\u00a039\u201340.\n49. Tanenbaum & Bos 2023, p.\u00a02.\n50. Anderson & Dahlin 2014, pp.\u00a041, 45.\n51. Anderson & Dahlin 2014, pp.\u00a052\u201353.\n52. Kerrisk, Michael (2010). The Linux Programming Interface. No\nStarch Press. p.\u00a0388. ISBN\u00a0978-1-59327-220-3. \"A signal is a\nnoti\ufb01cation to a process that an event has occurred. Signals are\nsometimes described as software interrupts.\"\n53. Hyde, Randall (1996). \"Chapter Seventeen: Interrupts, Traps and\nExceptions (Part 1)\" (https://www.plantation-productions.com/We\nbster/www.artofasm.com/DOS/ch17/CH17-1.html#HEADING1-\n0). The Art Of Assembly Language Programming. No Starch\nPress. Archived (https://web.archive.org/web/20211222205623/ht\ntps://www.plantation-productions.com/Webster/www.artofasm.co\nm/DOS/ch17/CH17-1.html#HEADING1-0) from the original on 22\nDecember 2021. Retrieved 22 December 2021. \"The concept of\nan interrupt is something that has expanded in scope over the\nyears. The 80x86 family has only added to the confusion\nsurrounding interrupts by introducing the int (software interrupt)\ninstruction. Indeed, different manufacturers have used terms like\nexceptions, faults, aborts, traps and interrupts to describe the\nphenomena this chapter discusses. Unfortunately there is no\nclear consensus as to the exact meaning of these terms.\nDifferent authors adopt different terms to their own use.\"\n54. Tanenbaum, Andrew S. (1990). Structured Computer\nOrganization, Third Edition (https://archive.org/details/structuredc\nomput00tane/page/308). Prentice Hall. p.\u00a0308 (https://archive.or\ng/details/structuredcomput00tane/page/308). ISBN\u00a0978-0-13-\n854662-5. \"Like the trap, the interrupt stops the running program\nand transfers control to an interrupt handler, which performs\nsome appropriate action. When \ufb01nished, the interrupt handler\nreturns control to the interrupted program.\"", "mimetype": "text/plain", "start_char_idx": 4751, "end_char_idx": 7902, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3887897c-efd0-47c6-9ce2-f9f8d178f4a6": {"__data__": {"id_": "3887897c-efd0-47c6-9ce2-f9f8d178f4a6", "embedding": null, "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e1d7974-7c21-4c29-8b07-a74a0345358c", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "e824572a2b40f6990121fa36de9854fba5456bb667a5535f92e4d4386e08a420", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "51e65ec8-d0c1-4e31-a1c9-64d0ba8875b2", "node_type": "1", "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "5588d2903b1a151813fab30b0b43f9a0a02f972c903fc80bc902e32e299039a5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "37478217-bb1d-499f-ab2c-191816c8fabc", "node_type": "1", "metadata": {}, "hash": "d9c4dfab56c29b2f14884c668aa0d47481244b15ec050e4da23c3c915ec44bc8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Indeed, different manufacturers have used terms like\nexceptions, faults, aborts, traps and interrupts to describe the\nphenomena this chapter discusses. Unfortunately there is no\nclear consensus as to the exact meaning of these terms.\nDifferent authors adopt different terms to their own use.\"\n54. Tanenbaum, Andrew S. (1990). Structured Computer\nOrganization, Third Edition (https://archive.org/details/structuredc\nomput00tane/page/308). Prentice Hall. p.\u00a0308 (https://archive.or\ng/details/structuredcomput00tane/page/308). ISBN\u00a0978-0-13-\n854662-5. \"Like the trap, the interrupt stops the running program\nand transfers control to an interrupt handler, which performs\nsome appropriate action. When \ufb01nished, the interrupt handler\nreturns control to the interrupted program.\"\n55. Silberschatz, Abraham (1994). Operating System Concepts,\nFourth Edition. Addison-Wesley. p.\u00a032. ISBN\u00a0978-0-201-50480-4.\n\"When an interrupt (or trap) occurs, the hardware transfers\ncontrol to the operating system. First, the operating system\npreserves the state of the CPU by storing registers and the\nprogram counter. Then, it determines which type of interrupt has\noccurred. For each type of interrupt, separate segments of code\nin the operating system determine what action should be taken.\"\n56. Silberschatz, Abraham (1994). Operating System Concepts,\nFourth Edition. Addison-Wesley. p.\u00a0105. ISBN\u00a0978-0-201-50480-\n4. \"Switching the CPU to another process requires saving the\nstate of the old process and loading the saved state for the new\nprocess. This task is known as a context switch.\"\n57. Silberschatz, Abraham (1994). Operating System Concepts,\nFourth Edition. Addison-Wesley. p.\u00a031. ISBN\u00a0978-0-201-50480-4.\n58. Silberschatz, Abraham (1994). Operating System Concepts,\nFourth Edition. Addison-Wesley. p.\u00a030. ISBN\u00a0978-0-201-50480-4.\n\"Hardware may trigger an interrupt at any time by sending a\nsignal to the CPU, usually by way of the system bus.\"\n59. Kerrisk, Michael (2010). The Linux Programming Interface. No\nStarch Press. p.\u00a0388. ISBN\u00a0978-1-59327-220-3. \"Signals are\nanalogous to hardware interrupts in that they interrupt the normal\n\ufb02ow of execution of a program; in most cases, it is not possible to\npredict exactly when a signal will arrive.\"\n60. Kerrisk, Michael (2010). The Linux Programming Interface. No\nStarch Press. p.\u00a0388. ISBN\u00a0978-1-59327-220-3. \"Among the\ntypes of events that cause the kernel to generate a signal for a\nprocess are the following: A software event occurred. For\nexample, ... the process's CPU time limit was exceeded[.]\"\n61. Kerrisk, Michael (2010). The Linux Programming Interface. No\nStarch Press. p.\u00a0388. ISBN\u00a0978-1-59327-220-3.\n62. \"Intel\u00ae 64 and IA-32 Architectures Software Developer's Manual\"\n(https://www.intel.com/content/dam/www/public/us/en/document\ns/manuals/64-ia-32-architectures-software-developer-instruction-\nset-reference-manual-325383.pdf) (PDF). Intel Corporation.\nSeptember 2016. p.\u00a0610. Archived (https://web.archive.org/web/2\n0220323231921/https://www.intel.com/content/dam/www/public/u\ns/en/documents/manuals/64-ia-32-architectures-software-develo\nper-instruction-set-reference-manual-325383.pdf) (PDF) from the\noriginal on 23 March 2022. Retrieved 5 May 2022.\n63. Bach, Maurice J. (1986). The Design of the UNIX Operating\nSystem. Prentice-Hall. p.\u00a0200. ISBN\u00a00-13-201799-7.\n64. Kerrisk, Michael (2010). The Linux Programming Interface.", "mimetype": "text/plain", "start_char_idx": 7130, "end_char_idx": 10507, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "37478217-bb1d-499f-ab2c-191816c8fabc": {"__data__": {"id_": "37478217-bb1d-499f-ab2c-191816c8fabc", "embedding": null, "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e1d7974-7c21-4c29-8b07-a74a0345358c", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "e824572a2b40f6990121fa36de9854fba5456bb667a5535f92e4d4386e08a420", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3887897c-efd0-47c6-9ce2-f9f8d178f4a6", "node_type": "1", "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "493d6346fbc1edb3a1bb4bbefe9246949fbe508e59dd03b46c2209d96e0e218b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b3b2ef9f-a809-43a5-b42a-c0c8e781299d", "node_type": "1", "metadata": {}, "hash": "3032956b8957d7657cd9f8be828e3560decd68528e3975829868a2d2a170e5bd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Intel Corporation.\nSeptember 2016. p.\u00a0610. Archived (https://web.archive.org/web/2\n0220323231921/https://www.intel.com/content/dam/www/public/u\ns/en/documents/manuals/64-ia-32-architectures-software-develo\nper-instruction-set-reference-manual-325383.pdf) (PDF) from the\noriginal on 23 March 2022. Retrieved 5 May 2022.\n63. Bach, Maurice J. (1986). The Design of the UNIX Operating\nSystem. Prentice-Hall. p.\u00a0200. ISBN\u00a00-13-201799-7.\n64. Kerrisk, Michael (2010). The Linux Programming Interface. No\nStarch Press. p.\u00a0400. ISBN\u00a0978-1-59327-220-3.\n65. Tanenbaum, Andrew S. (1990). Structured Computer\nOrganization, Third Edition (https://archive.org/details/structuredc\nomput00tane/page/308). Prentice Hall. p.\u00a0308 (https://archive.or\ng/details/structuredcomput00tane/page/308). ISBN\u00a0978-0-13-\n854662-5.\n66. Silberschatz, Abraham (1994). Operating System Concepts,\nFourth Edition. Addison-Wesley. p.\u00a0182. ISBN\u00a0978-0-201-50480-\n4.\n67. Haviland, Keith; Salama, Ben (1987). UNIX System\nProgramming. Addison-Wesley Publishing Company. p.\u00a0153.\nISBN\u00a00-201-12919-1.\n68. Haviland, Keith; Salama, Ben (1987). UNIX System\nProgramming. Addison-Wesley Publishing Company. p.\u00a0148.\nISBN\u00a00-201-12919-1.\n69. Haviland, Keith; Salama, Ben (1987). UNIX System\nProgramming. Addison-Wesley Publishing Company. p.\u00a0149.\nISBN\u00a00-201-12919-1.\n70. Tanenbaum, Andrew S. (1990). Structured Computer\nOrganization, Third Edition (https://archive.org/details/structuredc\nomput00tane/page/292). Prentice Hall. p.\u00a0292 (https://archive.or\ng/details/structuredcomput00tane/page/292). ISBN\u00a0978-0-13-\n854662-5.\n71. IBM (September 1968), \"Main Storage\" (http://bitsavers.org/pdf/i\nbm/360/princOps/A22-6821-7_360PrincOpsDec67.pdf#page=8)\n(PDF), IBM System/360 Principles of Operation (http://bitsavers.\norg/pdf/ibm/360/princOps/A22-6821-7_360PrincOpsDec67.pdf)\n(PDF), Eighth Edition, p.\u00a07, archived (https://web.archive.org/we\nb/20220319083255/http://bitsavers.org/pdf/ibm/360/princOps/A2\n2-6821-7_360PrincOpsDec67.pdf) (PDF) from the original on 19\nMarch 2022, retrieved 13 April 2022\n72. Tanenbaum, Andrew S. (1990). Structured Computer\nOrganization, Third Edition (https://archive.org/details/structuredc\nomput00tane/page/294). Prentice Hall. p.\u00a0294 (https://archive.or\ng/details/structuredcomput00tane/page/294). ISBN\u00a0978-0-13-\n854662-5.\n73. \"Program Interrupt Controller (PIC)\" (http://bitsavers.org/pdf/dec/\npdp7/F-75_PDP-7userHbk_Jun65.pdf#page=62) (PDF). Users\nHandbook - PDP-7 (http://bitsavers.org/pdf/dec/pdp7/F-75_PDP-\n7userHbk_Jun65.pdf) (PDF). Digital Equipment Corporation.\n1965. pp.\u00a048 (http://bitsavers.org/pdf/dec/pdp7/F-75_PDP-7user\nHbk_Jun65.pdf#page=63). F-75.", "mimetype": "text/plain", "start_char_idx": 10014, "end_char_idx": 12650, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b3b2ef9f-a809-43a5-b42a-c0c8e781299d": {"__data__": {"id_": "b3b2ef9f-a809-43a5-b42a-c0c8e781299d", "embedding": null, "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e1d7974-7c21-4c29-8b07-a74a0345358c", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "e824572a2b40f6990121fa36de9854fba5456bb667a5535f92e4d4386e08a420", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "37478217-bb1d-499f-ab2c-191816c8fabc", "node_type": "1", "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "dea121136e957ff2e01b8b877ec5731be7ee4e1605626f248668df92a464709c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "790b42c6-3cae-4fcc-8527-1b9ef1f24eaa", "node_type": "1", "metadata": {}, "hash": "55e99d595a6234ed47b283e437fa4da7ac8badc7cf3a0dea4ab2fdc98e6f1832", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Prentice Hall. p.\u00a0294 (https://archive.or\ng/details/structuredcomput00tane/page/294). ISBN\u00a0978-0-13-\n854662-5.\n73. \"Program Interrupt Controller (PIC)\" (http://bitsavers.org/pdf/dec/\npdp7/F-75_PDP-7userHbk_Jun65.pdf#page=62) (PDF). Users\nHandbook - PDP-7 (http://bitsavers.org/pdf/dec/pdp7/F-75_PDP-\n7userHbk_Jun65.pdf) (PDF). Digital Equipment Corporation.\n1965. pp.\u00a048 (http://bitsavers.org/pdf/dec/pdp7/F-75_PDP-7user\nHbk_Jun65.pdf#page=63). F-75. Archived (https://web.archive.or\ng/web/20220510164742/http://bitsavers.org/pdf/dec/pdp7/F-75_P\nDP-7userHbk_Jun65.pdf) (PDF) from the original on 10 May\n2022. Retrieved 20 April 2022.\n74. PDP-1 Input-Output Systems Manual (http://bitsavers.org/pdf/de\nc/pdp1/F25_PDP1_IO.pdf) (PDF). Digital Equipment\nCorporation. pp.\u00a019\u201320. Archived (https://web.archive.org/web/20\n190125050839/http://bitsavers.org/pdf/dec/pdp1/F25_PDP1_IO.p\ndf) (PDF) from the original on 25 January 2019. Retrieved\n16 August 2022.\n75. Silberschatz, Abraham (1994). Operating System Concepts,\nFourth Edition. Addison-Wesley. p.\u00a032. ISBN\u00a0978-0-201-50480-4.\n76. Silberschatz, Abraham (1994). Operating System Concepts,\nFourth Edition. Addison-Wesley. p.\u00a034. ISBN\u00a0978-0-201-50480-4.\n77. Tanenbaum, Andrew S. (1990). Structured Computer\nOrganization, Third Edition (https://archive.org/details/structuredc\nomput00tane/page/295). Prentice Hall. p.\u00a0295 (https://archive.or\ng/details/structuredcomput00tane/page/295). ISBN\u00a0978-0-13-\n854662-5.\n78. Tanenbaum, Andrew S. (1990). Structured Computer\nOrganization, Third Edition (https://archive.org/details/structuredc\nomput00tane/page/309). Prentice Hall. p.\u00a0309 (https://archive.or\ng/details/structuredcomput00tane/page/309). ISBN\u00a0978-0-13-\n854662-5.\n79. Tanenbaum, Andrew S. (1990). Structured Computer\nOrganization, Third Edition (https://archive.org/details/structuredc\nomput00tane/page/310). Prentice Hall. p.\u00a0310 (https://archive.or\ng/details/structuredcomput00tane/page/310). ISBN\u00a0978-0-13-\n854662-5.\n80. Stallings, William (2008). Computer Organization & Architecture.\nNew Delhi: Prentice-Hall of India Private Limited. p.\u00a0267.\nISBN\u00a0978-81-203-2962-1.\n81. Anderson & Dahlin 2014, p.\u00a0129.\n82. Silberschatz et al. 2018, p.\u00a0159.\n83. Anderson & Dahlin 2014, p.\u00a0130.\n84. Anderson & Dahlin 2014, p.\u00a0131.\n85. Anderson & Dahlin 2014, pp.\u00a0157, 159.\n86. Anderson & Dahlin 2014, p.\u00a0139.\n87. Silberschatz et al. 2018, p.\u00a0160.\n88. Anderson & Dahlin 2014, p.\u00a0183.\n89. Silberschatz et al. 2018, p.\u00a0162.\n90. Silberschatz et al. 2018, pp.\u00a0162\u2013163.\n91. Silberschatz et al. 2018, p.\u00a0164.\n92. Anderson & Dahlin 2014, pp.\u00a0492, 517.\n93. Tanenbaum & Bos 2023, pp.\u00a0259\u2013260.", "mimetype": "text/plain", "start_char_idx": 12200, "end_char_idx": 14815, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "790b42c6-3cae-4fcc-8527-1b9ef1f24eaa": {"__data__": {"id_": "790b42c6-3cae-4fcc-8527-1b9ef1f24eaa", "embedding": null, "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e1d7974-7c21-4c29-8b07-a74a0345358c", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "e824572a2b40f6990121fa36de9854fba5456bb667a5535f92e4d4386e08a420", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b3b2ef9f-a809-43a5-b42a-c0c8e781299d", "node_type": "1", "metadata": {"page_label": "5", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "99d91838ea9cd9b61bf6dade72cc0e77d10d573d140b16c7a2a54b11f265f0b3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "83. Anderson & Dahlin 2014, p.\u00a0130.\n84. Anderson & Dahlin 2014, p.\u00a0131.\n85. Anderson & Dahlin 2014, pp.\u00a0157, 159.\n86. Anderson & Dahlin 2014, p.\u00a0139.\n87. Silberschatz et al. 2018, p.\u00a0160.\n88. Anderson & Dahlin 2014, p.\u00a0183.\n89. Silberschatz et al. 2018, p.\u00a0162.\n90. Silberschatz et al. 2018, pp.\u00a0162\u2013163.\n91. Silberschatz et al. 2018, p.\u00a0164.\n92. Anderson & Dahlin 2014, pp.\u00a0492, 517.\n93. Tanenbaum & Bos 2023, pp.\u00a0259\u2013260.\n94. Anderson & Dahlin 2014, pp.\u00a0517, 530.\n95. Tanenbaum & Bos 2023, p.\u00a0260.\n96. Anderson & Dahlin 2014, pp.\u00a0492\u2013493.\n97. Anderson & Dahlin 2014, p.\u00a0496.\n98. Anderson & Dahlin 2014, pp.\u00a0496\u2013497.\n99. Tanenbaum & Bos 2023, pp.\u00a0274\u2013275.\n100. Anderson & Dahlin 2014, pp.\u00a0502\u2013504.\nNotes\nReferences\n6/7/25, 7:32 PM Operating system - Wikipedia\nhttps://en.wikipedia.org/wiki/Operating_system 5/6", "mimetype": "text/plain", "start_char_idx": 14392, "end_char_idx": 15203, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0240fc74-927d-4676-a842-f8e79d9ed2f7": {"__data__": {"id_": "0240fc74-927d-4676-a842-f8e79d9ed2f7", "embedding": null, "metadata": {"page_label": "6", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3713c18b-4c38-40fc-96fb-0fbff8b093f3", "node_type": "4", "metadata": {"page_label": "6", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "da7fa3b1082f8ce868e60358ffa742a27e7bd089b50961d714bf36e4af7f52c4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "995a6992-63c9-46e7-8870-37e2a964a4ba", "node_type": "1", "metadata": {}, "hash": "f0f47e44618af61861e12948706178834433a1b1d30e453603aae0be3081740c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "101. Anderson & Dahlin 2014, p.\u00a0507.\n102. Anderson & Dahlin 2014, p.\u00a0508.\n103. Tanenbaum & Bos 2023, p.\u00a0359.\n104. Anderson & Dahlin 2014, p.\u00a0545.\n105. Anderson & Dahlin 2014, p.\u00a0546.\n106. Anderson & Dahlin 2014, p.\u00a0547.\n107. Anderson & Dahlin 2014, pp.\u00a0589, 591.\n108. Anderson & Dahlin 2014, pp.\u00a0591\u2013592.\n109. Tanenbaum & Bos 2023, pp.\u00a0385\u2013386.\n110. Anderson & Dahlin 2014, p.\u00a0592.\n111. Tanenbaum & Bos 2023, pp.\u00a0605\u2013606.\n112. Tanenbaum & Bos 2023, p.\u00a0608.\n113. Tanenbaum & Bos 2023, p.\u00a0609.\n114. Tanenbaum & Bos 2023, pp.\u00a0609\u2013610.\n115. Tanenbaum & Bos 2023, p.\u00a0612.\n116. Tanenbaum & Bos 2023, pp.\u00a0648, 657.\n117. Tanenbaum & Bos 2023, pp.\u00a0668\u2013669, 674.\n118. Tanenbaum & Bos 2023, pp.\u00a0679\u2013680.\n119. Tanenbaum & Bos 2023, pp.\u00a0605, 617\u2013618.\n120. Tanenbaum & Bos 2023, pp.\u00a0681\u2013682.\n121. Tanenbaum & Bos 2023, p.\u00a0683.\n122. Tanenbaum & Bos 2023, p.\u00a0685.\n123. Tanenbaum & Bos 2023, p.\u00a0689.\n124. Richet & Bouaynaya 2023, p.\u00a092.\n125. Richet & Bouaynaya 2023, pp.\u00a092\u201393.\n126. Berntsso, Strand\u00e9n & Warg 2017, pp.\u00a0130\u2013131.\n127. Tanenbaum & Bos 2023, p.\u00a0611.\n128. Tanenbaum & Bos 2023, pp.\u00a0396, 402.\n129. Tanenbaum & Bos 2023, pp.\u00a0395, 408.\n130. Tanenbaum & Bos 2023, p.\u00a0402.\n131. Holwerda, Thom (20 December 2009). \"My OS Is Less Hobby\nthan Yours\" (https://www.osnews.com/story/22638/my-os-is-less-\nhobby-than-yours/). OS News. Retrieved 4 June 2024.\n132. Silberschatz et al. 2018, pp.\u00a0779\u2013780.\n133. Tanenbaum & Bos 2023, pp.\u00a0713\u2013714.\n134. Silberschatz et al. 2018, p.\u00a0780.\n135. Vaughan-Nichols, Steven (2022). \"Linus Torvalds prepares to\nmove the Linux kernel to modern C\" (https://www.zdnet.com/artic\nle/linus-torvalds-prepares-to-move-the-linux-kernel-to-modern-\nc/). ZDNET. Retrieved 7 February 2024.\n136. Silberschatz et al. 2018, p.\u00a0781.\n137. Tanenbaum & Bos 2023, pp.\u00a0715\u2013716.\n138. Tanenbaum & Bos 2023, pp.\u00a0793\u2013794.\n139. Tanenbaum & Bos 2023, p.\u00a0793.\n140. Tanenbaum & Bos 2023, pp.\u00a01021\u20131022.\n141. Tanenbaum & Bos 2023, p.\u00a0871.\n142. Silberschatz et al. 2018, p.\u00a0826.\n143. Tanenbaum & Bos 2023, p.\u00a01035.\n144. Tanenbaum & Bos 2023, p.\u00a01036.\n145. Silberschatz et al. 2018, p.\u00a0821.\n146. Silberschatz et al. 2018, p.\u00a0827.\nAnderson, Thomas; Dahlin, Michael (2014). Operating Systems: Principles and Practice. Recursive Books.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2215, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "995a6992-63c9-46e7-8870-37e2a964a4ba": {"__data__": {"id_": "995a6992-63c9-46e7-8870-37e2a964a4ba", "embedding": null, "metadata": {"page_label": "6", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3713c18b-4c38-40fc-96fb-0fbff8b093f3", "node_type": "4", "metadata": {"page_label": "6", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "da7fa3b1082f8ce868e60358ffa742a27e7bd089b50961d714bf36e4af7f52c4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0240fc74-927d-4676-a842-f8e79d9ed2f7", "node_type": "1", "metadata": {"page_label": "6", "file_name": "Operating system - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Operating system - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 1571112, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "d97db281479d84386ebce3c0f2dea07eac616912a8f654a32600383bd17aff68", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "138. Tanenbaum & Bos 2023, pp.\u00a0793\u2013794.\n139. Tanenbaum & Bos 2023, p.\u00a0793.\n140. Tanenbaum & Bos 2023, pp.\u00a01021\u20131022.\n141. Tanenbaum & Bos 2023, p.\u00a0871.\n142. Silberschatz et al. 2018, p.\u00a0826.\n143. Tanenbaum & Bos 2023, p.\u00a01035.\n144. Tanenbaum & Bos 2023, p.\u00a01036.\n145. Silberschatz et al. 2018, p.\u00a0821.\n146. Silberschatz et al. 2018, p.\u00a0827.\nAnderson, Thomas; Dahlin, Michael (2014). Operating Systems: Principles and Practice. Recursive Books. ISBN\u00a0978-0-9856735-2-9.\nAuslander, M. A.; Larkin, D. C.; Scherr, A. L. (September 1981). \"The Evolution of the MVS Operating System\". IBM Journal of Research and Development. 25 (5): 471\u2013482. doi:10.1147/rd.255.0471 (https://d\noi.org/10.1147%2Frd.255.0471). ISSN\u00a00018-8646 (https://search.worldcat.org/issn/0018-8646).\nBerntsson, Petter Sainio; Strand\u00e9n, Lars; Warg, Fredrik (2017). Evaluation of Open Source Operating Systems for Safety-Critical Applications. Springer International Publishing. pp.\u00a0117\u2013132. ISBN\u00a0978-3-319-\n65948-0.\nDeitel, Harvey M.; Deitel, Paul; Choffnes, David (25 December 2015). Operating Systems (https://archive.org/details/modernoperatings00tane). Pearson/Prentice Hall. ISBN\u00a0978-0-13-092641-8.\nBic, Lubomur F.; Shaw, Alan C. (2003). Operating Systems. Pearson: Prentice Hall.\nSilberschatz, Avi; Galvin, Peter; Gagne, Greg (2008). Operating Systems Concepts. John Wiley & Sons. ISBN\u00a0978-0-470-12872-5.\nO'Brien, J. A., & Marakas, G. M.(2011). Management Information Systems. 10e. McGraw-Hill Irwin.\nLeva, Alberto; Maggio, Martina; Papadopoulos, Alessandro Vittorio; Terraneo, Federico (2013). Control-based Operating System Design. IET. ISBN\u00a0978-1-84919-609-3.\nRichet, Jean-Loup; Bouaynaya, Wafa (2023). \"Understanding and Managing Complex Software Vulnerabilities: An Empirical Analysis of Open-Source Operating Systems\" (https://www.cairn.info/revue-system\nes-d-information-et-management-2023-1-page-87.htm.). Syst\u00e8mes d'information & management. 28 (1): 87\u2013114. doi:10.54695/sim.28.1.0087 (https://doi.org/10.54695%2Fsim.28.1.0087) (inactive 1\nNovember 2024).\nSilberschatz, Abraham; Galvin, Peter B.; Gagne, Greg (2018). Operating System Concepts (https://archive.org/details/operating-system-concepts-10th) (10\u00a0ed.). Wiley. ISBN\u00a0978-1-119-32091-3.\nTanenbaum, Andrew S.; Bos, Herbert (2023). Modern Operating Systems, Global Edition. Pearson Higher Ed. ISBN\u00a0978-1-292-72789-9.\nMultics History (http://www.cbi.umn.edu/iterations/haigh.html) and the history of operating systems\nRetrieved from \"https://en.wikipedia.org/w/index.php?title=Operating_system&oldid=1293233410\"\nFurther reading\nExternal links\n6/7/25, 7:32 PM Operating system - Wikipedia\nhttps://en.wikipedia.org/wiki/Operating_system 6/6", "mimetype": "text/plain", "start_char_idx": 1772, "end_char_idx": 4442, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c8df9663-c777-40c2-9521-c492afc11b9f": {"__data__": {"id_": "c8df9663-c777-40c2-9521-c492afc11b9f", "embedding": null, "metadata": {"page_label": "1", "file_name": "Programming language theory - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Programming language theory - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 388157, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8e431196-224e-418a-b1ab-ed0e7e3916aa", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Programming language theory - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Programming language theory - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 388157, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "2571bb856df9fd2f00951fdef91d5af62e866937055180a4cbf81b319f57d504", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "888c4bc3-0f17-4040-921c-88982914a1d2", "node_type": "1", "metadata": {}, "hash": "7c9901cac80b12233b5e234779e929b95d38c1ff9fe70ce3b5e1c32f9e77dc02", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The lowercase Greek letter \u03bb (lambda) is\nan unof\ufb01cial symbol of the \ufb01eld of\nprogramming-language theory. This\nusage derives from the lambda calculus,\na model of computation introduced by\nAlonzo Church in the 1930s and widely\nused by programming-language\nresearchers. It graces the cover of the\nclassic text Structure and Interpretation of\nComputer Programs,[ 1 ]  and the title of the\nso-called Lambda Papers of 1975 to\n1980, written by Gerald Jay Sussman\nand Guy L. Steele Jr., the developers of\nthe Scheme language.\nProgramming language theory\nProgramming language theory (PLT) is a branch of computer science that deals with the design, implementation, analysis, characterization, and classification of\nformal languages known as programming languages. Programming language theory is closely related to other fields including linguistics, mathematics, and software\nengineering.\nIn some ways, the history of programming language theory predates even the development of programming languages. The lambda calculus, developed by Alonzo Church\nand Stephen Cole Kleene in the 1930s, is considered by some to be the world's first programming language, even though it was intended to model computation rather than\nbeing a means for programmers to describe algorithms to a computer system. Many modern functional programming languages have been described as providing a \"thin\nveneer\" over the lambda calculus,[2] and many are described easily in terms of it.\nThe first programming language to be invented was Plankalk\u00fcl, which was designed by Konrad Zuse in the 1940s, but not publicly known until 1972, and not implemented\nuntil 1998. The first widely known and successful high-level programming language was FORTRAN (for Formula Translation), developed from 1954 to 1957 by a team of\nIBM researchers led by John Backus. The success of FORTRAN led to the formation of a committee of scientists to develop a \"universal\" computer language; the result of\ntheir effort was ALGOL 58. Separately, John McCarthy of Massachusetts Institute of Technology (MIT) developed Lisp, the first language with origins in academia to be\nsuccessful. With the success of these initial efforts, programming languages became an active topic of research in the 1960s and beyond.\nSome other key events in the history of programming language theory since then:\n1950s\nNoam Chomsky developed the Chomsky hierarchy in the \ufb01eld of linguistics, a discovery which has directly impacted programming language theory and other branches\nof computer science.\n1960s\nIn 1962, the Simula language was developed by Ole-Johan Dahl and Kristen Nygaard; it is widely considered to be the \ufb01rst example of an object-oriented programming language; Simula also introduced the\nconcept of coroutines.\nIn 1964, Peter Landin is the \ufb01rst to realize Church's lambda calculus can be used to model programming languages. He introduces the SECD machine which \"interprets\" lambda expressions.\nIn 1965, Landin introduces the J operator, essentially a form of continuation.\nIn 1966, Landin introduces ISWIM, an abstract computer programming language in his article The Next 700 Programming Languages. It is in\ufb02uential in the design of languages leading to the Haskell\nlanguage.\nIn 1966, Corrado B\u00f6hm introduced the language CUCH (Curry-Church).[ 3 ] \nIn 1967, Christopher Strachey publishes his in\ufb02uential set of lecture notes Fundamental Concepts in Programming Languages, introducing the terminology R-values, L-values, parametric polymorphism, and\nad hoc polymorphism.\nIn 1969, J. Roger Hindley publishes The Principal Type-Scheme of an Object in Combinatory Logic, later generalized into the Hindley\u2013Milner type inference algorithm.\nIn 1969, Tony Hoare introduces the Hoare logic, a form of axiomatic semantics.\nIn 1969, William Alvin Howard observed that a \"high-level\" proof system, referred to as natural deduction, can be directly interpreted in its intuitionistic version as a typed variant of the model of computation\nknown as lambda calculus. This became known as the Curry\u2013Howard correspondence.\n1970s\nIn 1970, Dana Scott \ufb01rst publishes his work on denotational semantics.\nIn 1972, logic programming and Prolog were developed thus allowing computer programs to be expressed as mathematical logic.\nA team of scientists at Xerox PARC led by Alan Kay develop Smalltalk, an object-oriented language widely known for its innovative development environment.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4397, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "888c4bc3-0f17-4040-921c-88982914a1d2": {"__data__": {"id_": "888c4bc3-0f17-4040-921c-88982914a1d2", "embedding": null, "metadata": {"page_label": "1", "file_name": "Programming language theory - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Programming language theory - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 388157, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8e431196-224e-418a-b1ab-ed0e7e3916aa", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Programming language theory - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Programming language theory - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 388157, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "2571bb856df9fd2f00951fdef91d5af62e866937055180a4cbf81b319f57d504", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c8df9663-c777-40c2-9521-c492afc11b9f", "node_type": "1", "metadata": {"page_label": "1", "file_name": "Programming language theory - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Programming language theory - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 388157, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "5e4169806ac066a6c35f4fa5f05bbd3760accfb7dbe96629551879f779cc9d70", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "In 1969, J. Roger Hindley publishes The Principal Type-Scheme of an Object in Combinatory Logic, later generalized into the Hindley\u2013Milner type inference algorithm.\nIn 1969, Tony Hoare introduces the Hoare logic, a form of axiomatic semantics.\nIn 1969, William Alvin Howard observed that a \"high-level\" proof system, referred to as natural deduction, can be directly interpreted in its intuitionistic version as a typed variant of the model of computation\nknown as lambda calculus. This became known as the Curry\u2013Howard correspondence.\n1970s\nIn 1970, Dana Scott \ufb01rst publishes his work on denotational semantics.\nIn 1972, logic programming and Prolog were developed thus allowing computer programs to be expressed as mathematical logic.\nA team of scientists at Xerox PARC led by Alan Kay develop Smalltalk, an object-oriented language widely known for its innovative development environment.\nIn 1974, John C. Reynolds discovers System F. It had already been discovered in 1971 by the mathematical logician Jean-Yves Girard.\nFrom 1975, Gerald Jay Sussman and Guy Steele develop the Scheme language, a Lisp dialect incorporating lexical scoping, a uni\ufb01ed namespace, and elements from the actor model including \ufb01rst-class\ncontinuations.\nBackus, at the 1977 Turing Award lecture, assailed the current state of industrial languages and proposed a new class of programming languages now known as function-level programming languages.\nIn 1977, Gordon Plotkin introduces Programming Computable Functions, an abstract typed functional language.\nIn 1978, Robin Milner introduces the Hindley\u2013Milner type system inference algorithm for ML language. Type theory became applied as a discipline to programming languages, this application has led to great\nadvances in type theory over the years.\n1980s\nIn 1981, Gordon Plotkin publishes his paper on structured operational semantics.\nIn 1988, Gilles Kahn published his paper on natural semantics.\nThere emerged process calculi, such as the Calculus of Communicating Systems of Robin Milner, and the Communicating sequential processes model of C. A. R. Hoare, as well as similar models of\nconcurrency such as the actor model of Carl Hewitt.\nIn 1985, the release of Miranda sparks an academic interest in lazy-evaluated purely functional programming languages. A committee was formed to de\ufb01ne an open standard resulting in the release of the\nHaskell 1.0 standard in 1990.\nBertrand Meyer created the methodology design by contract and incorporated it into the Eiffel language.\n1990s\nGregor Kiczales, Jim Des Rivieres and Daniel G. Bobrow published the book The Art of the Metaobject Protocol.\nEugenio Moggi and Philip Wadler introduced the use of monads for structuring programs written in functional programming languages.\nThere are several fields of study that either lie within programming language theory, or which have a profound influence on it; many of these have considerable overlap. In addition, PLT makes use of many other\nbranches of mathematics, including computability theory, category theory, and set theory.\nFormal semantics is the formal specification of the behaviour of computer programs and programming languages. Three common approaches to describe the semantics or \"meaning\" of a computer program are\ndenotational semantics, operational semantics and axiomatic semantics.\nType theory is the study of type systems; which are \"a tractable syntactic method for proving the absence of certain program behaviors by classifying phrases according to the kinds of values they compute\".[4]\nMany programming languages are distinguished by the characteristics of their type systems.\nProgram analysis is the general problem of examining a program and determining key characteristics (such as the absence of classes of program errors). Program transformation is the process of transforming a\nprogram in one form (language) to another form.\nComparative programming language analysis seeks to classify languages into different types based on their characteristics; broad categories of languages are often known as programming paradigms.\nMetaprogramming is the generation of higher-order programs which, when executed, produce programs (possibly in a different language, or in a subset of the original language) as a result.\nHistory\nTimeline\nSub-disciplines and related fields\nFormal semantics\nType theory\nProgram analysis and transformation\nComparative programming language analysis\nGeneric and metaprogramming\n6/7/25, 7:32 PM Programming language theory - Wikipedia\nhttps://en.wikipedia.org/wiki/Programming_language_theory 1/2", "mimetype": "text/plain", "start_char_idx": 3506, "end_char_idx": 8071, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "137fe230-c369-4b2a-a5e5-93070234bdfb": {"__data__": {"id_": "137fe230-c369-4b2a-a5e5-93070234bdfb", "embedding": null, "metadata": {"page_label": "2", "file_name": "Programming language theory - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Programming language theory - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 388157, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4dad9663-23e3-496c-b8ab-ff8deeefbbf9", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Programming language theory - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Programming language theory - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 388157, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "d798806235c2a95b1db21d1306ab39c5f47fa9006167895fefa15f9b900536b0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bb81c72e-7403-4826-8a45-658e64287486", "node_type": "1", "metadata": {}, "hash": "77ef374212c522b7b99e6a0e5f1421f7aebe8d9aa2be4b33076d971d8e5e16c6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Domain-specific languages are those constructed to efficiently solve problems in a given domain, or part of such.\nCompiler theory is the theory of writing compilers (or more generally, translators); programs that translate a program written in one language into another form. The actions of a compiler are traditionally broken\nup into syntax analysis (scanning and parsing), semantic analysis (determining what a program should do), optimization (improving the performance of a program as indicated by some metric; typically\nexecution speed) and code generation (generation and output of an equivalent program in some target language; often the instruction set architecture of a central processing unit (CPU)).\nRun-time systems refer to the development of programming language runtime environments and their components, including virtual machines, garbage collection, and foreign function interfaces.\nConferences are the primary venue for presenting research in programming languages. The most well known conferences include the Symposium on Principles of Programming Languages (POPL),\nProgramming Language Design and Implementation (PLDI), the International Conference on Functional Programming (ICFP), the international conference on Object-Oriented Programming, Systems,\nLanguages & Applications (OOPSLA) and the International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS).\nNotable journals that publish PLT research include the ACM Transactions on Programming Languages and Systems (TOPLAS), Journal of Functional Programming (JFP), Journal of Functional and Logic\nProgramming, and Higher-Order and Symbolic Computation.\nSIGPLAN\nVery high-level programming language\n1. Abelson, Harold; Sussman, Gerald Jay; Sussman, Julie (1996). Structure and Interpretation of Computer Programs (https://www.worldcat.org/oclc/34576857) (2nd\u00a0ed.). Cambridge, Massachusetts: MIT Press.\nISBN\u00a00-262-01153-0. OCLC\u00a034576857 (https://search.worldcat.org/oclc/34576857).\n2. \"Models Of Computation\" (http://www.c2.com/cgi/wiki?ModelsOfComputation). wiki.c2.com. December 3, 2014. Archived (https://web.archive.org/web/20201130055927/http://wiki.c2.com/?ModelsOfComputati\non) from the original on November 30, 2020.\n3. C. B\u00f6hm and W. Gross (1996). Introduction to the CUCH. In E. R. Caianiello (ed.), Automata Theory, p. 35\u201364.\n4. Benjamin C. Pierce. 2002. Types and Programming Languages (https://books.google.com/books?id=ti6zoAC9Ph8C&dq=%22Types+and+Programming+Languages%22&pg=PR13). MIT Press, Cambridge,\nMassachusetts, USA.\nAbadi, Mart\u00edn and Cardelli, Luca. A Theory of Objects. Springer-Verlag.\nMichael J. C. Gordon. Programming Language Theory and Its Implementation. Prentice Hall.\nGunter, Carl and Mitchell, John C. (eds.). Theoretical Aspects of Object Oriented Programming Languages: Types, Semantics, and Language Design. MIT Press.\nHarper, Robert. Practical Foundations for Programming Languages (https://web.archive.org/web/20070627041059/https://www.cs.cmu.edu/~rwh/plbook/book.pdf). Draft version.\nKnuth, Donald E. (2003). Selected Papers on Computer Languages (http://www-cs-faculty.stanford.edu/~knuth/cl.html). Stanford, California: Center for the Study of Language and Information.\nMitchell, John C. Foundations for Programming Languages.\nMitchell, John C. Introduction to Programming Language Theory.\nO'Hearn, Peter. W. and Tennent, Robert. D. (1997). ALGOL-like Languages (https://web.archive.org/web/20110719175135/http://www.eecs.qmul.ac.uk/~ohearn/Algol/algol.html). Progress in Theoretical\nComputer Science. Birkhauser, Boston.\nPierce, Benjamin C. (2002). Types and Programming Languages (http://www.cis.upenn.edu/~bcpierce/tapl/main.html). MIT Press.\nPierce, Benjamin C. Advanced Topics in Types and Programming Languages.\nPierce, Benjamin C. et al. (2010). Software Foundations (http://www.cis.upenn.edu/~bcpierce/sf/).\nLambda the Ultimate (http://lambda-the-ultimate.org/policies#Purpose), a community weblog for professional discussion and repository of documents on programming language theory.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4052, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bb81c72e-7403-4826-8a45-658e64287486": {"__data__": {"id_": "bb81c72e-7403-4826-8a45-658e64287486", "embedding": null, "metadata": {"page_label": "2", "file_name": "Programming language theory - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Programming language theory - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 388157, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4dad9663-23e3-496c-b8ab-ff8deeefbbf9", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Programming language theory - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Programming language theory - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 388157, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "d798806235c2a95b1db21d1306ab39c5f47fa9006167895fefa15f9b900536b0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "137fe230-c369-4b2a-a5e5-93070234bdfb", "node_type": "1", "metadata": {"page_label": "2", "file_name": "Programming language theory - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Programming language theory - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 388157, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "ecbcaf2c4edd041daf4c929c56080c591627c92cdff117ee15ef1b9f8d1f9f49", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "O'Hearn, Peter. W. and Tennent, Robert. D. (1997). ALGOL-like Languages (https://web.archive.org/web/20110719175135/http://www.eecs.qmul.ac.uk/~ohearn/Algol/algol.html). Progress in Theoretical\nComputer Science. Birkhauser, Boston.\nPierce, Benjamin C. (2002). Types and Programming Languages (http://www.cis.upenn.edu/~bcpierce/tapl/main.html). MIT Press.\nPierce, Benjamin C. Advanced Topics in Types and Programming Languages.\nPierce, Benjamin C. et al. (2010). Software Foundations (http://www.cis.upenn.edu/~bcpierce/sf/).\nLambda the Ultimate (http://lambda-the-ultimate.org/policies#Purpose), a community weblog for professional discussion and repository of documents on programming language theory.\nGreat Works in Programming Languages (http://www.cis.upenn.edu/~bcpierce/courses/670Fall04/GreatWorksInPL.shtml). Collected by Benjamin C. Pierce (University of Pennsylvania).\nClassic Papers in Programming Languages and Logic (https://www.cs.cmu.edu/~crary/819-f09/). Collected by Karl Crary (Carnegie Mellon University).\nProgramming Language Research (https://www.cs.cmu.edu/afs/cs.cmu.edu/user/mleone/web/language-research.html). Directory by Mark Leone.\n\u03bb-Calculus: Then & Now (http://turing100.acm.org/lambda_calculus_timeline.pdf) by Dana S. Scott for the ACM Turing Centenary Celebration\nGrand Challenges in Programming Languages (http://plgrand.blogspot.com/). Panel session at POPL 2009.\nRetrieved from \"https://en.wikipedia.org/w/index.php?title=Programming_language_theory&oldid=1286649926\"\nDomain-speci\ufb01c languages\nCompiler construction\nRun-time systems\nJournals, publications, and conferences\nSee also\nReferences\nFurther reading\nExternal links\n6/7/25, 7:32 PM Programming language theory - Wikipedia\nhttps://en.wikipedia.org/wiki/Programming_language_theory 2/2", "mimetype": "text/plain", "start_char_idx": 3349, "end_char_idx": 5126, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "da35902b-1975-454c-8f51-da132568dbec": {"__data__": {"id_": "da35902b-1975-454c-8f51-da132568dbec", "embedding": null, "metadata": {"page_label": "1", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "629aa3c5-1e55-4950-9703-f8bd516f6ffd", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "bd38ce08a7f04342d339daf4c5779504ef3d56f64c6cc5bbb400b9181d859e2b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c56d464f-7ec4-4abb-9f03-35959714759d", "node_type": "1", "metadata": {}, "hash": "a830a374b1e6fa1fda5998927680fb7701d85060e6e7c045d55618eb48188a6a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Software engineering\nSoftware engineering is a branch of both computer science and engineering focused on designing, developing, testing, and maintaining software applications. It involves applying engineering principles and\ncomputer programming expertise to develop software systems that meet user needs.[1][2][3][4]\nThe terms programmer and coder overlap software engineer, but they imply only the construction aspect of a typical software engineer workload.[5]\nA software engineer applies a software development process,[1][6] which involves defining, implementing, testing, managing, and maintaining software systems, as well as developing the software development\nprocess itself.\nBeginning in the 1960s, software engineering was recognized as a separate field of engineering.\nThe development of software engineering was seen as a struggle. Problems included software that was over budget, exceeded deadlines, required extensive debugging and maintenance, and unsuccessfully met the\nneeds of consumers or was never even completed.\nIn 1968, NATO held the first software engineering conference, where issues related to software were addressed. Guidelines and best practices for the development of software were established.[7]\nThe origins of the term software engineering have been attributed to various sources. The term appeared in a list of services offered by companies in the June 1965 issue of \"Computers and Automation\"[8] and\nwas used more formally in the August 1966 issue of Communications of the ACM (Volume 9, number 8) in \"President's Letter to the ACM Membership\" by Anthony A. Oettinger.[9][10][11] It is also associated with\nthe title of a NATO conference in 1968 by Professor Friedrich L. Bauer.[12] Margaret Hamilton described the discipline of \"software engineering\" during the Apollo missions to give what they were doing\nlegitimacy.[13] At the time, there was perceived to be a \"software crisis\".[14][15][16] The 40th International Conference on Software Engineering (ICSE 2018) celebrates 50 years of \"Software Engineering\" with the\nPlenary Sessions' keynotes of Frederick Brooks[17] and Margaret Hamilton.[18]\nIn 1984, the Software Engineering Institute (SEI) was established as a federally funded research and development center headquartered on the campus of Carnegie Mellon University in Pittsburgh, Pennsylvania,\nUnited States.[19] Watts Humphrey founded the SEI Software Process Program, aimed at understanding and managing the software engineering process.[19] The Process Maturity Levels introduced became the\nCapability Maturity Model Integration for Development (CMMI-DEV), which defined how the US Government evaluates the abilities of a software development team.\nModern, generally accepted best practices for software engineering have been collected by the ISO/IEC JTC 1/SC 7 subcommittee and published as the Software Engineering Body of Knowledge (SWEBOK).[6]\nSoftware engineering is considered one of the major computing disciplines.[20]\nNotable definitions of software engineering include:\n\"The systematic application of scienti\ufb01c and technological knowledge, methods, and experience to the design, implementation, testing, and documentation of software.\"\u2014The Bureau of Labor Statistics\u2014IEEE\nSystems and software engineering \u2013 Vocabulary[ 2 1 ] \n\"The application of a systematic, disciplined, quanti\ufb01able approach to the development, operation, and maintenance of software.\"\u2014IEEE Standard Glossary of Software Engineering Terminology[ 2 2 ] \n\"An engineering discipline that is concerned with all aspects of software production.\"\u2014Ian Sommerville[ 2 3 ] \n\"The establishment and use of sound engineering principles in order to economically obtain software that is reliable and works ef\ufb01ciently on real machines.\"\u2014Fritz Bauer[ 2 4 ] \n\"A branch of computer science that deals with the design, implementation, and maintenance of complex computer programs.\"\u2014Merriam-Webster[ 2 5 ] \n\"'Software engineering' encompasses not just the act of writing code, but all of the tools and processes an organization uses to build and maintain that code over time. [...] Software engineering can be\nthought of as 'programming integrated over time.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4167, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c56d464f-7ec4-4abb-9f03-35959714759d": {"__data__": {"id_": "c56d464f-7ec4-4abb-9f03-35959714759d", "embedding": null, "metadata": {"page_label": "1", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "629aa3c5-1e55-4950-9703-f8bd516f6ffd", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "bd38ce08a7f04342d339daf4c5779504ef3d56f64c6cc5bbb400b9181d859e2b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "da35902b-1975-454c-8f51-da132568dbec", "node_type": "1", "metadata": {"page_label": "1", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "dd90ef9bce97dea0b045971da9e00f40af25c18629d235b3dd66f39f1adbef20", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\"\u2014IEEE Standard Glossary of Software Engineering Terminology[ 2 2 ] \n\"An engineering discipline that is concerned with all aspects of software production.\"\u2014Ian Sommerville[ 2 3 ] \n\"The establishment and use of sound engineering principles in order to economically obtain software that is reliable and works ef\ufb01ciently on real machines.\"\u2014Fritz Bauer[ 2 4 ] \n\"A branch of computer science that deals with the design, implementation, and maintenance of complex computer programs.\"\u2014Merriam-Webster[ 2 5 ] \n\"'Software engineering' encompasses not just the act of writing code, but all of the tools and processes an organization uses to build and maintain that code over time. [...] Software engineering can be\nthought of as 'programming integrated over time.'\"\u2014Software Engineering at Google[ 2 6 ] \nThe term has also been used less formally:\nas the informal contemporary term for the broad range of activities that were formerly called computer programming and systems analysis[ 2 7 ] \nas the broad term for all aspects of the practice of computer programming, as opposed to the theory of computer programming, which is formally studied as a sub-discipline of computer science[ 2 8 ] \nas the term embodying the advocacy of a speci\ufb01c approach to computer programming, one that urges that it be treated as an engineering discipline rather than an art or a craft, and advocates the codi\ufb01cation\nof recommended practices[ 2 9 ] \nIndividual commentators have disagreed sharply on how to define software engineering or its legitimacy as an engineering discipline. David Parnas has said that software engineering is, in fact, a form of\nengineering.[30][31] Steve McConnell has said that it is not, but that it should be.[32] Donald Knuth has said that programming is an art and a science.[33] Edsger W. Dijkstra claimed that the terms software\nengineering and software engineer have been misused in the United States.[34]\nRequirements engineering is about elicitation, analysis, specification, and validation of requirements for software. Software requirements can be functional, non-functional or domain.\nFunctional requirements describe expected behaviors (i.e. outputs). Non-functional requirements specify issues like portability, security, maintainability, reliability, scalability, performance, reusability, and\nflexibility. They are classified into the following types: interface constraints, performance constraints (such as response time, security, storage space, etc.), operating constraints, life cycle constraints\n(maintainability, portability, etc.), and economic constraints. Knowledge of how the system or software works is needed when it comes to specifying non-functional requirements. Domain requirements have to do\nwith the characteristic of a certain category or domain of projects.[35]\nSoftware design is the process of making high-level plans for the software. Design is sometimes divided into levels:\nInterface design plans the interaction between a system and its environment as well as the inner workings of the system.\nArchitectural design plans the major components of a system, including their responsibilities, properties, and interfaces between them.\nDetailed design plans internal elements, including their properties, relationships, algorithms and data structures.[ 3 6 ] \nSoftware construction typically involves programming (a.k.a. coding), unit testing, integration testing, and debugging so as to implement the design.[1][6]\"Software testing is related to, but different from, ...\ndebugging\".[6] Testing during this phase is generally performed by the programmer and with the purpose to verify that the code behaves as designed and to know when the code is ready for the next level of\ntesting.\nSoftware testing is an empirical, technical investigation conducted to provide stakeholders with information about the quality of the software under test.[1][6]\nWhen described separately from construction, testing typically is performed by test engineers or quality assurance instead of the programmers who wrote it. It is performed at the system level and is considered an\naspect of software quality.\nProgram analysis is the process of analyzing computer programs with respect to an aspect such as performance, robustness, and security.\nHistory\nTerminology\nDe\ufb01nition\nSuitability\nWorkload\nRequirements analysis\nDesign\nConstruction\nTesting\nProgram analysis\n6/7/25, 7:31 PM Software engineering - Wikipedia\nhttps://en.wikipedia.org/wiki/Software_engineering 1/5", "mimetype": "text/plain", "start_char_idx": 3414, "end_char_idx": 7891, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "778aedee-6170-4430-99e3-fdc32f2410b8": {"__data__": {"id_": "778aedee-6170-4430-99e3-fdc32f2410b8", "embedding": null, "metadata": {"page_label": "2", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7cc1fa22-065f-43ca-a779-108038d1822e", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "0f18eb568198b323766bc9ead178601a36e2fb00719f64860489237adb32117d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1bafc626-33e0-47c7-8a96-b3e56a54de17", "node_type": "1", "metadata": {}, "hash": "30cff593603933cf9184aadeb4e3dadb72cfbc78fff28121a7a4e0bf01bc8680", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Software maintenance refers to supporting the software after release. It may include but is not limited to: error correction, optimization, deletion of unused and discarded features, and enhancement of existing\nfeatures.[1][6]\nUsually, maintenance takes up 40% to 80% of project cost.[37]\nKnowledge of computer programming is a prerequisite for becoming a software engineer. In 2004, the IEEE Computer Society produced the SWEBOK, which has been published as ISO/IEC Technical Report\n1979:2005, describing the body of knowledge that they recommend to be mastered by a graduate software engineer with four years of experience.[38] Many software engineers enter the profession by obtaining a\nuniversity degree or training at a vocational school. One standard international curriculum for undergraduate software engineering degrees was defined by the Joint Task Force on Computing Curricula of the\nIEEE Computer Society and the Association for Computing Machinery, and updated in 2014.[20] A number of universities have Software Engineering degree programs; as of 2010, there were 244 Campus\nBachelor of Software Engineering programs, 70 Online programs, 230 Masters-level programs, 41 Doctorate-level programs, and 69 Certificate-level programs in the United States.\nIn addition to university education, many companies sponsor internships for students wishing to pursue careers in information technology. These internships can introduce the student to real-world tasks that\ntypical software engineers encounter every day. Similar experience can be gained through military service in software engineering.\nHalf of all practitioners today have degrees in computer science, information systems, or information technology. A small but growing number of practitioners have software engineering degrees. In 1987, the\nDepartment of Computing at Imperial College London introduced the first three-year software engineering bachelor's degree in the world; in the following year, the University of Sheffield established a similar\nprogram.[39] In 1996, the Rochester Institute of Technology established the first software engineering bachelor's degree program in the United States; however, it did not obtain ABET accreditation until 2003, the\nsame year as Rice University, Clarkson University, Milwaukee School of Engineering, and Mississippi State University.[40] In 1997, PSG College of Technology in Coimbatore, India was the first to start a five-year\nintegrated Master of Science degree in Software Engineering.\nSince then, software engineering undergraduate degrees have been established at many universities. A standard international curriculum for undergraduate software engineering degrees, SE2004, was defined by\na steering committee between 2001 and 2004 with funding from the Association for Computing Machinery and the IEEE Computer Society. As of 2004, about 50 universities in the U.S. offer software engineering\ndegrees, which teach both computer science and engineering principles and practices. The first software engineering master's degree was established at Seattle University in 1979. Since then, graduate software\nengineering degrees have been made available from many more universities. Likewise in Canada, the Canadian Engineering Accreditation Board (CEAB) of the Canadian Council of Professional Engineers has\nrecognized several software engineering programs.\nIn 1998, the US Naval Postgraduate School (NPS) established the first doctorate program in Software Engineering in the world. Additionally, many online advanced degrees in Software Engineering have appeared\nsuch as the Master of Science in Software Engineering (MSE) degree offered through the Computer Science and Engineering Department at California State University, Fullerton. Steve McConnell opines that\nbecause most universities teach computer science rather than software engineering, there is a shortage of true software engineers.[41] ETS (\u00c9cole de technologie sup\u00e9rieure) University and UQAM (Universit\u00e9 du\nQu\u00e9bec \u00e0 Montr\u00e9al) were mandated by IEEE to develop the Software Engineering Body of Knowledge (SWEBOK), which has become an ISO standard describing the body of knowledge covered by a software\nengineer.[6]\nLegal requirements for the licensing or certification of professional software engineers vary around the world. In the UK, there is no licensing or legal requirement to assume or use the job title Software Engineer.\nIn some areas of Canada, such as Alberta, British Columbia, Ontario,[42] and Quebec, software engineers can hold the Professional Engineer (P.Eng) designation and/or the Information Systems Professional\n(I.S.P.) designation. In Europe, Software Engineers can obtain the European Engineer (EUR ING) professional title. Software Engineers can also become professionally qualified as a Chartered Engineer through\nthe British Computer Society.\nIn the United States, the NCEES began offering a Professional Engineer exam for Software Engineering in 2013, thereby allowing Software Engineers to be licensed and recognized.[43] NCEES ended the exam\nafter April 2019 due to lack of participation.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 5102, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1bafc626-33e0-47c7-8a96-b3e56a54de17": {"__data__": {"id_": "1bafc626-33e0-47c7-8a96-b3e56a54de17", "embedding": null, "metadata": {"page_label": "2", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7cc1fa22-065f-43ca-a779-108038d1822e", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "0f18eb568198b323766bc9ead178601a36e2fb00719f64860489237adb32117d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "778aedee-6170-4430-99e3-fdc32f2410b8", "node_type": "1", "metadata": {"page_label": "2", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "8e037d93d667de28f5a35901b085fbd3fa0aa69db9d0ff57d81058c47162d3ad", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d7f573be-2b5f-4dcb-8d15-8946baf03541", "node_type": "1", "metadata": {}, "hash": "17ec55fd7c841f85143f98cb6b7f692affcc5cc1d2b80955dc41376ccd982adb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "[6]\nLegal requirements for the licensing or certification of professional software engineers vary around the world. In the UK, there is no licensing or legal requirement to assume or use the job title Software Engineer.\nIn some areas of Canada, such as Alberta, British Columbia, Ontario,[42] and Quebec, software engineers can hold the Professional Engineer (P.Eng) designation and/or the Information Systems Professional\n(I.S.P.) designation. In Europe, Software Engineers can obtain the European Engineer (EUR ING) professional title. Software Engineers can also become professionally qualified as a Chartered Engineer through\nthe British Computer Society.\nIn the United States, the NCEES began offering a Professional Engineer exam for Software Engineering in 2013, thereby allowing Software Engineers to be licensed and recognized.[43] NCEES ended the exam\nafter April 2019 due to lack of participation.[44] Mandatory licensing is currently still largely debated, and perceived as controversial.[45][46]\nThe IEEE Computer Society and the ACM, the two main US-based professional organizations of software engineering, publish guides to the profession of software engineering. The IEEE's Guide to the Software\nEngineering Body of Knowledge \u2013 2004 Version, or SWEBOK, defines the field and describes the knowledge the IEEE expects a practicing software engineer to have. The most current version is SWEBOK v4.[6]\nThe IEEE also promulgates a \"Software Engineering Code of Ethics\".[47]\nThere are an estimated 26.9 million professional software engineers in the world as of 2022, up from 21 million in 2016.[48][49]\nMany software engineers work as employees or contractors. Software engineers work with businesses, government agencies (civilian or military), and non-profit organizations. Some software engineers work for\nthemselves as freelancers. Some organizations have specialists to perform each of the tasks in the software development process. Other organizations require software engineers to do many or all of them. In large\nprojects, people may specialize in only one role. In small projects, people may fill several or all roles at the same time. Many companies hire interns, often university or college students during a summer break, or\nexternships. Specializations include analysts, architects, developers, testers, technical support, middleware analysts, project managers, software product managers, educators, and researchers.\nMost software engineers and programmers work 40 hours a week, but about 15 percent of software engineers and 11 percent of programmers worked more than 50 hours a week in 2008.[50] Potential injuries in\nthese occupations are possible because like other workers who spend long periods sitting in front of a computer terminal typing at a keyboard, engineers and programmers are susceptible to eyestrain, back\ndiscomfort, Thrombosis, Obesity, and hand and wrist problems such as carpal tunnel syndrome.[51]\nThe U. S. Bureau of Labor Statistics (BLS) counted 1,365,500 software developers holding jobs in the U.S. in 2018.[52] Due to its relative newness as a field of study, formal education in software engineering is\noften taught as part of a computer science curriculum, and many software engineers hold computer science degrees.[53] The BLS estimates from 2023 to 2033 that computer software engineering would increase\nby 17%.[54] This is down from the 2022 to 2032 BLS estimate of 25% for software engineering.[54][55] And, is further down from their 30% 2010 to 2020 BLS estimate.[56] Due to this trend, job growth may not be\nas fast as during the last decade, as jobs that would have gone to computer software engineers in the United States would instead be outsourced to computer software engineers in countries such as India and other\nforeign countries.[57][50] In addition, the BLS Job Outlook for Computer Programmers, the U.S. Bureau of Labor Statistics (BLS) Occupational Outlook predicts a decline of -7 percent from 2016 to 2026, a further\ndecline of -9 percent from 2019 to 2029, a decline of -10 percent from 2021 to 2031.[57] and then a decline of -11 percent from 2022 to 2032.[57] Since computer programming can be done from anywhere in the\nworld, companies sometimes hire programmers in countries where wages are lower.[57][58][59] Furthermore, the ratio of women in many software fields has also been declining over the years as compared to other\nengineering fields.", "mimetype": "text/plain", "start_char_idx": 4194, "end_char_idx": 8621, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d7f573be-2b5f-4dcb-8d15-8946baf03541": {"__data__": {"id_": "d7f573be-2b5f-4dcb-8d15-8946baf03541", "embedding": null, "metadata": {"page_label": "2", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7cc1fa22-065f-43ca-a779-108038d1822e", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "0f18eb568198b323766bc9ead178601a36e2fb00719f64860489237adb32117d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1bafc626-33e0-47c7-8a96-b3e56a54de17", "node_type": "1", "metadata": {"page_label": "2", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "fa224e7f61077cefc7bbe7472a4632cf1e80fff59f1f3aec466bf2cf0fa70da8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "[57][50] In addition, the BLS Job Outlook for Computer Programmers, the U.S. Bureau of Labor Statistics (BLS) Occupational Outlook predicts a decline of -7 percent from 2016 to 2026, a further\ndecline of -9 percent from 2019 to 2029, a decline of -10 percent from 2021 to 2031.[57] and then a decline of -11 percent from 2022 to 2032.[57] Since computer programming can be done from anywhere in the\nworld, companies sometimes hire programmers in countries where wages are lower.[57][58][59] Furthermore, the ratio of women in many software fields has also been declining over the years as compared to other\nengineering fields.[60] Then there is the additional concern that recent advances in Artificial Intelligence might impact the demand for future generations of Software Engineers.[61][62][63][64][65][66][67] However,\nthis trend may change or slow in the future as many current software engineers in the U.S. market flee the profession or age out of the market in the next few decades.[57]\nThe Software Engineering Institute offers certifications on specific topics like security, process improvement and software architecture.[68] IBM, Microsoft and other companies also sponsor their own certification\nexaminations. Many IT certification programs are oriented toward specific technologies, and managed by the vendors of these technologies.[69] These certification programs are tailored to the institutions that\nwould employ people who use these technologies.\nBroader certification of general software engineering skills is available through various professional societies. As of 2006, the IEEE had certified over 575 software professionals as a Certified Software\nDevelopment Professional (CSDP).[70] In 2008 they added an entry-level certification known as the Certified Software Development Associate (CSDA).[71] The ACM had a professional certification program in the\nearly 1980s, which was discontinued due to lack of interest. The ACM and the IEEE Computer Society together examined the possibility of licensing of software engineers as Professional Engineers in the 1990s,\nbut eventually decided that such licensing was inappropriate for the professional industrial practice of software engineering.[45] John C. Knight and Nancy G. Leveson presented a more balanced analysis of the\nlicensing issue in 2002.[46]\nIn the U.K. the British Computer Society has developed a legally recognized professional certification called Chartered IT Professional (CITP), available to fully qualified members (MBCS). Software engineers\nmay be eligible for membership of the British Computer Society or Institution of Engineering and Technology and so qualify to be considered for Chartered Engineer status through either of those institutions. In\nCanada the Canadian Information Processing Society has developed a legally recognized professional certification called Information Systems Professional (ISP).[72] In Ontario, Canada, Software Engineers who\ngraduate from a Canadian Engineering Accreditation Board (CEAB) accredited program, successfully complete PEO's (Professional Engineers Ontario) Professional Practice Examination (PPE) and have at least\n48 months of acceptable engineering experience are eligible to be licensed through the Professional Engineers Ontario and can become Professional Engineers P.Eng.[73] The PEO does not recognize any online or\ndistance education however; and does not consider Computer Science programs to be equivalent to software engineering programs despite the tremendous overlap between the two. This has sparked controversy\nand a certification war. It has also held the number of P.Eng holders for the profession exceptionally low. The vast majority of working professionals in the field hold a degree in CS, not SE. Given the difficult\ncertification path for holders of non-SE degrees, most never bother to pursue the license.\nThe initial impact of outsourcing, and the relatively lower cost of international human resources in developing third world countries led to a massive migration of software development activities from\ncorporations in North America and Europe to India and later: China, Russia, and other developing countries. This approach had some flaws, mainly the distance / time zone difference that prevented human\ninteraction between clients and developers and the massive job transfer. This had a negative impact on many aspects of the software engineering profession. For example, some students in the developed world\nMaintenance\nEducation\nSoftware engineering degree programs\nProfession\nEmployment\nUnited States\nCerti\ufb01cation\nImpact of globalization\n6/7/25, 7:31 PM Software engineering - Wikipedia\nhttps://en.wikipedia.org/wiki/Software_engineering 2/5", "mimetype": "text/plain", "start_char_idx": 7995, "end_char_idx": 12707, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "72294b18-e6a3-468a-bdb6-c3b7a64ced82": {"__data__": {"id_": "72294b18-e6a3-468a-bdb6-c3b7a64ced82", "embedding": null, "metadata": {"page_label": "3", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "430b7061-8878-4660-b749-19c257a0753d", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "2cdc49a75c2ec76d295fd2f50a66ce4689dd9bc76c4cd9339535c35247213937", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c2f57f89-f6e0-4ab3-a9c3-33d7c3a52ecc", "node_type": "1", "metadata": {}, "hash": "b19ecaf79f56cf534c01d1e705ef2385058c977dc11c6d20df485e38cd7b1078", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "avoid education related to software engineering because of the fear of offshore outsourcing (importing software products or services from other countries) and of being displaced by foreign visa workers.[74]\nAlthough statistics do not currently show a threat to software engineering itself; a related career, computer programming does appear to have been affected.[75] Nevertheless, the ability to smartly leverage\noffshore and near-shore resources via the follow-the-sun workflow has improved the overall operational capability of many organizations.[76] When North Americans leave work, Asians are just arriving to work.\nWhen Asians are leaving work, Europeans arrive to work. This provides a continuous ability to have human oversight on business-critical processes 24 hours per day, without paying overtime compensation or\ndisrupting a key human resource, sleep patterns.\nWhile global outsourcing has several advantages, global \u2013 and generally distributed \u2013 development can run into serious difficulties resulting from the distance between developers. This is due to the key elements\nof this type of distance that have been identified as geographical, temporal, cultural and communication (that includes the use of different languages and dialects of English in different locations).[77] Research has\nbeen carried out in the area of global software development over the last 15 years and an extensive body of relevant work published that highlights the benefits and problems associated with the complex activity.\nAs with other aspects of software engineering research is ongoing in this and related areas.\nThere are various prizes in the field of software engineering:\nACM-AAAI Allen Newell Award- USA. Awarded to career contributions that have breadth within computer science, or that bridge computer science and other disciplines.\nBCS Lovelace Medal. Awarded to individuals who have made outstanding contributions to the understanding or advancement of computing.\nACM SIGSOFT Outstanding Research Award, selected for individual(s) who have made \"signi\ufb01cant and lasting research contributions to the theory or practice of software engineering.\"[ 7 8 ] \nMore ACM SIGSOFT Awards.[ 7 9 ] \nThe Codie award, a yearly award issued by the Software and Information Industry Association for excellence in software development within the software industry.\nHarlan Mills Award for \"contributions to the theory and practice of the information sciences, focused on software engineering\".\nICSE Most In\ufb02uential Paper Award.[ 8 0 ] \nJolt Award, also for the software industry.\nStevens Award given in memory of Wayne Stevens.\nSome call for licensing, certification and codified bodies of knowledge as mechanisms for spreading the engineering knowledge and maturing the field.[81]\nSome claim that the concept of software engineering is so new that it is rarely understood, and it is widely misinterpreted, including in software engineering textbooks, papers, and among the communities of\nprogrammers and crafters.[82]\nSome claim that a core issue with software engineering is that its approaches are not empirical enough because a real-world validation of approaches is usually absent, or very limited and hence software\nengineering is often misinterpreted as feasible only in a \"theoretical environment.\"[82]\nEdsger Dijkstra, a founder of many of the concepts in software development today, rejected the idea of \"software engineering\" up until his death in 2002, arguing that those terms were poor analogies for what he\ncalled the \"radical novelty\" of computer science:\nA number of these phenomena have been bundled under the name \"Software Engineering\". As economics is known as \"The Miserable Science\", software engineering should be known as \"The Doomed\nDiscipline\", doomed because it cannot even approach its goal since its goal is self-contradictory. Software engineering, of course, presents itself as another worthy cause, but that is eyewash: if you\ncarefully read its literature and analyse what its devotees actually do, you will discover that software engineering has accepted as its charter \"How to program if you cannot.\"[83]\nComputer science\nData engineering\nSoftware craftsmanship\nSoftware development\nRelease engineering\nProgrammer\nSystems analyst\nSystems architect\nBachelor of Science in Information Technology\nBachelor of Software Engineering\nList of software engineering conferences\nList of computer science journals (including software engineering journals)\nSoftware Engineering Institute\n1. Abran et al. 2004\n2. ACM (2007). \"Computing Degrees & Careers\" (https://web.archiv\ne.org/web/20110617053818/http://computingcareers.acm.org/?p\nage_id=12). ACM. Archived from the original (http://computingcar\neers.acm.org/?page_id=12) on 2011-06-17. Retrieved\n2010-11-23.\n3. Laplante, Phillip (2007).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4798, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c2f57f89-f6e0-4ab3-a9c3-33d7c3a52ecc": {"__data__": {"id_": "c2f57f89-f6e0-4ab3-a9c3-33d7c3a52ecc", "embedding": null, "metadata": {"page_label": "3", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "430b7061-8878-4660-b749-19c257a0753d", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "2cdc49a75c2ec76d295fd2f50a66ce4689dd9bc76c4cd9339535c35247213937", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "72294b18-e6a3-468a-bdb6-c3b7a64ced82", "node_type": "1", "metadata": {"page_label": "3", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "8b465e93fe3a0f130e9059f1105706d9ed42da573e99e7c529540fc17dfe6702", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5934b079-e8f4-431b-9cd8-82cf0f813b94", "node_type": "1", "metadata": {}, "hash": "55715ea086029c459fc2b864d846c2374a2a5eb33d07b5855d8c9fd2737dc334", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\"[83]\nComputer science\nData engineering\nSoftware craftsmanship\nSoftware development\nRelease engineering\nProgrammer\nSystems analyst\nSystems architect\nBachelor of Science in Information Technology\nBachelor of Software Engineering\nList of software engineering conferences\nList of computer science journals (including software engineering journals)\nSoftware Engineering Institute\n1. Abran et al. 2004\n2. ACM (2007). \"Computing Degrees & Careers\" (https://web.archiv\ne.org/web/20110617053818/http://computingcareers.acm.org/?p\nage_id=12). ACM. Archived from the original (http://computingcar\neers.acm.org/?page_id=12) on 2011-06-17. Retrieved\n2010-11-23.\n3. Laplante, Phillip (2007). What Every Engineer Should Know\nabout Software Engineering (https://books.google.com/books?id\n=pFHYk0KWAEgC&q=What%20Every%20Engineer%20Shoul\nd%20Know%20about%20Software%20Engineering.&pg=PA1).\nBoca Raton: CRC. ISBN\u00a0978-0-8493-7228-5. Retrieved\n2011-01-21.\n4. \"What Does a Software Engineer Do?\" (https://www.coursera.or\ng/articles/software-engineer). coursera. Oct 31, 2022.\n5. Bogost, Ian (5 November 2015). \"Programmers: Stop Calling\nYourselves Engineers\" (https://www.theatlantic.com/technology/a\nrchive/2015/11/programmers-should-not-call-themselves-enginee\nrs/414271/). The Atlantic.\n6. Bourque, Pierre; Fairley, Richard E. (Dick), eds. (2014). Guide to\nthe Software Engineering Body of Knowledge Version 3.0\n(SWEBOK) (https://www.computer.org/web/swebok/v3). IEEE\nComputer Society.\n7. \"The history of coding and software engineering\" (https://web.arc\nhive.org/web/20220324032759/https://www.hackreactor.com/blo\ng/the-history-of-coding-and-software-engineering/).\nwww.hackreactor.com. Archived from the original (https://www.ha\nckreactor.com/blog/the-history-of-coding-and-software-engineeri\nng) on 2022-03-24. Retrieved 2021-05-06.\n8. \"Computers and Automation: The Computer Directory and\nBuyers' Guide, 1965\" (http://www.bitsavers.org/magazines/Comp\nuters_And_Automation/196506.pdf) (PDF). bitsavers.org.\nRetrieved 15 July 2023.\n9. \"President's Letter to the ACM Membership\" (https://bertrandmey\ner.com/wp-content/upLoads/ACM-1966-Presidental-letter.pdf)\n(PDF). Retrieved 27 February 2025. \"We must recognize\nourselves -- not necessarily all of us, and not necessarily any\none of us all the time -- as members of an engineering\nprofession, be it hardware engineering or software engineering, a\nprofession without arti\ufb01cial and irrelevant boundaries like that\nbetween \"scienti\ufb01c\" and \"business\" applications.\"\n10. Oettinger, A. G. (1966). \"President's Letter to the ACM\nMembership\" (https://doi.org/10.1145%2F365758.3291288).\nCommun. ACM. 9 (8). Association for Computing Machinery:\n545\u2013546. doi:10.1145/365758.3291288 (https://doi.org/10.1145%\n2F365758.3291288). ISSN\u00a00001-0782 (https://search.worldcat.or\ng/issn/0001-0782). S2CID\u00a053432801 (https://api.semanticschola\nr.org/CorpusID:53432801).\n11. \"The origin of \"software engineering\"\" (https://bertrandmeyer.co\nm/2013/04/04/the-origin-of-software-engineering/). 4 April 2013.\nRetrieved 17 November 2017.\n12. Randall, Brian.", "mimetype": "text/plain", "start_char_idx": 4120, "end_char_idx": 7182, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5934b079-e8f4-431b-9cd8-82cf0f813b94": {"__data__": {"id_": "5934b079-e8f4-431b-9cd8-82cf0f813b94", "embedding": null, "metadata": {"page_label": "3", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "430b7061-8878-4660-b749-19c257a0753d", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "2cdc49a75c2ec76d295fd2f50a66ce4689dd9bc76c4cd9339535c35247213937", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c2f57f89-f6e0-4ab3-a9c3-33d7c3a52ecc", "node_type": "1", "metadata": {"page_label": "3", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "0d2cfb14250aa664ba9f8544f3da74f48cd0b939e4f4541bf035c5cea2d354a9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Commun. ACM. 9 (8). Association for Computing Machinery:\n545\u2013546. doi:10.1145/365758.3291288 (https://doi.org/10.1145%\n2F365758.3291288). ISSN\u00a00001-0782 (https://search.worldcat.or\ng/issn/0001-0782). S2CID\u00a053432801 (https://api.semanticschola\nr.org/CorpusID:53432801).\n11. \"The origin of \"software engineering\"\" (https://bertrandmeyer.co\nm/2013/04/04/the-origin-of-software-engineering/). 4 April 2013.\nRetrieved 17 November 2017.\n12. Randall, Brian. \"The 1968/69 NATO Software Engineering\nReports\" (http://homepages.cs.ncl.ac.uk/brian.randell/NATO/NAT\nOReports/). Retrieved 17 November 2017.\n13. Lori Cameron (October 5, 2008). \"Margaret Hamilton: First\nSoftware Engineer\" (https://www.computer.org/publications/tech-\nnews/events/what-to-know-about-the-scientist-who-invented-the-\nterm-software-engineering). Tech News. IEEE Computer Society.\n14. Ian Sommerville (March 24, 2015). Software Engineering\n(10th\u00a0ed.). Pearson Education Limited. ISBN\u00a0978-0-13-394303-0.\n15. Peter, Naur; Randell, Brian (7\u201311 October 1968). Software\nEngineering: Report of a conference sponsored by the NATO\nScience Committee (http://homepages.cs.ncl.ac.uk/brian.randell/\nNATO/nato1968.PDF) (PDF). Garmisch, Germany: Scienti\ufb01c\nAffairs Division, NATO. Retrieved 2008-12-26.\n16. Randell, Brian (10 August 2001). \"The 1968/69 NATO Software\nEngineering Reports\" (http://homepages.cs.ncl.ac.uk/brian.rande\nll/NATO/NATOReports/index.html). Brian Randell's University\nHomepage. The School of the Computer Sciences, Newcastle\nUniversity. Retrieved 2008-10-11. \"The idea for the \ufb01rst NATO\nSoftware Engineering Conference, and in particular that of\nadopting the then practically unknown term \"software\nengineering\" as its (deliberately provocative) title, I believe came\noriginally from Professor Fritz Bauer.\"\n17. 2018 International Conference on Software Engineering\ncelebrating its 40th anniversary, and 50 years of Software\nengineering (31 May 2018). \"ICSE 2018 \u2013 Plenary Sessions \u2013\nFred Brooks\" (https://www.youtube.com/watch?v=StN49re9Nq8&\nt=67s). YouTube. Retrieved 9 August 2018.\n18. 2018 International Conference on Software Engineering\ncelebrating its 40th anniversary, and 50 years of Software\nengineering (31 May 2018). \"ICSE 2018 \u2013 Plenary Sessions \u2013\nMargaret Hamilton\" (https://www.youtube.com/watch?v=ZbVOF0\nUk5lU). YouTube. Retrieved 9 August 2018.\nPrizes\nCriticism\nSee also\nStudy and practice\nRoles\nProfessional aspects\nReferences\nCitations\n6/7/25, 7:31 PM Software engineering - Wikipedia\nhttps://en.wikipedia.org/wiki/Software_engineering 3/5", "mimetype": "text/plain", "start_char_idx": 6732, "end_char_idx": 9261, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2890b580-5a09-4b00-91e5-edb9bfc7a14d": {"__data__": {"id_": "2890b580-5a09-4b00-91e5-edb9bfc7a14d", "embedding": null, "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a5f7834-517f-462a-9487-930654d0129e", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "4a9845cb50ece78b591e9c0cbbd2879c98c0e2e1e4bddc8c87a2d7e2e90cba1a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "59c0e136-9a7d-4c10-98d0-6222b8ea0aa4", "node_type": "1", "metadata": {}, "hash": "d88904957ae479f3a29326594dbd0a3c4cfa416e87c7d0672dcf6c4f5130c462", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "19. Linda Hutz Pesante (January 1, 2003). Anthony Ralston; Edwin\nD. Reilly (eds.). \"Software engineering institute (SEI)\" (https://dl.a\ncm.org/doi/10.5555/1074100.1074803). Encyclopedia of\nComputer Science. Chichester, West Sussex, UK: John Wiley\nand Sons Ltd.: 1611\u20131613. ISBN\u00a0978-0-470-86412-8. \"(1) The\ninstitute was competitively awarded to Carnegie Mellon in\nDecember 1984 by the US Department of Defense (DoD) to\nimprove the state of the practice of software engineering. ... (2)\nthe SEI moves mature solutions of proven value into widespread\nuse; examples include the Capability Maturity Model (CMM) ...\" \n20. Joint Task Force on Computing Curricula, IEEE Computer\nSociety, Association for Computing Machinery (23 February\n2015). Software Engineering 2014: Curriculum Guidelines for\nUndergraduate Degree Programs in Software Engineering (http\ns://www.acm.org/binaries/content/assets/education/se2014.pdf)\n(PDF). A Volume of the Computing Curricula Series. IEEE\nComputer Society and Association for Computing Machinery.\n21. Systems and software engineering \u2013 Vocabulary, ISO/IEC/IEEE\nstd 24765:2010(E), 2010.\n22. IEEE Standard Glossary of Software Engineering Terminology,\nIEEE std 610.12-1990, 1990.\n23. Sommerville, Ian (2007) [1982]. \"1.1.2 What is software\nengineering?\" (http://www.pearsoned.co.uk/HigherEducation/Boo\nksby/Sommerville/). Software Engineering (8th\u00a0ed.). Harlow,\nEngland: Pearson Education. p.\u00a07. ISBN\u00a0978-0-321-31379-9.\n\"Software engineering is an engineering discipline that is\nconcerned with all aspects of software production from the early\nstages of system speci\ufb01cation to maintaining the system after it\nhas gone into use. In this de\ufb01nition, there are two key phrases:\n1. Engineering discipline Engineers make things work. They\napply theories, methods and tools where these are appropriate [.\n. .] Engineers also recognize that they must work to\norganizational and \ufb01nancial constraints. [. . .]\n2. All aspects of software production Software engineering is not\njust concerned with the technical processes of software\ndevelopment but also with activities such as software project\nmanagement and with the development of tools, methods and\ntheories to support software production.\"\n24. \"Software Engineering\". Information Processing. 71: 530\u2013538.\n25. \"De\ufb01nition of SOFTWARE ENGINEERING\" (https://www.merriam\n-webster.com/dictionary/software+engineering). www.merriam-\nwebster.com. Retrieved 2019-11-25.\n26. Winters, Titus; Manshrec, Tom; Wright, Hyrum (2020). \"Preface,\nProgramming Over Time\". Software Engineering at Google.\nO'Reilly Media, Inc. pp.\u00a0xix\u2013xx, 6\u20137. ISBN\u00a0978-1-492-08279-8.\n\"We propose that \"software engineering\" encompasses not just\nthe act of writing code, but all of the tools and processes an\norganization uses to build and maintain that code over time.\nWhat practices can a software organization introduce that will\nbest keep its code valuable over the long term? How can\nengineers make a codebase more sustainable and the software\nengineering discipline itself more rigorous?\"\n27. Akram I. Salah (2002-04-05). \"Engineering an Academic\nProgram in Software Engineering\" (http://www.micsymposium.or\ng/mics_2002/SALAH.PDF) (PDF). 35th Annual Midwest\nInstruction and Computing Symposium. Retrieved 2006-09-13.:\n\"For some, software engineering is just a glori\ufb01ed name for\nprogramming. If you are a programmer, you might put 'software\nengineer' on your business card\u2014never 'programmer' though.\"\n28. Mills, Harlan D., J. R. Newman, and C. B. Engle, Jr., \"An\nUndergraduate Curriculum in Software Engineering,\" in Deimel,\nLionel E. (1990).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3579, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "59c0e136-9a7d-4c10-98d0-6222b8ea0aa4": {"__data__": {"id_": "59c0e136-9a7d-4c10-98d0-6222b8ea0aa4", "embedding": null, "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a5f7834-517f-462a-9487-930654d0129e", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "4a9845cb50ece78b591e9c0cbbd2879c98c0e2e1e4bddc8c87a2d7e2e90cba1a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2890b580-5a09-4b00-91e5-edb9bfc7a14d", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "44526464f39ba13076df344dd5de6d8d0d5e698e0a14ae3aac36070aff4957d5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7f29db1c-91e5-48eb-92f1-97dbfd2a51bb", "node_type": "1", "metadata": {}, "hash": "6a56bf3cac73512508b1eb2f8cd86b1191d3b3d3ee46f31afdf8407bd0dfa1eb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "How can\nengineers make a codebase more sustainable and the software\nengineering discipline itself more rigorous?\"\n27. Akram I. Salah (2002-04-05). \"Engineering an Academic\nProgram in Software Engineering\" (http://www.micsymposium.or\ng/mics_2002/SALAH.PDF) (PDF). 35th Annual Midwest\nInstruction and Computing Symposium. Retrieved 2006-09-13.:\n\"For some, software engineering is just a glori\ufb01ed name for\nprogramming. If you are a programmer, you might put 'software\nengineer' on your business card\u2014never 'programmer' though.\"\n28. Mills, Harlan D., J. R. Newman, and C. B. Engle, Jr., \"An\nUndergraduate Curriculum in Software Engineering,\" in Deimel,\nLionel E. (1990). Software Engineering Education: SEI\nConference 1990, Pittsburgh, Pennsylvania, USA, April 2\u20133,...\nSpringer. ISBN\u00a0978-0-387-97274-9.,p. 26 (https://books.google.c\nom/books?id=ZuWbyy2blMEC&pg=PA26): \"As a practical matter,\nwe regard software engineering as the necessary preparation for\nthe practicing, software development and maintenance\nprofessional. The Computer Scientist is preparing for further\ntheoretical studies...\"\n29. Barbara Kitchevnham; David Budgen; Pearl Brereton; Stephen\nLinkman (2005). \"Realising evidence-based software\nengineering\". ACM SIGSOFT Software Engineering Notes. 30\n(4): 1\u20133. doi:10.1145/1082983.1083175 (https://doi.org/10.114\n5%2F1082983.1083175). \"We believe that software engineering\ncan only advance as an engineering discipline by moving away\nfrom its current dependence upon advocacy and analysis, ...\"\n30. Parnas, David L. (1998). \"Software Engineering Programmes are\nnot Computer Science Programmes\" (http://citeseer.ist.psu.edu/p\narnas98software.html). Annals of Software Engineering. 6: 19\u2013\n37. doi:10.1023/A:1018949113292 (https://doi.org/10.1023%2F\nA%3A1018949113292). S2CID\u00a035786237 (https://api.semanticsc\nholar.org/CorpusID:35786237)., p. 19: \"Rather than treat\nsoftware engineering as a sub\ufb01eld of computer science, I treat it\nas an element of the set, {Civil Engineering, Mechanical\nEngineering, Chemical Engineering, Electrical Engineering,....}.\"\n31. Parnas, David L. (1998). \"Software Engineering Programmes are\nnot Computer Science Programmes\" (http://citeseer.ist.psu.edu/p\narnas98software.html). Annals of Software Engineering. 6: 19\u2013\n37. doi:10.1023/A:1018949113292 (https://doi.org/10.1023%2F\nA%3A1018949113292). S2CID\u00a035786237 (https://api.semanticsc\nholar.org/CorpusID:35786237)., p. 20: \"This paper argues that\nthe introduction of accredited professional programs in software\nengineering, programmes that are modelled on programmes in\ntraditional engineering disciplines will help to increase both the\nquality and quantity of graduates who are well prepared, by their\neducation, to develop trustworthy software products.\"\n32. McConnell, Steve (August 2003). Professional Software\nDevelopment: Shorter Schedules, Better Projects, Superior\nProducts, Enhanced Careers (https://archive.org/details/professi\nonalsoft00mcco_0). Boston, MA: Addison-Wesley. ISBN\u00a00-321-\n19367-9., p. 39: \"In my opinion, the answer to that question is\nclear: Professional software development should be engineering.\nIs it? No. But should it be? Unquestionably, yes. \"\n33. Knuth, Donald (1974). \"Computer Programming as an Art\" (http://\ndisciplinas.lia.ufc.br/matdis061/arquivos/knuth-turingaward.pdf)\n(PDF). Communications of the ACM. 17 (12): 667\u2013673.", "mimetype": "text/plain", "start_char_idx": 2913, "end_char_idx": 6264, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7f29db1c-91e5-48eb-92f1-97dbfd2a51bb": {"__data__": {"id_": "7f29db1c-91e5-48eb-92f1-97dbfd2a51bb", "embedding": null, "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a5f7834-517f-462a-9487-930654d0129e", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "4a9845cb50ece78b591e9c0cbbd2879c98c0e2e1e4bddc8c87a2d7e2e90cba1a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "59c0e136-9a7d-4c10-98d0-6222b8ea0aa4", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "d55c8371cc8a59bb7fb603a890f7e1b444b08347311464d2942ff62f375ddfe2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "afad220d-babf-449e-8c09-7865c4d9be29", "node_type": "1", "metadata": {}, "hash": "e5c5bd7d2712cdf3a03ee6f016657a814ce0a13fad51017e4e6fef6152c35976", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "32. McConnell, Steve (August 2003). Professional Software\nDevelopment: Shorter Schedules, Better Projects, Superior\nProducts, Enhanced Careers (https://archive.org/details/professi\nonalsoft00mcco_0). Boston, MA: Addison-Wesley. ISBN\u00a00-321-\n19367-9., p. 39: \"In my opinion, the answer to that question is\nclear: Professional software development should be engineering.\nIs it? No. But should it be? Unquestionably, yes. \"\n33. Knuth, Donald (1974). \"Computer Programming as an Art\" (http://\ndisciplinas.lia.ufc.br/matdis061/arquivos/knuth-turingaward.pdf)\n(PDF). Communications of the ACM. 17 (12): 667\u2013673.\ndoi:10.1145/361604.361612 (https://doi.org/10.1145%2F361604.\n361612). S2CID\u00a0207685720 (https://api.semanticscholar.org/Cor\npusID:207685720).Transcript of the 1974 Turing Award lecture.\n34. Dijkstra, Edsger W; transcribed by Mario B\u00e9land (November 23,\n2004) [First published December 3, 1993]. \"There is still a war\ngoing on (manuscript Austin, 3 December 1993)\" (http://www.cs.\nutexas.edu/users/EWD/transcriptions/EWD11xx/EWD1165.html).\nE. W. Dijkstra Archive. The University of Texas at Austin,\nDepartment of Computer Sciences. Retrieved February 17,\n2007. \"When the term was coined in 1968 by F.L. Bauer of the\nTechnological University of Munich, I welcomed it. [. . .] I\ninterpreted the introduction of the term \"software engineering\" as\nan apt re\ufb02ection of the fact that the design of software systems\nwas an activity par excellence for the mathematical engineer. [. .\n.]. As soon the term arrived in the USA, it was relieved of all its\ntechnical content. It had to be so for in its original meaning it was\ntotally unacceptable [. . .] In the meantime, software engineering\nhas become an almost empty term, as was nicely demonstrated\nby Data General who overnight promoted all its programmers to\nthe exalted rank of \"software engineer\"!\"\n35. \"Software Engineering | Classi\ufb01cation of Software Requirements\"\n(https://www.geeksforgeeks.org/software-engineering-classi\ufb01cati\non-of-software-requirements/). GeeksforGeeks. 2018-06-19.\nRetrieved 2021-05-06.\n36. \"Software Engineering | Software Design Process\" (https://www.\ngeeksforgeeks.org/software-engineering-software-design-proces\ns/). GeeksforGeeks. 2019-05-24. Retrieved 2021-05-06.\n37. \"What is Software Maintenance? De\ufb01nition of Software\nMaintenance, Software Maintenance Meaning\" (https://economic\ntimes.indiatimes.com/de\ufb01nition/software-maintenance). The\nEconomic Times. Retrieved 2021-05-06.\n38. Alain Abran; James W. Moore; Pierre Bourque; Robert Dupuis;\nLeonard L. Tripp, eds. (2005) [2004]. \"Chapter 1: Introduction to\nthe Guide\" (https://web.archive.org/web/20160509154355/https://\nwww.computer.org/portal/web/swebok). Guide to the Software\nEngineering Body of Knowledge (http://www.computer.org/portal/\nweb/swebok). IEEE Computer Society. Archived from the original\n(http://www.computer.org/portal/web/swebok/html/ch1) on 2016-\n05-09. Retrieved 2010-09-13. \"The total volume of cited literature\nis intended to be suitable for mastery through the completion of\nan undergraduate education plus four years of experience.\"\n39. Cowling, A. J. 1999. The \ufb01rst decade of an undergraduate\ndegree program in software engineering. Ann. Softw. Eng. 6, 1\u20134\n(Apr. 1999), 61\u201390.\n40.", "mimetype": "text/plain", "start_char_idx": 5660, "end_char_idx": 8896, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "afad220d-babf-449e-8c09-7865c4d9be29": {"__data__": {"id_": "afad220d-babf-449e-8c09-7865c4d9be29", "embedding": null, "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a5f7834-517f-462a-9487-930654d0129e", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "4a9845cb50ece78b591e9c0cbbd2879c98c0e2e1e4bddc8c87a2d7e2e90cba1a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7f29db1c-91e5-48eb-92f1-97dbfd2a51bb", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "2963ed3a3023a25254c05a7d331ca56a668ba28f4355d650e7917e31d18a28a2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "77bf5dac-ce17-4b66-9668-63a77eb2a187", "node_type": "1", "metadata": {}, "hash": "32eeba7b9155a999f178da15f4c89b592d20265d67a8594fa3ce09b056a78846", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Guide to the Software\nEngineering Body of Knowledge (http://www.computer.org/portal/\nweb/swebok). IEEE Computer Society. Archived from the original\n(http://www.computer.org/portal/web/swebok/html/ch1) on 2016-\n05-09. Retrieved 2010-09-13. \"The total volume of cited literature\nis intended to be suitable for mastery through the completion of\nan undergraduate education plus four years of experience.\"\n39. Cowling, A. J. 1999. The \ufb01rst decade of an undergraduate\ndegree program in software engineering. Ann. Softw. Eng. 6, 1\u20134\n(Apr. 1999), 61\u201390.\n40. \"ABET Accredited Engineering Programs\" (https://web.archive.or\ng/web/20100619233414/http://abet.org/accrediteac.asp). April 3,\n2007. Archived from the original (http://www.abet.org/accreditea\nc.asp) on June 19, 2010. Retrieved April 3, 2007.\n41. McConnell, Steve (July 10, 2003). Professional Software\nDevelopment: Shorter Schedules, Higher Quality Products, More\nSuccessful Projects, Enhanced Careers. ISBN\u00a0978-0-321-19367-\n4.\n42. Williams, N.S.W. (19\u201321 February 2001). \"Professional\nEngineers Ontario's approach to licensing software engineering\npractitioners\". Software Engineering Education and Training,\n2001 Proceedings. 14th Conference on. Charlotte, NC: IEEE.\npp.\u00a077\u201378.\n43. \"NCEES Software Engineering Exam Speci\ufb01cations\" (https://we\nb.archive.org/web/20130827220334/http://cdn1.ncees.co/wp-con\ntent/uploads/2012/11/Exam-speci\ufb01cations_PE-Software-Apr-201\n3.pdf) (PDF). Archived from the original (http://cdn1.ncees.co/wp-\ncontent/uploads/2012/11/Exam-speci\ufb01cations_PE-Software-Apr-\n2013.pdf) (PDF) on 2013-08-27. Retrieved 2012-04-01.\n44. \"NCEES discontinuing PE Software Engineering exam\" (https://n\ncees.org/ncees-discontinuing-pe-software-engineering-exam/).\nNational Council of Examiners for Engineering and Surveying. 13\nMarch 2018. Retrieved 6 August 2018.\n45. Barbara Simons. \"Past ACM Presidents Re\ufb02ect on Their Service\nto ACM\" (https://www.acm.org/75th-anniversary/past-presidents/\nbarbara-simons). Celebrating 75 Years of Advancing Computing\nas a Science & Profession. Association for Computing\nMachinery. Retrieved May 18, 2024. \"After the panels'\nrecommendations were submitted, ACM Council concluded that\nthe framework of a licensed professional engineer, originally\ndeveloped for civil engineers, does not match the professional\nindustrial practice of software engineering and would preclude\nmany of the most quali\ufb01ed software engineers from becoming\nlicensed.\"\n46. John C. Knight; Nancy G. Leveson (November 1, 2002). \"Should\nsoftware engineers be licensed?\". Communications of the ACM.\n45 (11): 87\u201390. doi:10.1145/581571.581601 (https://doi.org/10.11\n45%2F581571.581601).\n47. \"Software Engineering Code of Ethics\" (https://web.archive.org/w\neb/20150123034610/http://www.computer.org/cms/Computer.or\ng/Publications/code-of-ethics.pdf) (PDF). Archived from the\noriginal (http://www.computer.org/cms/Computer.org/Publication\ns/code-of-ethics.pdf) (PDF) on 2015-01-23. Retrieved\n2012-03-25.\n48. Labs, Qubit (29 November 2022). \"How Many Programmers are\nthere in the World and in the US? [2023]\" (https://qubit-labs.com/\nhow-many-programmers-in-the-world/). Qubit Labs. Retrieved\n7 February 2023.\n49.", "mimetype": "text/plain", "start_char_idx": 8347, "end_char_idx": 11518, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "77bf5dac-ce17-4b66-9668-63a77eb2a187": {"__data__": {"id_": "77bf5dac-ce17-4b66-9668-63a77eb2a187", "embedding": null, "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a5f7834-517f-462a-9487-930654d0129e", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "4a9845cb50ece78b591e9c0cbbd2879c98c0e2e1e4bddc8c87a2d7e2e90cba1a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "afad220d-babf-449e-8c09-7865c4d9be29", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "cb983310190874fe0119f191c050a523803177b414acb1a02e6f153e37c2ffe7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cf23a833-2854-4df1-8202-a9b02f2ebcc6", "node_type": "1", "metadata": {}, "hash": "635845a65fb85fc875d9a3585dbc19508decf36aba5a7da5f7d17b1b7fa2697f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "47. \"Software Engineering Code of Ethics\" (https://web.archive.org/w\neb/20150123034610/http://www.computer.org/cms/Computer.or\ng/Publications/code-of-ethics.pdf) (PDF). Archived from the\noriginal (http://www.computer.org/cms/Computer.org/Publication\ns/code-of-ethics.pdf) (PDF) on 2015-01-23. Retrieved\n2012-03-25.\n48. Labs, Qubit (29 November 2022). \"How Many Programmers are\nthere in the World and in the US? [2023]\" (https://qubit-labs.com/\nhow-many-programmers-in-the-world/). Qubit Labs. Retrieved\n7 February 2023.\n49. \"Global Developer Population and Demographic Study 2016 V2\"\n(http://evansdata.com/reports/viewRelease.php?reportID=9).\nEvans Data Corporation. Retrieved 19 January 2017.\n50. Rosenthal, Rachel (August 4, 2020). \"Tech Companies Want You\nto Believe America Has a Skills Gap\" (https://www.bloomberg.co\nm/opinion/articles/2020-08-04/big-tech-wants-you-to-believe-ame\nrica-has-a-skills-gap). Bloomberg. Retrieved October 8, 2021.\n51. \"Computer Software Engineers and Computer Programmers\" (htt\np://www.bls.gov/oco/ocos303.htm#training). Retrieved\n2009-12-17.\n52. \"Software Developers\" (https://www.bls.gov/ooh/computer-and-in\nformation-technology/software-developers.htm). Occupational\nOutlook Handbook. U. S. Bureau of labor Statistics. 4 September\n2019. Retrieved 11 December 2019.\n53. \"Computing Disciplines and Majors\" (https://www.acm.org/binarie\ns/content/assets/education/computing-disciplines.pdf) (PDF).\nAssociation for Computing Machinery. Retrieved 6 September\n2019.\n54. \"Software Developers: Occupational Outlook Handbook\" (http://w\nww.bls.gov/ooh/computer-and-information-technology/software-d\nevelopers.htm). U.S. Bureau of Labor Statistics.\n55. \"Computer Software Engineer\" (https://web.archive.org/web/201\n30726002354/http://www.bls.gov/k12/computers04.htm). Bureau\nof Labor Statistics. March 19, 2010. Archived from the original (ht\ntp://www.bls.gov/k12/computers04.htm) on July 26, 2013.\nRetrieved July 20, 2012.\n56. \"Software Developers\" (http://www.bls.gov/ooh/computer-and-inf\normation-technology/software-developers.htm). Bureau of Labor\nStatistics. January 8, 2014. Retrieved July 21, 2012.\n57. \"Computer Programmers\u00a0: Occupational Outlook Handbook:\u00a0:\nU.S. Bureau of Labor Statistics\" (https://www.bls.gov/ooh/comput\ner-and-information-technology/computer-programmers.htm).\nArchived (https://web.archive.org/web/20190503144645/https://w\nww.bls.gov/ooh/computer-and-information-technology/computer-\nprogrammers.htm) from the original on 3 May 2019. Retrieved\n17 January 2017.\n58. \"Archive By Publication\u00a0: Beyond the Numbers: U.S. Bureau of\nLabor Statistics\" (https://www.bls.gov/opub/btn/archive/publicatio\nn.htm#regional-reports). www.bls.gov.\n59. \"The Soon-to-Be-Extinct Embedded Software Engineer\" (https://\nwww.designnews.com/design-hardware-software/soon-be-extinct\n-embedded-software-engineer). designnews.com. May 10, 2018.\n60. \"hp's Developer Portal | HP International Women's Week:\nWomen in Computer Science dropping since 1980s\" (https://dev\nelopers.hp.com/public/blog/hp-international-womens-week-wome\nn-computer-science-dropping-1980s). developers.hp.com.\n61. \"Software engineer jobs in danger due to ChatGPT-like tools?", "mimetype": "text/plain", "start_char_idx": 10995, "end_char_idx": 14168, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cf23a833-2854-4df1-8202-a9b02f2ebcc6": {"__data__": {"id_": "cf23a833-2854-4df1-8202-a9b02f2ebcc6", "embedding": null, "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a5f7834-517f-462a-9487-930654d0129e", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "4a9845cb50ece78b591e9c0cbbd2879c98c0e2e1e4bddc8c87a2d7e2e90cba1a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "77bf5dac-ce17-4b66-9668-63a77eb2a187", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "b68e4cc01cacacb9cf648b17f25d10b7aef937677a7d63f69f7fe03ea331143c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "35697870-bd99-4ee1-b7a2-a78cefd58806", "node_type": "1", "metadata": {}, "hash": "8b6fb47fb916e9eae7350eee2ae33c63bdff846688c6ad15747dc307deffdee6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Retrieved\n17 January 2017.\n58. \"Archive By Publication\u00a0: Beyond the Numbers: U.S. Bureau of\nLabor Statistics\" (https://www.bls.gov/opub/btn/archive/publicatio\nn.htm#regional-reports). www.bls.gov.\n59. \"The Soon-to-Be-Extinct Embedded Software Engineer\" (https://\nwww.designnews.com/design-hardware-software/soon-be-extinct\n-embedded-software-engineer). designnews.com. May 10, 2018.\n60. \"hp's Developer Portal | HP International Women's Week:\nWomen in Computer Science dropping since 1980s\" (https://dev\nelopers.hp.com/public/blog/hp-international-womens-week-wome\nn-computer-science-dropping-1980s). developers.hp.com.\n61. \"Software engineer jobs in danger due to ChatGPT-like tools?\nHere's what Google CEO Sundar Pichai has to say\" (https://ww\nw.businesstoday.in/technology/news/story/software-engineer-job\ns-in-danger-due-to-chatgpt-like-tools-heres-what-google-ceo-sun\ndar-pichai-has-to-say-376341-2023-04-06). Business Today.\n2023-04-06. Retrieved 2023-05-12.\n62. \"ChatGPT could make these jobs obsolete\" (https://nypost.com/2\n023/01/25/chat-gpt-could-make-these-jobs-obsolete/). 2023-01-\n25. Retrieved 2023-05-12.\n63. Kay, Grace. \"Software engineers are panicking about being\nreplaced by AI\" (https://www.businessinsider.com/software-engin\neers-tech-panicking-golden-age-over-chatgpt-ai-blind-2023-4).\nBusiness Insider. Retrieved 2023-05-12.\n64. Fowler, Gary. \"Council Post: How Will ChatGPT Affect Jobs?\" (htt\nps://www.forbes.com/sites/forbesbusinessdevelopmentcouncil/20\n23/03/16/how-will-chatgpt-affect-jobs/). Forbes. Retrieved\n2023-05-12.\n65. Ito, Aki. \"ChatGPT spells the end of coding as we know it\" (http\ns://www.businessinsider.com/chatgpt-ai-technology-end-of-codin\ng-software-developers-jobs-2023-4). Business Insider. Retrieved\n2023-05-12.\n66. Zinkula, Aaron Mok, Jacob. \"ChatGPT may be coming for our\njobs. Here are the 10 roles that AI is most likely to replace\" (http\ns://www.businessinsider.com/chatgpt-jobs-at-risk-replacement-art\ni\ufb01cial-intelligence-ai-labor-trends-2023-02). Business Insider.\nRetrieved 2023-05-12.\n67. Cohen, Mikaela (15 April 2023). \"These are the tech jobs most\nthreatened by ChatGPT and A.I.\" (https://www.cnbc.com/2023/0\n4/15/these-are-the-tech-jobs-most-threatened-by-chatgpt-and-ai.\nhtml) CNBC. Retrieved 2023-05-12.\n68. \"SEI certi\ufb01cation page\" (http://www.sei.cmu.edu/certi\ufb01cation/).\nSei.cmu.edu. Retrieved 2012-03-25.\n69. Wyrostek, Warren (March 14, 2008). \"The Top 10 Problems with\nIT Certi\ufb01cation in 2008\" (http://www.informit.com/articles/article.a\nspx?p=1180991). InformIT. Retrieved 2009-03-03.\n70. IEEE Computer Society. \"2006 IEEE computer society report to\nthe IFIP General Assembly\" (http://www.i\ufb01p.org/minutes/GA2006/\nTab18b-US-IEEE.pdf) (PDF). Retrieved 2007-04-10.\n71. IEEE. \"CSDA\" (http://www.computer.org/portal/web/certi\ufb01cation/c\nsda). Retrieved 2010-04-20.\n72. Canadian Information Processing Society. \"I.S.P.", "mimetype": "text/plain", "start_char_idx": 13484, "end_char_idx": 16359, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "35697870-bd99-4ee1-b7a2-a78cefd58806": {"__data__": {"id_": "35697870-bd99-4ee1-b7a2-a78cefd58806", "embedding": null, "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a5f7834-517f-462a-9487-930654d0129e", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "4a9845cb50ece78b591e9c0cbbd2879c98c0e2e1e4bddc8c87a2d7e2e90cba1a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cf23a833-2854-4df1-8202-a9b02f2ebcc6", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "29275ccb1d2fe194f686a6e4f630e360ee18f3e1b819e63408460f1008b274a9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f52a26a5-0c94-4f1c-8ded-a952878ad14b", "node_type": "1", "metadata": {}, "hash": "ba6623652cc4de696df252cfc0b25184c8c188a3c6698e2c362ea3ff419f01b6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Retrieved 2012-03-25.\n69. Wyrostek, Warren (March 14, 2008). \"The Top 10 Problems with\nIT Certi\ufb01cation in 2008\" (http://www.informit.com/articles/article.a\nspx?p=1180991). InformIT. Retrieved 2009-03-03.\n70. IEEE Computer Society. \"2006 IEEE computer society report to\nthe IFIP General Assembly\" (http://www.i\ufb01p.org/minutes/GA2006/\nTab18b-US-IEEE.pdf) (PDF). Retrieved 2007-04-10.\n71. IEEE. \"CSDA\" (http://www.computer.org/portal/web/certi\ufb01cation/c\nsda). Retrieved 2010-04-20.\n72. Canadian Information Processing Society. \"I.S.P. Designation\" (ht\ntp://www.cips.ca/standards/isp). Retrieved 2007-03-15.\n73. \"Professional Engineers Ontario: Welcome to PEO's website\" (htt\np://www.peo.on.ca). Peo.on.ca. Retrieved 2012-03-25.\n74. Thibodaux, Patrick (2006-05-05). \"As outsourcing gathers steam,\ncomputer science interest wanes\" (http://www.computerworld.co\nm/article/2555175/it-careers/as-outsourcing-gathers-steam--com\nputer-science-interest-wanes.html). Computerworld.com.\nRetrieved 2016-12-06.\n75. Robert Mullins (March 13, 2007). \"Software developer growth\nslows in North America: Study shows Asia will lead in software\ndeveloper jobs by 2010\" (https://www.infoworld.com/article/2660\n992/software-developer-growth-slows-in-north-america.html).\nInfoWorld. Software Development.\n76. \"Gartner Magic Quadrant\" (https://web.archive.org/web/2008092\n0182857/http://www.cognizant.com/html/content/news/GartnerM\nQ_Cognizant.pdf) (PDF). Cognizant.com. Archived from the\noriginal (https://www.cognizant.com/html/content/news/GartnerM\nQ_Cognizant.pdf) (PDF) on 2008-09-20. Retrieved 2012-03-25.\n77. Casey, Valentine (2010-08-20). \"Virtual software team project\nmanagement\" (http://eprints.dkit.ie/116/1/VCaseyRevisedVersio\nn.doc). Journal of the Brazilian Computer Society. 16 (2): 83\u201396.\ndoi:10.1007/s13173-010-0013-3 (https://doi.org/10.1007%2Fs13\n173-010-0013-3). S2CID\u00a014383734 (https://api.semanticscholar.\norg/CorpusID:14383734).\n78. \"Outstanding Research Award\" (https://www2.sigsoft.org/awards/\noutstandingresearch). SIGSOFT. Retrieved 1 April 2024.\n79. David Lo (SIGSOFT Awards Chair); Thomas Zimmermann\n(SIGSOFT Chair) (17 January 2024). \"SIGSOFT Awards 2024\"\n(https://sigsoft.medium.com/sigsoft-awards-2024-ce34b9ee23a\n6). ACM SIGSOFT Blog. Retrieved 1 April 2024.\n80. \"ICSE Most In\ufb02uential Paper Award\" (https://www.sigsoft.org/awa\nrds/icseMIPAward.html). ACM SIGSOFT.\n81. Donald J. Bagert (April 1999). \"Viewpoint: taking the lead in\nlicensing software engineers\". Communications of the ACM. 42\n(4): 27\u201329. doi:10.1145/299157.299163 (https://doi.org/10.114\n5%2F299157.299163). \n82. Barry Boehm (September\u2013October 2002). \"Software engineering\nis a value-based contact sport\". IEEE Software. 19 (5): 95\u201396.\ndoi:10.1109/MS.2002.1032863 (https://doi.org/10.1109%2FMS.2\n002.1032863).", "mimetype": "text/plain", "start_char_idx": 15830, "end_char_idx": 18609, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f52a26a5-0c94-4f1c-8ded-a952878ad14b": {"__data__": {"id_": "f52a26a5-0c94-4f1c-8ded-a952878ad14b", "embedding": null, "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a5f7834-517f-462a-9487-930654d0129e", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "4a9845cb50ece78b591e9c0cbbd2879c98c0e2e1e4bddc8c87a2d7e2e90cba1a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "35697870-bd99-4ee1-b7a2-a78cefd58806", "node_type": "1", "metadata": {"page_label": "4", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "55bc362a47b4a9b6b08d4cfd0733462769bdac08df99fb5bcf2b6c5d32f77286", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\"ICSE Most In\ufb02uential Paper Award\" (https://www.sigsoft.org/awa\nrds/icseMIPAward.html). ACM SIGSOFT.\n81. Donald J. Bagert (April 1999). \"Viewpoint: taking the lead in\nlicensing software engineers\". Communications of the ACM. 42\n(4): 27\u201329. doi:10.1145/299157.299163 (https://doi.org/10.114\n5%2F299157.299163). \n82. Barry Boehm (September\u2013October 2002). \"Software engineering\nis a value-based contact sport\". IEEE Software. 19 (5): 95\u201396.\ndoi:10.1109/MS.2002.1032863 (https://doi.org/10.1109%2FMS.2\n002.1032863).\n83. Dijkstra, E. W. (1988). \"On the cruelty of really teaching\ncomputing science\" (http://www.cs.utexas.edu/~EWD/transcriptio\nns/EWD10xx/EWD1036.html). Retrieved 2014-01-10.\nPierre Bourque; Richard E. (Dick) Fairley, eds. (2014). Guide to the Software Engineering Body of Knowledge Version 3.0 (SWEBOK) (https://www.computer.org/web/swebok/v3). IEEE Computer Society.\nSources\n6/7/25, 7:31 PM Software engineering - Wikipedia\nhttps://en.wikipedia.org/wiki/Software_engineering 4/5", "mimetype": "text/plain", "start_char_idx": 18098, "end_char_idx": 19089, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e826d8e8-32a8-4125-8945-e7d3e3cd4d1e": {"__data__": {"id_": "e826d8e8-32a8-4125-8945-e7d3e3cd4d1e", "embedding": null, "metadata": {"page_label": "5", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bea453b6-19cc-4716-9aa0-7972c7a5f75a", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Software engineering - Wikipedia.pdf", "file_path": "/Users/sajalsabat/Desktop/Projects/wikirag/articles/Software engineering - Wikipedia.pdf", "file_type": "application/pdf", "file_size": 782805, "creation_date": "2025-06-07", "last_modified_date": "2025-06-07"}, "hash": "86e008fc641fc86ed463fb59ff24b9c977d6c2f803074efa0bddaca9e79392e0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Alain Abran; James W. Moore; Pierre Bourque; Robert Dupuis; Leonard L. Tripp, eds. (2004). Guide to the Software Engineering Body of Knowledge (https://web.archive.org/web/20160509154355/https://ww\nw.computer.org/portal/web/swebok). IEEE Computer Society. Archived from the original (http://www.computer.org/portal/web/swebok) on 2016-05-09. Retrieved 2010-09-13.\nIan Sommerville (March 24, 2015). Software Engineering (10th\u00a0ed.). Pearson Education Limited. ISBN\u00a0978-0-13-394303-0.\nPierre Bourque; Richard E. (Dick) Fairley, eds. (2014). Guide to the Software Engineering Body of Knowledge Version 3.0 (SWEBOK) (https://www.computer.org/web/swebok/v3). IEEE Computer Society.\nRoger S. Pressman; Bruce Maxim (January 23, 2014). Software Engineering: A Practitioner's Approach (8th\u00a0ed.). McGraw-Hill. ISBN\u00a0978-0-07-802212-8.\nIan Sommerville (March 24, 2015). Software Engineering (10th\u00a0ed.). Pearson Education Limited. ISBN\u00a0978-0-13-394303-0.\nJalote, Pankaj (2005) [1991]. An Integrated Approach to Software Engineering (https://www.springer.com/gp/book/9780387208817) (3rd\u00a0ed.). Springer. ISBN\u00a0978-0-387-20881-7.\nBruegge, Bernd; Dutoit, Allen (2009). Object-oriented software engineering\u00a0: using UML, patterns, and Java (https://archive.org/details/objectorientedso0000brue) (3rd\u00a0ed.). Prentice Hall. ISBN\u00a0978-0-13-\n606125-0.\nOshana, Robert (2019-06-21). Software engineering for embedded systems\u00a0: methods, practical techniques, and applications (Second\u00a0ed.). Kidlington, Oxford, United Kingdom. ISBN\u00a0978-0-12-809433-4.\nPierre Bourque; Richard E. Fairley, eds. (2004). Guide to the Software Engineering Body of Knowledge Version 3.0 (SWEBOK), https://www.computer.org/web/swebok/v3. IEEE Computer Society.\nThe Open Systems Engineering and Software Development Life Cycle Framework (http://opensdlc.org/) Archived (https://web.archive.org/web/20100718114646/http://opensdlc.org/) 2010-07-18 at the\nWayback Machine OpenSDLC.org the integrated Creative Commons SDLC\nSoftware Engineering Institute (http://www.sei.cmu.edu/) Carnegie Mellon\nRetrieved from \"https://en.wikipedia.org/w/index.php?title=Software_engineering&oldid=1294435037\"\nFurther reading\nExternal links\n6/7/25, 7:31 PM Software engineering - Wikipedia\nhttps://en.wikipedia.org/wiki/Software_engineering 5/5", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2268, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}}